*.btn"< Back"=< 戻る
*.btn"Cancel"=キャンセル
*.btn"Close"=閉じる
*.btn"Finish"=完了
*.btn"Next >"=次へ >
*.btn"OK"==OK
*.hnt"Filter"=フィルタ
(dlgSgPreferences|dlgSgRepositorySettings).lbl"Enter regular expressions defining the grouping. Example: `refs\\/tags\\/build\(?<name>.\\\*\)`"=グルーピングを定義するための正規表現を入力します。 例: `refs\\/tags\\/build\(?<name>.\\\*\)`
#                                                                                                                                             !=Enter regular expressions defining the grouping. Example: `refs\\/tags\\/build\(?<name>.\\\*\)`
(dlgSgPreferences|dlgSgRepositorySettings).lbl"Optionally, enter regular expressions defining additional refs to preserve."=必要に応じて、追加の保持対象となる参照を定義する正規表現を入力してください。
#                                                                                                                         !=Optionally, enter regular expressions defining additional refs to preserve.
(dlgSgPreferences|dlgSgRepositorySettings).ttpGroupPatterns"Example: <tt>build:refs/tags/build\(?&lt;name&gt;.\*\),version:refs/tags/\\d+\\.\\d+\\..\*</tt>"=例: <tt>build:refs/tags/build\(?&lt;name&gt;.\*\),version:refs/tags/\\d+\\.\\d+\\..\*</tt>
#                                                                                                                                                          !=Example: <tt>build:refs/tags/build\(?&lt;name&gt;.\*\),version:refs/tags/\\d+\\.\\d+\\..\*</tt>
(dlgSgPreferences|dlgSgRepositorySettings).ttpGroupPatterns"Next, the refs remaining in the group will be passed on from child to parent commit. Now, once again they will be assigned to matching groups, possibly replacing other refs or possibly becoming replaced by more recent refs."=次に、グループに残っているリファレンス\(refs\)のうち、子コミットから親コミットへと渡されるものがあります。 これらのリファレンスは、再びマッチンググループに割り当てられ、他のリファレンスに置き換えられる場合もあれば、更新されたリファレンスに置き換えられる場合もあります。
#                                                                                                                                                                                                                                                                                          !=Next, the refs remaining in the group will be passed on from child to parent commit. Now, once again they will be assigned to matching groups, possibly replacing other refs or possibly becoming replaced by more recent refs.
(dlgSgPreferences|dlgSgRepositorySettings).ttpGroupPatterns"Patterns will be matched against the full ref-name, including the <tt>refs</tt>-prefix. For a matching ref, its name will be shortened to the last path-segment \('\\/'\). For example, <tt>refs/tags/build-.\*</tt> will match a tag <tt>refs/tags/build-123</tt> and its name will be shortened to <tt>build-123</tt>. You may add a <i>named regex capturing group</i> called <tt>name</tt> to further customize the name extraction. For example, <tt>refs/tags/build-\(?&lt;name&gt;.\*\)</tt> will match <tt>refs/tags/build-123</tt> and its name will be shortened to <tt>123</tt>."=パターンは、'refs' プレフィックスを含むフル リファレンス名に対してマッチングされます。マッチングしたリファレンス名は、最後のパス セグメント（'/'） までを短縮形で表示します。たとえば、<tt>refs/tags/build-.\*<\/tt> はタグ <tt>refs/tags/build-123<\/tt> にマッチし、その名前が <tt>build-123<\/tt> に短縮されます。また、<tt>name<\/tt> という名前の <i>named regex capturing group<\/i> を追加することで、名前の取り出しをさらにカスタマイズすることができます。たとえば、<tt>refs/tags/build-\\(?&lt;name&gt;.\*\\)<\/tt> は <tt>refs/tags/build-123<\/tt> にマッチし、その名前が <tt>123<\/tt> に短縮されます。
atterns will be matched against the full ref-name, including the <tt>refs</tt>-prefix. For a matching ref, its name will be shortened to the last path-segment \('\\/'\). For example, <tt>refs/tags/build-.\*</tt> will match a tag <tt>refs/tags/build-123</tt> and its name will be shortened to <tt>build-123</tt>. You may add a <i>named regex capturing group</i> called <tt>name</tt> to further customize the name extraction. For example, <tt>refs/tags/build-\(?&lt;name&gt;.\*\)</tt> will match <tt>refs/tags/build-123</tt> and its name will be shortened to <tt>123</tt>.
(dlgSgPreferences|dlgSgRepositorySettings).ttpGroupPatterns"Refs will be categorized into groups: when traversing the repository root log, refs will first be assigned to matching groups. Every group will store only the most recently encountered ref, i.e. if a new ref is encountered, it will replace all existing refs in the current group."=Refs はグループに分類されます。リポジトリのルートログを走査する際に、Refs はまず対応するグループに割り当てられます。各グループは、最後に見つかった Ref のみを格納します。つまり、新しい Ref が見つかった場合、現在のグループにあるすべての Ref は置き換えられます。
#                                                                                                                                                                                                                                                                                                                                                  !=Refs will be categorized into groups: when traversing the repository root log, refs will first be assigned to matching groups. Every group will store only the most recently encountered ref, i.e. if a new ref is encountered, it will replace all existing refs in the current group.
(dlgSgPreferences|dlgSgRepositorySettings).ttpGroupPatterns"You can assign a title to a pattern by prefixing it by <tt>title:</tt>; the title may only contain letters, digits and '_'."=パターンにタイトルを割り当てるには、先頭に <tt>title:</tt> を付けます。タイトルに使用できるのは、文字、数字、'_' のみです。
#                                                                                                                                                                                      !=You can assign a title to a pattern by prefixing it by <tt>title:</tt>; the title may only contain letters, digits and '_'.
(dlgSgPreferences|dlgSgRepositorySettings).ttpGroupPatterns"You can specify multiple groups patterns, separated by comma \(<tt>,</tt>\), which will be processed in the specified order: if you define two groups which both match a set of refs, such refs will be assigned to the first group."=カンマ\(<tt>,</tt>\)で区切られた複数のグループパターンを指定することができ、指定した順番で処理されます。あるRefにマッチする2つのグループを定義した場合、そのRefは最初のグループに割り当てられます。
#                                                                                                                                                                                                                                                                                               !=You can specify multiple groups patterns, separated by comma \(<tt>,</tt>\), which will be processed in the specified order: if you define two groups which both match a set of refs, such refs will be assigned to the first group.
(dlgSgPreferences|dlgSgRepositorySettings).ttpSinglePattern"Example: <tt>refs\\/remotes\\/origin\\/release-.\\\*</tt>"=例：<tt>refs\\/remotes\\/origin\\/release-.\\\*</tt>
#                                                                                                                    !=Example: <tt>refs\\/remotes\\/origin\\/release-.\\\*</tt>
(dlgSgPreferences|dlgSgRepositorySettings).ttpSinglePattern"For example, you want to make sure that each of your release branches is considered as group on its own and thus show up in the log graph or will be treated separately by the 'on-refs' calculation."=例えば、リリースブランチがそれぞれ独自のグループとして扱われ、ロググラフに表示されたり、'on-refs' の計算で別々に扱われるようにしたいとします。
#                                                                                                                                                                                                                                                                !=For example, you want to make sure that each of your release branches is considered as group on its own and thus show up in the log graph or will be treated separately by the 'on-refs' calculation.
(dlgSgPreferences|dlgSgRepositorySettings).ttpSinglePattern"In addition to the grouping logic, a ref matching the <b>Single Patterns</b> will be assigned to a group on its own. This is a shortcut for enumerating each of these refs as explicit pattern in <b>Group Patterns</b>."=<b>単一のパターン</b> に一致するrefについては、グループロジックとは別にそのrefがグループに割り当てられます。これは、<b>グループパターン</b> で明示的なパターンとして各refを列挙するのと同じです。
#                                                                                                                                                                                                                                                                                   !=In addition to the grouping logic, a ref matching the <b>Single Patterns</b> will be assigned to a group on its own. This is a shortcut for enumerating each of these refs as explicit pattern in <b>Group Patterns</b>.
(wndLog|wndProject).btn"Compare"=比較
#                              !=Compare
(wndLog|wndProject).lbl"Force Compare"=強制的に比較
#                                    !=Force Compare
(wndLog|wndProject).lblStatusBarMessage"Please wait ..."=しばらくお待ちください...
#                                                      !=Please wait ...
dlgCommit.replaceMessage.btn"Replace"=置換
dlgCommit.replaceMessage.chk=常に置き換える
dlgCommit.replaceMessage.fur=置き換えた後、履歴ボタンをクリックすると以前のメッセージを見つけることができます。
dlgCommit.replaceMessage.hdl=既存のメッセージを置き換えますか?
dlgCommit.replaceMessage.tle=メッセージを置き換える
dlgCommitGitHubConfirmEmail.btn"Confirm Email"=
#                                            !=Confirm Email
dlgCommitGitHubConfirmEmail.fur=
#                             !=If this repository is open-source, you might want to hide your email address, as \[https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-personal-account-on-github/managing-email-preferences/setting-your-commit-email-address#setting-your-email-address-for-a-single-repository suggested by GitHub\], and use instead <username>@users.noreply.github.com.
dlgCommitGitHubConfirmEmail.hdl%1=
#                               !=Commit with default email address $1?
dlgCommitGitHubConfirmEmail.rbt"Always use default email address, unless overridden in repository"=
#                                                                                                !=Always use default email address, unless overridden in repository
dlgCommitGitHubConfirmEmail.rbt"Use following email address:"=
#                                                           !=Use following email address:
dlgCommitGitHubConfirmEmail.tle=コミット
#                             !=Commit
dlgCommitInvisibleIndex.btn"Commit"=コミット
#                                 !=Commit
dlgCommitInvisibleIndex.fur=いくつかのステージングされたファイルは現在表示されていません。
#                         !=Some staged files are not visible at the moment.
dlgCommitInvisibleIndex.hdl=表示されていないステージングされたファイルをコミットしますか？
#                         !=Commit invisible staged files?
dlgCommitInvisibleIndex.tle=コミット
#                         !=Commit
dlgCommitView.hiddenOptions.chk=次回から表示しない
#                             !=Don't show again
dlgCommitView.hiddenOptions.fur=
#                             !=To use the options, they need to remain visible.
dlgCommitView.hiddenOptions.hdl=
#                             !=Hidden options will be treated as unselected.
dlgCommitView.hiddenOptions.tle=コミット
#                             !=Commit
dlgDgAbout.edt"Build Date"=ビルド日
dlgDgAbout.edt"Email"=電子メール
dlgDgAbout.edt"Java Version"=Java バージョン
dlgDgAbout.edt"Maximum Heap"=最大ヒープ
dlgDgAbout.edt"Name"=名前
dlgDgAbout.edt"Settings Path"=設定ファイルパス
dlgDgAbout.edt"Version"=バージョン
dlgDgAbout.tab"Credits"=クレジット
dlgDgAbout.tab"Information"=情報
dlgDgAbout.tab"Licensee"=ライセンス
dlgDgAbout.tle=DeepGitについて
dlgDgRefMapperGroupConfig.hdl=このリポジトリのタグをグループ化するためのパターンを設定します。
dlgDgRefMapperGroupConfig.inf=この設定にマッチしたタグ、ブランチ、その他の参照は、ナビゲーショングラフに表示されます。
dlgDgRefMapperGroupConfig.tle=タグ・グルーピングの設定
dlgDgSetEncoding.edt"Text File Encoding"=テキストファイルのエンコーディング
dlgDgSetEncoding.hdl=エンコーディング設定
dlgDgSetEncoding.inf=ファイルの処理と表示に使用するエンコーディングを指定します。なお、UTF-8のエンコーディングは、ここでの設定にかかわらず、自動検出されます。
dlgDgSetEncoding.tle=エンコーディングを設定する
dlgDgSetPerspectiveCantSwitch.fur=利用可能なオリジンを検査するには、まずそれらを評価する必要があります。 Blame ビューで行を選択します。次に、可能なオリジンの計算が完了するまで待ちます。
dlgDgSetPerspectiveCantSwitch.hdl=パースペクティブを切り替えることができません。
dlgDgSetPerspectiveCantSwitch.tle=Origins パースペクティブ
dlgInfo.tle=破棄
dlgProgress.btn"Stop"=停止
dlgProgress.lbl"Please wait ..."=しばらくお待ちください...
#                              !=Please wait ...
dlgProgress.tle"Checking connectivity"=接続を確認中
dlgProgress.tle"Checking push conditions"=プッシュ条件の確認
dlgProgress.tle"JIRA"==JIRA
dlgProgress.tle"Jump To"=ジャンプ先
dlgProgress.tle"Layouting Graph"=レイアウトグラフ
dlgProgress.tle"Refresh"=更新
dlgProgress.tle"Reveal Commit"=コミットを表示する
dlgProgress.tle"SmartGit Installation Update"=SmartGit インストールの更新
dlgProgress.tle"Upgrade"=アップグレード
dlgQBugFileSendingFailed.fur%1=プロキシの設定が必要なのか、サーバーが一時的にダウンしているのかもしれません。'$1'
dlgQBugFileSendingFailed.hdl%1=クラッシュ・ログを$1に送信できませんでした。
dlgQBugFileSendingFailed.tle=ネイティブクラッシュログ
dlgQBugReportSend.btn"Force Exit"=強制終了
dlgQBugReportSend.btn"Ignore \(Dangerous\)"=無視する\(危険\)
dlgQBugReportSend.btn"Just Exit"=終了のみ
dlgQBugReportSend.btn"Report && Exit"=報告して終了
dlgQBugReportSend.btn"Report Bug"=バグを報告
dlgQBugReportSend.edt"Comments or Steps to Reproduce"=コメントまたは再現のための手順\(英語で記述してください\)
dlgQBugReportSend.edt"Email"=電子メール
dlgQBugReportSend.edt"Reply To"=返信先
dlgQBugReportSend.lbl"Sorry for the trouble!"=ご迷惑おかけして申し訳ありません！
dlgQBugReportSend.lbl"The \[file log-file\] will be sent with this bug report. Alternatively, you may send it to \[email smartgit@syntevo.com\]."=このバグレポートとともに、\[file log-file\] を送信します。または、\[email smartgit@syntevo.com\] に送信することもできます。
#                                                                                                                                               !=The \[file log-file\] will be sent with this bug report. Alternatively, you may send it to \[email smartgit@syntevo.com\].
dlgQBugReportSend.lbl"What did you do? We often solve a difficult bug after receiving just one good hint!"=あなたは何をしましたか？たった 1 つの良いヒントを頂けるだけで、難しいバグが解決されることがよくあります。
#                                                                                                        !=What did you do? We often solve a difficult bug after receiving just one good hint!
dlgQBugReportSend.tle=内部エラー
dlgQDockManagerClosedView.chk=次回から表示しない
dlgQDockManagerClosedView.fur=再び開くには、「ウィンドウ」メニューから対応するメニューを使用します。
dlgQDockManagerClosedView.hdl%1=ビュー'$1'を閉じました。
dlgQDockManagerClosedView.tle=閉じられたビュー
dlgQFileSaveAcceptFilterOverwrite.btn"Overwrite"=上書き
dlgQFileSaveAcceptFilterOverwrite.fur=別のファイルに保存する場合は、「キャンセル」をクリックします。
dlgQFileSaveAcceptFilterOverwrite.hdl%1=$1 は既に存在します。上書きしますか？
dlgQFileSaveAcceptFilterOverwrite.tle=ファイルの上書き
dlgQFrameManagerExit.btn"Discard Changes && Exit"=変更を破棄して終了
dlgQFrameManagerExit.btn"Force Exit"=強制終了
#                                  !=Force Exit
dlgQFrameManagerExit.fur=今すぐ終了すると、保存されていない変更が失われます。
dlgQFrameManagerExit.hdl=本当にSmartGitを終了しますか?
dlgQFrameManagerExit.tle=終了
dlgQIntegerInputProviderInvalidValue.fur%2=Portは'$1'から'$2'の範囲でなければなりません。
dlgQIntegerInputProviderInvalidValue.hdl%1=フィールド '$1' のテキストは有効ではありません。
dlgQIntegerInputProviderInvalidValue.tle=入力の検証
dlgQProxyConfigure.chk"Proxy requires authentication"=プロキシに認証が必要
dlgQProxyConfigure.edt"Host"=ホスト
dlgQProxyConfigure.edt"Password"=パスワード
dlgQProxyConfigure.edt"Port"=ポート
dlgQProxyConfigure.edt"Username"=ユーザ名
dlgQProxyConfigure.lbl"Note: The password will be stored in plain text in SmartGit's configuration area!"=\
 注：パスワードは、SmartGitの設定領域にプレーンテキストで保存されます。
dlgQProxyConfigure.rbt"Auto-detect the system proxy"=システムプロキシを自動検出
dlgQProxyConfigure.rbt"Don't use a proxy"=プロキシを使わない
dlgQProxyConfigure.rbt"Use following proxy"=以下のプロキシを使用
dlgQProxyConfigure.tle=プロキシ設定
dlgQProxyConnectionFailed.btn"Configure Proxy"=プロキシ設定
dlgQProxyConnectionFailed.btn"Retry"=再試行
dlgQProxyConnectionFailed.fur=詳細: syntevo.com
dlgQProxyConnectionFailed.hdl%1=$1 に接続できませんでした。
dlgQProxyConnectionFailed.tle=接続に失敗しました。
dlgQUpdateCheckForNewVersion.btn"Configure Proxy"=プロキシ設定
dlgQUpdateCheckForNewVersion.btn"Exit"=終了
dlgQUpdateCheckForNewVersion.btn"Retry"=再試行
dlgQUpdateCheckForNewVersion.btn"Skip"=スキップ
dlgQUpdateCheckForNewVersion.hdl=SmartGit は更新を確認する必要があります
dlgQUpdateCheckForNewVersion.inf=必要であれば、プロキシの設定を行い、再試行してください。
dlgQUpdateCheckForNewVersion.tle=新しいバージョンの確認
dlgQUpdateCheckForNewVersionFailed.fur%1=詳細: '$1'への接続に失敗しました。
dlgQUpdateCheckForNewVersionFailed.hdl=新しいバージョンのチェックに失敗しました。
dlgQUpdateCheckForNewVersionFailed.tle=新しいバージョンの確認
dlgQUpdateCheckLatestBuild.btn"Get Latest Build"=最新のビルドを入手する
dlgQUpdateCheckLatestBuild.fur=サポートチームから要請があった場合のみ、最新のビルドを使用してください。
dlgQUpdateCheckLatestBuild.hdl=最新のビルドをダウンロードしますか？
dlgQUpdateCheckLatestBuild.tle=最新ビルドの確認
dlgQUpdateCheckLatestBuildFetchFailed.fur%1=詳細: $1
dlgQUpdateCheckLatestBuildFetchFailed.hdl=アップグレードの初期化に失敗しました。
dlgQUpdateCheckLatestBuildFetchFailed.tle=最新ビルドの確認
dlgQUpdateCheckNewVersion.btn"Download"=ダウンロード
dlgQUpdateCheckNewVersion.fur=新しいバージョンにアップデートすることをお勧めします。
dlgQUpdateCheckNewVersion.hdl=SmartGitの新しいバージョンが利用可能です。
dlgQUpdateCheckNewVersion.tle=新しいバージョンの確認
dlgQUpdateCheckNoNewerLatestBuild.fur=すでに最新のビルドを使用しています。
dlgQUpdateCheckNoNewerLatestBuild.hdl=新しいビルドは見つかりませんでした。
dlgQUpdateCheckNoNewerLatestBuild.tle=最新ビルドの確認
dlgQUpdateCheckNowNewerVersion.fur=すでに最新のバージョンを使用しています。
dlgQUpdateCheckNowNewerVersion.hdl=新しいバージョンは見つかりませんでした。
dlgQUpdateCheckNowNewerVersion.tle=新しいバージョンの確認
dlgRewriteTextFiles.btn"Fix Line-Endings"=改行を修正
dlgRewriteTextFiles.chk"Enforce line-ending on end of file"=\
 ファイル終端での改行を強制する
dlgRewriteTextFiles.cmb"Old Mac \(CR \\r\)"=
#                                         !=Old Mac \(CR \\r\)
dlgRewriteTextFiles.cmb"Unix \(LF \\n\)"=
#                                      !=Unix \(LF \\n\)
dlgRewriteTextFiles.cmb"Windows \(CR LF \\r\\n\)"=
#                                               !=Windows \(CR LF \\r\\n\)
dlgRewriteTextFiles.edt"Line-Endings"=改行コード
dlgRewriteTextFiles.hdl=選択した改行コードでテキスト ファイルを書き換える
dlgRewriteTextFiles.inf=テキスト ファイルの書き込みに使用する改行コードを選択します。
dlgRewriteTextFiles.tle=改行コードを修正する
dlgScAboutUpdateInstallation.btn"Upgrade Installation"=アップグレードのインストール
dlgScAboutUpdateInstallation.fur=これには少し時間がかかり、SmartGitを再起動する必要があります。
dlgScAboutUpdateInstallation.hdl%1=インストールディレクトリをバージョン$1にアップグレードしますか？
dlgScAboutUpdateInstallation.tle=アップグレードのインストール
dlgScApplicationStarterRestart.btn"Exit"=終了
dlgScApplicationStarterRestart.btn"Remind Later"=後で通知
dlgScApplicationStarterRestart.btn"Restart"=再起動
dlgScApplicationStarterRestart.fur=ダウンロードしたプログラムの更新が適用されます。
dlgScApplicationStarterRestart.hdl=SmartGitは再起動が必要です。
dlgScApplicationStarterRestart.tle=再起動
dlgScConflictSolverAdd.hdl=コンフリクトソルバーの追加
dlgScConflictSolverAdd.tle=追加
dlgScConflictSolverEdit.hdl=コンフリクトソルバーの編集
dlgScConflictSolverEdit.tle=編集
dlgScConflictSolverInconsistentLineEndings.fur=マージ ファイルの内容に、混在した \(一貫性のない\) 改行文字が含まれています。これらの改行文字の混在が意図的なものである場合は、このファイルを保存するときに上書きしないように注意してください。
dlgScConflictSolverInconsistentLineEndings.hdl=ファイルには、混在した \(一貫性のない\) 改行文字が含まれています。
dlgScConflictSolverInconsistentLineEndings.tle%1=\[$1\] - コンフリクトソルバー
dlgScConflictSolverUnresolvedConflicts.chk=次回から警告しない
dlgScConflictSolverUnresolvedConflicts.fur=すべての競合が解決されたわけではありません。
dlgScConflictSolverUnresolvedConflicts.hdl=コンフリクトソルバーを終了しますか？
dlgScConflictSolverUnresolvedConflicts.tle=未解決の競合
dlgScConflictSolver(Add|Edit).edt"Arguments"=引数
dlgScConflictSolver(Add|Edit).edt"Command"=コマンド
dlgScConflictSolver(Add|Edit).edt"File Pattern"=ファイルパターン
dlgScConflictSolver(Add|Edit).inf=ファイルパターン\(例: \*.txt\)を定義し、このパターンに一致するファイルの競合を解決するために使用するマージツールを選択します。
dlgScConflictSolver(Add|Edit).lbl"Valid wildcards are ?\u00a0\(one arbitrary character\) and \*\u00a0\(any number of arbitrary characters\). Separate multiple patterns by comma. Example:\u00a0\*.txt,\u00a0\*.html"=\
 有効なワイルドカードは下記のとおりです。複数のパターンはコンマで区切ります。\r例：*.txt,*.html \r ? (任意の1文字) \r * (任意の数の任意の文字)
dlgScConflictSolver(Add|Edit).lbl"You must use the variables \$\{leftFile\}, \$\{rightFile\} and \$\{mergedFile\}."=\
 変数 \$\{leftFile\}, \$\{rightFile\} , \$\{mergedFile\} を使用する必要があります。
dlgScConflictSolver(Add|Edit).mni"Base File"=ベースファイル
dlgScConflictSolver(Add|Edit).mni"Encoding"=エンコーディング
dlgScConflictSolver(Add|Edit).mni"Left File"=左のファイル
dlgScConflictSolver(Add|Edit).mni"Left Title"=左のタイトル
dlgScConflictSolver(Add|Edit).mni"Merged File"=マージされたファイル
dlgScConflictSolver(Add|Edit).mni"Merged Title"=マージされたタイトル
dlgScConflictSolver(Add|Edit).mni"Right File"=右のファイル
dlgScConflictSolver(Add|Edit).mni"Right Title"=右のタイトル
dlgScConflictSolver(Add|Edit).rbt"Built-in Conflict Solver"=内蔵のコンフリクトソルバー
dlgScConflictSolver(Add|Edit).rbt"External Conflict Solver"=外部コンフリクトソルバー
dlgScCustomizeAccelerators.btn"Assign"=割り当て
dlgScCustomizeAccelerators.btn"Clear"=クリア
dlgScCustomizeAccelerators.btn"Reset"=リセット
dlgScCustomizeAccelerators.col"Accelerator"=ショートカット
dlgScCustomizeAccelerators.col"Default"=デフォルト
dlgScCustomizeAccelerators.col"Menu Item"=メニュー項目
dlgScCustomizeAccelerators.edt"Accelerator"=ショートカット
dlgScCustomizeAccelerators.hdl=ショートカットのカスタマイズ
dlgScCustomizeAccelerators.inf=ショートカットを変更するメニュー項目をダブルクリックし、アクセラレータ キーを押して [アサイン] ボタンをクリックします。
dlgScCustomizeAccelerators.tle=カスタマイズ
dlgScCustomizeToolBar.btn"Add"=追加
dlgScCustomizeToolBar.btn"Remove"=除去
dlgScCustomizeToolBar.btn"Reset to Default"=初期設定に戻す
dlgScCustomizeToolBar.chk"Show text below icon"=アイコンの下にテキストを表示する
dlgScCustomizeToolBar.col"Available"=利用可能
dlgScCustomizeToolBar.col"Selected"=選択された項目
dlgScCustomizeToolBar.tle=ツールバーの設定
dlgScDevOpsCredentials.btn"Login"=ログイン
dlgScDevOpsCredentials.chk"Store password"=パスワードの保存
dlgScDevOpsCredentials.edt"Password"=パスワード
dlgScDevOpsCredentials.edt"User Name"=ユーザ名
dlgScDevOpsCredentials.hdl%1='$1' にログイン
dlgScDevOpsCredentials.inf=JIRAに認証するためのユーザー名とパスワードを入力します。
dlgScDevOpsCredentials.tle=JIRAにログインする
dlgScDevOpsCredentials.wrn"HTTP response code $1"=HTTP応答コード $1
dlgScDevOpsSslClientCertificate.btn"Login"=ログイン
dlgScDevOpsSslClientCertificate.chk"Store passphrase"=パスフレーズを保存する
dlgScDevOpsSslClientCertificate.edt"Certificate"=証明書
dlgScDevOpsSslClientCertificate.edt"Passphrase"=パスフレーズ
dlgScDevOpsSslClientCertificate.hdl%1=$1 用クライアント証明書を選択する
dlgScDevOpsSslClientCertificate.inf=JIRAに認証するためのクライアント証明書ファイルを選択します。
dlgScDevOpsSslClientCertificate.tle=JIRAクライアント証明書
dlgScDevOpsSslClientCertificate.wrn"$1"==$1
dlgScDevOpsSslFingerprintNew.btn"Accept"=承認
dlgScDevOpsSslFingerprintNew.btn"Reject"=却下
dlgScDevOpsSslFingerprintNew.edt"MD5 fingerprint"=MD5 フィンガープリント
dlgScDevOpsSslFingerprintNew.edt"SHA fingerprint"=SHA フィンガープリント
dlgScDevOpsSslFingerprintNew.edt"Server"=サーバ
dlgScDevOpsSslFingerprintNew.lbl"Is the following server fingerprint correct?"=\
 以下のサーバのフィンガープリントは正しいですか？
dlgScDevOpsSslFingerprintNew.lbl"When in doubt, contact your server administrator."=\
 不明な点がある場合は、サーバー管理者に問い合わせてください。
dlgScDevOpsSslFingerprintNew.tle=SSL認証
dlgScDialogAssertionHandler.btn"Send Logs"=ログの送信
dlgScDialogAssertionHandler.edt"Details on frequency of the problem \(or steps to reproduce\)"=\
 問題の発生頻度についての詳細 \(または再現手順\)
dlgScDialogAssertionHandler.edt"Email"=電子メール
dlgScDialogAssertionHandler.edt"Optional comments or steps to reproduce \(in case you still recall\)"=\
 オプションのコメントまたは再現手順\(まだ覚えている場合のみ\)
dlgScDialogAssertionHandler.lbl"SmartGit has crashed due to insufficient system memory"=\
 システムメモリ不足のため、SmartGitがクラッシュしました。
dlgScDialogAssertionHandler.tle=ネイティブクラッシュログ
dlgScDialogAssertionHandlerLinkageError.btn"Copy"=コピー
dlgScDialogAssertionHandlerLinkageError.btn"Force Exit"=強制終了
dlgScDialogAssertionHandlerLinkageError.lbl"SmartGit has detected inconsistencies within its installation files \(JAR files\), what has most likely been caused by a faulty installation.\n\nPlease uninstall SmartGit completely, make sure there are no more installation files left \(especially JAR files\), then reinstall.\n\nIf the problem persists, send following log file as an attachment to smartgit@syntevo.com."=\
 SmartGit のインストール ファイル (JAR ファイル) に不整合があることが判明しました。\n\nSmartGit を完全にアンインストールし、インストール ファイル (特に JAR ファイル) が残っていないことを確認してから、再インストールしてください。\n\n問題が解決しない場合は、次のログ ファイルを smartgit@syntevo.com に添付して送信してください。
dlgScDialogAssertionHandlerLinkageError.tle=内部エラー
dlgScDialogAssertionHandlerOutOfMemory.btn"Force Exit"=強制終了
#                                                    !=Force Exit
dlgScDialogAssertionHandlerOutOfMemory.fur%1=SmartGit を再起動することを強くお勧めします。\n\n最大メモリ制限を増やすには、$1 を編集し、-Xmx オプションの値を増やします。例えば、-Xmx1024m を設定し（まだ存在していない場合は追加し）、SmartGit を再起動してください。
#                                          !=It is strongly recommended to restart SmartGit.\n\nTo increase the maximum memory limit edit $1, increase the value of the -Xmx option, for example to -Xmx1024m \(or add it if not yet existing\) and restart SmartGit.
dlgScDialogAssertionHandlerOutOfMemory.hdl=SmartGit はメモリ不足に陥りました!
#                                        !=SmartGit ran out of memory!
dlgScDialogAssertionHandlerOutOfMemory.tle=メモリ不足
#                                        !=Out Of Memory
dlgScEvaluationReminderContinue.btn"Continue"=続ける
dlgScEvaluationReminderContinue.btn"Register"=登録
dlgScEvaluationReminderContinue.fur%2=商用環境で SmartGit を使用するには、\[$1 ライセンスを購入\]する必要があります。\n\n \[$2 特定の用途\] については、無料のライセンスを付与します。
dlgScEvaluationReminderContinue.hdl%1=SmartGit の評価期間は $1 日後に終了します。
dlgScEvaluationReminderContinue.tle=評価
dlgScExternalFileStarterCommandInvocationFailed.hdl%2=プログラム「"$1": $2」を実行できません
dlgScExternalFileStarterCommandInvocationFailed.tle%1=\[$1\] - コンフリクトソルバー
dlgScFileComparatorAdd.hdl=外部Diffツールの追加
dlgScFileComparatorAdd.mni"Base Encoding"=ベースエンコーディング
dlgScFileComparatorAdd.mni"Base File"=ベースファイル
dlgScFileComparatorAdd.mni"Base Title"=ベースタイトル
dlgScFileComparatorAdd.tle=追加
dlgScFileComparatorEdit.hdl=外部Diffツールの編集
dlgScFileComparatorEdit.mni"Base Encoding"=ベースエンコーディング
dlgScFileComparatorEdit.mni"Base File"=ベースファイル
dlgScFileComparatorEdit.mni"Base Title"=ベースタイトル
dlgScFileComparatorEdit.tle=編集
dlgScFileComparator(Add|Edit).edt"Arguments"=引数
dlgScFileComparator(Add|Edit).edt"Command"=コマンド
dlgScFileComparator(Add|Edit).edt"File Pattern"=ファイルパターン
dlgScFileComparator(Add|Edit).inf=ファイルパターン（例：*.png）を定義し、ファイルパターンに一致するファイルを比較するために使用する比較コマンドを選択します。
dlgScFileComparator(Add|Edit).lbl"Valid wildcards are ?\u00a0\(one arbitrary character\) and \*\u00a0\(any number of arbitrary characters\). Separate multiple patterns by comma. Example:\u00a0\*.txt,\u00a0\*.html"=\
 有効なワイルドカードは下記のとおりです。複数のパターンはコンマで区切ります。\r例：*.txt,*.html \r ? (任意の1文字) \r * (任意の数の任意の文字)
dlgScFileComparator(Add|Edit).mni"File"=ファイル
dlgScFileComparator(Add|Edit).mni"Left Encoding"=左のエンコーディング
dlgScFileComparator(Add|Edit).mni"Left File"=左のファイル
dlgScFileComparator(Add|Edit).mni"Left Local File"=左のローカルファイル
dlgScFileComparator(Add|Edit).mni"Left Title"=左のタイトル
dlgScFileComparator(Add|Edit).mni"Right Encoding"=右のエンコーディング
dlgScFileComparator(Add|Edit).mni"Right File"=右のファイル
dlgScFileComparator(Add|Edit).mni"Right Local File"=右のローカルファイル
dlgScFileComparator(Add|Edit).mni"Right Title"=右のタイトル
dlgScFileComparator(Add|Edit).rbt"Built-in file compare"=内蔵の比較ツール
dlgScFileComparator(Add|Edit).rbt"External diff tool:"=外部Diffツール:
dlgScFileComparator(Add|Edit).rbt"External viewer \(invoked for both compared files\):"=\
 外部ビューア\(比較対象ファイルの両方に対して呼び出されます。\)
dlgScFileCompareFileChanged.btn"Discard"=破棄
dlgScFileCompareFileChanged.btn"Save"=保存
dlgScFileCompareFileChanged.fur=保存しない場合、変更内容が失われます。
dlgScFileCompareFileChanged.hdl=変更内容を保存しますか？
dlgScFileCompareFileChanged.tle=ファイルが変更されています
dlgScFileCompareSaveAll.btn"Discard Changes"=変更を破棄
dlgScFileCompareSaveAll.btn"Save"=保存
dlgScFileCompareSaveAll.chk"Left file"=左のファイル
dlgScFileCompareSaveAll.chk"Right file"=右のファイル
dlgScFileCompareSaveAll.hdl=ファイルの変更を保存
dlgScFileCompareSaveAll.inf=保存するファイルの内容を決定します。
dlgScFileCompareSaveAll.tle=変更を保存する
dlgScFilePatternsEdit.edt"File Pattern"=ファイルパターン
dlgScFilePatternsEdit.hdl%1=言語: $1
dlgScFilePatternsEdit.inf=ファイルパターンは、ファイル言語を決定するために使用され、シンタックスカラーリングに使用されます。
dlgScFilePatternsEdit.lbl"Valid wildcards are ?\u00a0\(one arbitrary character\) and \*\u00a0\(any number of arbitrary characters\). Separate multiple patterns by comma. Example:\u00a0\*.txt,\u00a0\*.html"=\
 有効なワイルドカードは下記のとおりです。複数のパターンはコンマで区切ります。\r例：*.txt,*.html \r ? (任意の1文字) \r * (任意の数の任意の文字)
dlgScFilePatternsEdit.tle=ファイルパターン
dlgScFindAction.edt"Action name"=アクション名
dlgScFindAction.tle=コマンドを検索
dlgScHostKeyVerifier.btn"Accept"=承認
dlgScHostKeyVerifier.btn"Reject"=却下
dlgScHostKeyVerifier.edt"Fingerprint"=フィンガープリント
dlgScHostKeyVerifier.edt"Server"=サーバ
dlgScHostKeyVerifier.fur=不明な場合は、管理者に問い合わせてください。
dlgScHostKeyVerifier.hdl=SSH サーバーのフィンガープリントを確認してください。
dlgScHostKeyVerifier.tle=SSH サーバーの検証
dlgScJiraCommitMessageSelect.btn"Refresh"=更新
dlgScJiraCommitMessageSelect.btn"Reset to default"=デフォルトにリセット
dlgScJiraCommitMessageSelect.btn"Select"=選択
dlgScJiraCommitMessageSelect.chk"Query Configuration"=クエリーの構成
dlgScJiraCommitMessageSelect.col"Fix Version"=修正バージョン
dlgScJiraCommitMessageSelect.col"Key"=キー
dlgScJiraCommitMessageSelect.col"Status"=ステータス
dlgScJiraCommitMessageSelect.col"Summary"=概要
dlgScJiraCommitMessageSelect.hdl=コミットメッセージをJIRAの課題から選択する
dlgScJiraCommitMessageSelect.inf=選択された課題の概要がコミットメッセージとして使用されます。
dlgScJiraCommitMessageSelect.lbl"Enter the JQL-Queries which will be loaded in the specified order: every query on a new line, \$\{projects\} will be substituted by the JIRA project key\(s\) which is derived or explicitly specified in your .gitbugtraq file.\n\nYou can compose a JQL query directly in JIRA, using Issues\|Search and go to Advanced view there."=\
 指定した順序でロードされるJQLクエリーを、クエリごとに改行して入力します。\n\$\{projects\} は、.gitbugtraq ファイルの内容に従って導出または明示的に指定されたJIRAプロジェクトキーによって置き換えられます。\n\nJIRA で直接 JQL クエリを作成するには、課題\|検索 で "JQLに切り替え"を開きます。
dlgScJiraCommitMessageSelect.lbl"Load All Issues"=すべての課題を読み込む
dlgScJiraCommitMessageSelect.lbl"Query Configuration"=クエリーの構成
dlgScJiraCommitMessageSelect.tle=課題の選択
dlgScJiraResolveIssue.btn"Don't Resolve"=解決しない
dlgScJiraResolveIssue.btn"Ignore"=無視
dlgScJiraResolveIssue.btn"Resolve Issue"=課題を解決
dlgScJiraResolveIssue.btn"Resolve"=解決
dlgScJiraResolveIssue.edt"Resolution"=解決状況
dlgScJiraResolveIssue.edt"Summary"=概要
dlgScJiraResolveIssue.hdl%1=課題 $1 を解決
dlgScJiraResolveIssue.inf=この問題を解決するかどうか、どのバージョンで解決済みとしてマークするかを選択します。
dlgScJiraResolveIssue.tle=JIRAの課題を解決する
dlgScMasterPasswordChange.edt"Current Master Password"=現在のマスターパスワード
dlgScMasterPasswordChange.edt"New Master Password"=新しいマスターパスワード
dlgScMasterPasswordChange.edt"Retype New Master Password"=新しいマスターパスワードの再入力
dlgScMasterPasswordChange.hdl=マスターパスワードの変更・再設定
dlgScMasterPasswordChange.inf=マスターパスワードを変更する場合は、現在のパスワードを入力してください。マスターパスワードを使用しない場合は、新しいパスワードを空白にします。
dlgScMasterPasswordChange.lbl"When setting a new master password, all stored passwords and passphrases will be lost and need to be re-entered when required!"=\
 新しいマスターパスワードを設定すると、保存されているすべてのパスワードとパスフレーズが失われ、必要に応じて再入力する必要があります。
dlgScMasterPasswordChange.rbt"Change master password"=マスターパスワードの変更
dlgScMasterPasswordChange.rbt"Set new master password"=新しいマスターパスワードの設定
dlgScMasterPasswordChange.tle=マスターパスワードの変更
dlgScMasterPasswordCreate.edt"Master Password"=マスターパスワード
dlgScMasterPasswordCreate.edt"Retype Again"=もう一度入力
dlgScMasterPasswordCreate.hdl=暗号化されたパスワードストアのマスターパスワードを設定する
dlgScMasterPasswordCreate.inf=マスターパスワードは、サーバーとの認証に使用されるパスワードやパスフレーズを保護するために使用されます。
dlgScMasterPasswordCreate.lbl"Not using a master password makes your passwords and passphrases readable for everyone who has access to the password file located at $1. Use this option only if you are sure that this file is safe."=\
 マスターパスワードを使用しないと、$1にあるパスワードファイルにアクセスできるすべての人が、パスワードやパスフレーズを読むことができます。
dlgScMasterPasswordCreate.lbl"This master password is case-sensitive and should contain lowercase and uppercase characters, digits and other characters. Longer passwords are in general more secure than shorter ones."=\
 このマスターパスワードは、大文字と小文字を区別し、小文字、大文字、数字、その他の文字を含む必要があります。一般的に、長いパスワードは短いパスワードよりも安全です。
dlgScMasterPasswordCreate.rbt"Don't use a master password"=マスターパスワードを使用しない
dlgScMasterPasswordCreate.rbt"Use the following master password"=以下のマスターパスワードを使用します。
dlgScMasterPasswordCreate.tle=マスターパスワード
dlgScMasterPasswordEnter.edt"Master Password"=マスターパスワード
dlgScMasterPasswordEnter.hdl=マスターパスワードの入力
dlgScMasterPasswordEnter.inf=保存されたパスワードまたはパスフレーズがパスワードストアから要求されました。
dlgScMasterPasswordEnter.tle=パスワード
dlgScNotificationUpdateCheckHandlerUpdateFailure.fur=プロセスを開始できませんでした。
dlgScNotificationUpdateCheckHandlerUpdateFailure.hdl=アップデータの直接起動に失敗しました。
dlgScNotificationUpdateCheckHandlerUpdateFailure.tle=SmartGit インストールの更新
dlgScPasswordMasterChangeSuccessfulChange.fur=忘れないようにしてください。忘れた場合、保存したパスワードにアクセスできなくなります。
dlgScPasswordMasterChangeSuccessfulChange.hdl=マスターパスワードが変更されました。
dlgScPasswordMasterChangeSuccessfulChange.tle=マスターパスワードを変更
dlgScPropertiesReset.btn"Reset"=リセット
dlgScPropertiesReset.fur=新しい値は、SmartGitを再起動すると有効になります。
dlgScPropertiesReset.hdl%1=$1 システムのプロパティをデフォルトにリセットしますか？
dlgScPropertiesReset.tle=プロパティのリセット
dlgScPropertyEdit.edt"Value"=値
dlgScPropertyEdit.hdl=ローレベルのプロパティ値を編集する
dlgScPropertyEdit.inf%1=プロパティ '$1' の値を設定します。
dlgScPropertyEdit.rbt"false"==false
dlgScPropertyEdit.rbt"true"==true
dlgScPropertyEdit.tle=プロパティの編集
dlgScRegisterFormLicenseConfirmDetails.edt"Add-on"=アドオン
dlgScRegisterFormLicenseConfirmDetails.edt"Address"=アドレス
dlgScRegisterFormLicenseConfirmDetails.edt"Email"=電子メール
dlgScRegisterFormLicenseConfirmDetails.edt"Free Updates Until"=無料アップデート期間
dlgScRegisterFormLicenseConfirmDetails.edt"Name"=名前
dlgScRegisterFormLicenseConfirmDetails.edt"Support Until"=サポート期限
dlgScRegisterFormLicenseConfirmDetails.edt"User Count"=ユーザ数
dlgScRegisterFormLicenseConfirmDetails.tle=SmartGit ライセンス
dlgScRegisterFreeUpdatesExpiredLicense.btn"Purchase Update"=アップデートを購入
dlgScRegisterFreeUpdatesExpiredLicense.fur=古いバージョンのSmartGitを使用することもできますし、アップデートライセンスを購入することもできます。
dlgScRegisterFreeUpdatesExpiredLicense.hdl=本ライセンスの無償アップデート期間は、このバージョンには適用されません。
dlgScRegisterFreeUpdatesExpiredLicense.tle=SmartGit ライセンス
dlgScRegisterRequestRejected.fur=ライセンスサーバーが要求を拒否しました。電子メールで受け取った最新のライセンスファイルを手動で登録するか、後ほどもう一度お試しください。
dlgScRegisterRequestRejected.hdl=ライセンスファイルの更新に失敗しました。
dlgScRegisterRequestRejected.tle=SmartGit ライセンス
dlgScSetupLicense.btn"Configure Proxy"=プロキシ設定
dlgScSetupLicense.btn"Purchase Update"=アップデートを購入
dlgScSetupLicense.btn"Register"=登録
dlgScSetupLicense.edt"License File"=ライセンスファイル
dlgScSetupLicense.edt"License Server URL"=
#                                       !=License Server URL
dlgScSetupLicense.hdl=ライセンスファイルを登録
dlgScSetupLicense.inf=購入後にメールで送られてきたSmartGitのライセンスファイルを指定してください。
dlgScSetupLicense.tle=SmartGit ライセンス
dlgScSpellCheckDictionaryAdd.err"Please enter a name."=
#                                                    !=Please enter a name.
dlgScSpellCheckDictionaryAdd.err"Please select a dictionary file."=
#                                                                !=Please select a dictionary file.
dlgScSpellCheckDictionaryAdd.hdl=スペルチェッカー辞書の追加
dlgScSpellCheckDictionaryAdd.tle=追加
dlgScSpellCheckDictionaryEdit.hdl=スペルチェッカー辞書の編集
dlgScSpellCheckDictionaryEdit.tle=編集
dlgScSpellCheckDictionary(Add|Edit).edt"Dictionary File"=辞書ファイル
dlgScSpellCheckDictionary(Add|Edit).edt"Name"=名前
dlgScSpellCheckDictionary(Add|Edit).inf=使用するMySpell辞書ファイルを指定します（例：Mozilla FirefoxまたはThunderbirdの「辞書」ディレクトリにある*.dic）\r名前は、異なる辞書を切り替える際に使用されます。
dlgScSslFingerprint.btn"Accept"=承認
dlgScSslFingerprint.btn"Reject"=却下
dlgScSslFingerprint.edt"SHA fingerprint"=SHA フィンガープリント
dlgScSslFingerprint.edt"Server"=サーバ
dlgScSslFingerprint.lbl"The server fingerprint has changed! Is the change correct?"=\
 サーバーのフィンガープリントが変更されました!この変更は正しいですか？
dlgScSslFingerprint.lbl"This might indicate a security problem! When in doubt, contact your server administrator."=\
 これは、セキュリティ上の問題を示している可能性があります。疑わしい場合は、サーバー管理者に連絡してください。
dlgScSslFingerprint.tle=サーバーのフィンガープリント
dlgScTextFinderFindFromEnd.btn"Find from End"=末尾から検索
dlgScTextFinderFindFromEnd.fur=ドキュメントの先頭まで見つかりませんでした。
dlgScTextFinderFindFromEnd.hdl=ドキュメントの最後から続けますか？
dlgScTextFinderFindFromEnd.tle=テキストの検索
dlgScTextFinderFindFromStart.btn"Find from Beginning"=初めから検索
dlgScTextFinderFindFromStart.fur=ドキュメントの最後まで見つかりませんでした。
dlgScTextFinderFindFromStart.hdl=ドキュメントの先頭から続けますか？
dlgScTextFinderFindFromStart.tle=テキストの検索
dlgScTextFinderNothingFound.hdl=見つかりませんでした。
dlgScTextFinderNothingFound.tle=テキストの検索
dlgScTextMultiComponentGoToLine.edt"Line Number"=行番号
dlgScTextMultiComponentGoToLine.tle=指定の行へ移動
dlgScTextMultiComponentSyntaxHighlightingSelection.tle=シンタックスハイライトの言語選択
dlgScTextReplace.btn"< Find"=< 検索
dlgScTextReplace.btn"Find >"=検索 >
dlgScTextReplace.btn"Replace All"=全て置換
dlgScTextReplace.btn"Replace"=置換
dlgScTextReplace.chk"Case-sensitive"=大文字小文字を区別する
dlgScTextReplace.chk"Regular Expression search"=正規表現検索
dlgScTextReplace.chk"Replace With:"=置換文字列:
dlgScTextReplace.edt"Text to Find"=検索文字列
dlgScTextReplace.tle=検索と置換
dlgScTextSettings.chk"Coalesce nearby change blocks"=近くの変更ブロックを結合する
dlgScTextSettings.chk"Split leading/trailing added or removed lines into separate blocks"=\
 追加・削除された行の先頭・末尾を別のブロックに分割する
dlgScTextSettings.chk"Trim equal start/end of Inner-Line changes"=\
 行内変更の開始\/終了を均等にトリム
dlgScTextSettings.edt"Inner-Line Comparison"=行内比較
dlgScTextSettings.edt"Show Whitespaces"=空白文字を表示
dlgScTextSettings.edt"Tab Size"=タブサイズ(スペース文字数)
dlgScTextSettings.rbt"All"=全て
dlgScTextSettings.rbt"Alphanumeric words"=英数字の単語
dlgScTextSettings.rbt"C identifiers"=C 識別子
dlgScTextSettings.rbt"Character-based"=文字ベース
dlgScTextSettings.rbt"Java identifiers"=Java 識別子
dlgScTextSettings.rbt"None"=なし
dlgScTextSettings.rbt"Off"==Off
dlgScTextSettings.rbt"Trailing and changed"=行末と変更箇所
#                                         !=<REMOVED>
dlgScTextSettings.rbt"Trailing, in selection and changed blocks"=
#                                                              !=Trailing, in selection and changed blocks
dlgScTextSettings.tab"Compare"=比較
dlgScTextSettings.tab"General"=一般
dlgScTextSettings.tle=設定
dlgScUpdateInstallationUpdateManuallyFailure.fur=プロセスを開始できませんでした。
dlgScUpdateInstallationUpdateManuallyFailure.hdl=アップデータの直接起動に失敗しました。
dlgScUpdateInstallationUpdateManuallyFailure.tle=SmartGit インストールの更新
dlgScUpdateInstallationUpdateManuallyInfo.fur%1='$1' を手動で削除して、アップグレードを再試行してください。
dlgScUpdateInstallationUpdateManuallyInfo.hdl=アップデータのディレクトリの消去に失敗しました。
dlgScUpdateInstallationUpdateManuallyInfo.tle=SmartGit インストールの更新
dlgScUpdateInstallationUpgrade.btn"Upgrade Now"=今すぐアップグレード
dlgScUpdateInstallationUpgrade.fur%1=インストールが必要な新しいバージョン $1 がダウンロードされました。
dlgScUpdateInstallationUpgrade.hdl=今すぐSmartGitをアップグレードしますか？
dlgScUpdateInstallationUpgrade.tle=SmartGitのアップグレード
dlgSelectDiff.col"Command"=コマンド
dlgSelectDiff.hdl=差分比較ツールを選択する
dlgSelectDiff.inf=どの差分比較ツールを使用するかを選択します。
dlgSelectDiff.lbl"Built-in file compare"=内蔵の比較ツール
#                                      !=Built-in file compare
dlgSelectDiff.lbl"Diff tool:"=比較ツール:
#                           !=Diff tool:
dlgSelectDiff.tle=ファイルの比較
dlgSgAbortBisectingConfirm.btn"Abort Bisect"=問題箇所の特定('bisect')を中止
dlgSgAbortBisectingConfirm.fur=作業ツリーは「問題箇所の特定中」の状態になっています。\n\n中止すると、問題箇所の特定\('bisect'\) を開始する前のブランチまたはコミットがチェックアウトされます。
dlgSgAbortBisectingConfirm.hdl=作業ツリーをリセットしますか？
dlgSgAbortBisectingConfirm.tle=中止
dlgSgAbortCherryPickingConfirm.btn"Abort Cherry-Pick"=チェリーピックを中止する
dlgSgAbortCherryPickingConfirm.fur=作業ツリーは「チェリーピック中」の状態になっています。\n\n 作業を中止してこの状態から抜け出し、新たにチェリーピックをやり直すこともできます。\n\n中止することで、ローカルでの変更も消去されます。
dlgSgAbortCherryPickingConfirm.hdl=作業ツリーをリセットしますか？
dlgSgAbortCherryPickingConfirm.tle=中止
dlgSgAbortMergingConfirm.btn"Abort Merge"=マージを中止
dlgSgAbortMergingConfirm.fur=作業ツリーは「マージ中」の状態です。中止してこの状態から抜け出し、後でマージをやり直すことができます。\n\n中止すると、マージ前の状態を再構築しようとします! \( 'git merge --abort' の実行\)
dlgSgAbortMergingConfirm.hdl=現在のマージを中止しますか？
dlgSgAbortMergingConfirm.tle=中止
#                          !=Abort
dlgSgAbortRebasingConfirm.btn"Abort Rebase"=リベースを中止
dlgSgAbortRebasingConfirm.fur=作業ツリーは「リベース中」の状態です。リベースを中止できます。現在のパッチをスキップしたい場合は、代わりに\[ブランチ\]→\[リベース\]→\[リベース HEAD to\] を使用してください。\n\n中止すると、ローカルの変更を消去することができます。\('git reset --hard' の実行\）
#                           !=Your working tree is in 'rebasing' state. You may abort rebasing; if you just want to skip the current patch, use Branch \| Rebase \| Rebase instead.\n\nAborting will clean any local modification \(by invoking 'git rebase --abort'\)!
dlgSgAbortRebasingConfirm.hdl=リベースを中止しますか？
dlgSgAbortRebasingConfirm.tle=破棄
#                           !=Abort
dlgSgAbortRevertingConfirm.btn"Abort Revert"=リバートを中止
dlgSgAbortRevertingConfirm.fur=作業ツリーが 「リバート中」 の状態です。この状態から抜け出すためにこの処理を中止し、その後、新たにリバートをやり直すことができます。\n\n中止すると、すべてのローカル修正が消去されます! \('git reset--hard' の実行\)
dlgSgAbortRevertingConfirm.hdl=作業ツリーをリセットしますか？
dlgSgAbortRevertingConfirm.tle=破棄
dlgSgAbout.btn"Register"=登録
dlgSgAbout.edt"Add-on"=アドオン
dlgSgAbout.edt"Address"=アドレス
dlgSgAbout.edt"Build Date"=ビルド日
dlgSgAbout.edt"Email"=電子メール
dlgSgAbout.edt"Free Updates Until"=無料アップデート期間
dlgSgAbout.edt"Java Version"=Java バージョン
dlgSgAbout.edt"Maximum Heap"=最大ヒープ
dlgSgAbout.edt"Name"=名前
dlgSgAbout.edt"Settings Path"=設定パス
dlgSgAbout.edt"Support Until"=サポート期限
dlgSgAbout.edt"User Count"=ユーザ数
dlgSgAbout.edt"Version"=バージョン
dlgSgAbout.tab"Credits"=クレジット
dlgSgAbout.tab"Information"=情報
dlgSgAbout.tab"Licensee"=ライセンス
dlgSgAbout.tle=SmartGitについて
dlgSgApplicationAlreadyRunning.fur%1=別々のインスタンスを実行する代わりに、SmartGit で複数のプロジェクト ウィンドウを開くことができます。\n\n SmartGit のインスタンスがもう実行されていないことが確実な場合は、ロック ファイルを削除する必要があります。\n $1
#                                  !=Instead of running separate instances you can open multiple project windows in SmartGit.\n\nIf you are sure that no SmartGit instance is running any more you should delete the lock file\n$1
dlgSgApplicationAlreadyRunning.hdl=SmartGit が既に実行されているようです。
#                                !=It seems that SmartGit is already running.
dlgSgApplicationAlreadyRunning.tle==SmartGit
#                                !=SmartGit
dlgSgApplicationUpgradeError.fur=プロセスを開始できませんでした。
dlgSgApplicationUpgradeError.hdl=アップデータの直接起動に失敗しました。
dlgSgApplicationUpgradeError.tle=アップグレード
dlgSgAuthenticationRemoveAllCredentials.btn"Remove All"=全て削除
dlgSgAuthenticationRemoveAllCredentials.fur=すべての認証情報を再入力する必要があります。
dlgSgAuthenticationRemoveAllCredentials.hdl=既知の認証情報をすべて削除しますか？
dlgSgAuthenticationRemoveAllCredentials.tle=全て削除
dlgSgAuthenticationShowPassword.edt"Password"=パスワード
dlgSgAuthenticationShowPassword.tle%1=$1 のパスワード
dlgSgAzureGenerateToken.edt"Code"=コード
#                               !=Code
dlgSgAzureGenerateToken.edt"Link"=リンク
#                               !=Link
dlgSgAzureGenerateToken.hdl=生成されたコードを入力する
#                         !=Enter the generated code
dlgSgAzureGenerateToken.inf=Azure DevOpsで認証し、生成されたトークンを入力します。
#                         !=Authenticate at Azure DevOps and enter the generated token.
dlgSgAzureGenerateToken.lbl"Your browser should have opened automatically, let you authenticate with your preferred account at Azure DevOps and grant access to SmartGit. If this didn't happen, manually open following link:"=ブラウザが自動的に開いて、Azure DevOps でお好みのアカウントで認証され、SmartGit にアクセスが許可されるはずです。 そうならなかった場合は、以下のリンクを手動で開いてください:
#                                                                                                                                                                                                                             !=Your browser should have opened automatically, let you authenticate with your preferred account at Azure DevOps and grant access to SmartGit. If this didn't happen, manually open following link:
dlgSgAzureGenerateToken.tle=アクセストークンを要求する
#                         !=Request Access Token
dlgSgAzureRefreshFailed.hdl=更新に失敗しました。
#                         !=Refresh failed.
dlgSgAzureRefreshFailed.tle==Azure DevOps
#                         !=Azure DevOps
dlgSgBisectResult.btn"Continue Bisect"=問題箇所の特定を続行
dlgSgBisectResult.btn"Leave Bisect"=問題箇所の特定をやめる
dlgSgBisectResult.fur%1==$1
dlgSgBisectResult.hdl=最初のバッドコミットを特定しました。
dlgSgBisectResult.tle=問題箇所の特定を終了
dlgSgBisectStartConfirm.btn"Start Bisect with Bad HEAD"=ヘッドを 'bad' とマークして問題箇所の特定を開始
dlgSgBisectStartConfirm.btn"Start Bisect"=問題箇所の特定を開始
dlgSgBisectStartConfirm.fur=Gitが二分探索で問題箇所の特定を開始する前に、1つのコミットをgood、1つのコミットをbadとしてマークする必要があります。
dlgSgBisectStartConfirm.hdl=バッドコミットで問題箇所の特定を開始する必要がありますか?
dlgSgBisectStartConfirm.tle=問題箇所の特定\(bisect\)を開始
dlgSgBitbucketGenerateToken.edt"Code"=コード
dlgSgBitbucketGenerateToken.edt"Link"=リンク
dlgSgBitbucketGenerateToken.hdl=生成されたコードを入力する
dlgSgBitbucketGenerateToken.inf=Bitbucketで認証し、生成されたトークンを入力します。
dlgSgBitbucketGenerateToken.lbl"Your browser should have opened automatically, let you authenticate with your preferred account at Bitbucket and grant access to SmartGit. If this didn't happen, manually open following link:"=\
 ブラウザが自動的に開き、Bitbucketのアカウントで認証され、SmartGitへのアクセスが許可されたはずです。\nそうならなかった場合は、手動で以下のリンクを開いてください。
dlgSgBitbucketGenerateToken.tle=アクセストークンを要求する
dlgSgBitbucketRefreshFailed.hdl=更新に失敗しました。
#                             !=Refresh failed.
dlgSgBitbucketRefreshFailed.tle==Bitbucket
#                             !=Bitbucket
dlgSgBranchAddCheckout.btn"Add Branch && Checkout"=ブランチを追加しチェックアウト
dlgSgBranchAddCheckout.btn"Add Branch"=ブランチを追加
dlgSgBranchAddCheckout.edt"Branch"=ブランチ
dlgSgBranchAddCheckout.err"A remote branch with this name already exists. Use a different name."=\
 この名前のリモートブランチはすでに存在しています。別の名前を使用してください。
dlgSgBranchAddCheckout.err"Choose a different branch, the current branch can't be used."=\
 別のブランチを選択してください。現在のブランチは使用できません。
dlgSgBranchAddCheckout.err"Enter the name of the local branch."=\
 ローカルブランチの名前を入力してください。
dlgSgBranchAddCheckout.err"The name must not end with a slash or dot."=\
 名前の末尾にスラッシュまたはドットを使用することはできません。
dlgSgBranchAddCheckout.err"This branch already exists at this commit."=\
 このブランチはこのコミットで既に存在しています。
dlgSgBranchAddCheckout.hdl"Add branch at commit $1"=コミット  $1  でブランチ追加
dlgSgBranchAddCheckout.hdl"Add branch at current HEAD commit"=\
 現在のHEADコミットにブランチを追加
dlgSgBranchAddCheckout.hdl"Create new branch at current branch \(HEAD\)"=現在のブランチ \(HEAD\) に新しいブランチを作成します
#                                                                      !=Create new branch at current branch \(HEAD\)
dlgSgBranchAddCheckout.inf=作成するローカルブランチの名前を入力してください。
dlgSgBranchAddCheckout.tle=ブランチを追加
dlgSgBranchAddCheckoutOverwriteExisting.btn"Overwrite"=上書き
dlgSgBranchAddCheckoutOverwriteExisting.fur=「'キャンセル」をクリックすると、別のブランチ名を選択することができます。
dlgSgBranchAddCheckoutOverwriteExisting.hdl%1=ブランチ '$1' はすでに存在しています。上書きしますか？
dlgSgBranchAddCheckoutOverwriteExisting.tle=ブランチを追加
dlgSgBranchDeleteCurrentNotPossible.fur=デフォルトでは、SmartGit は現在のブランチを削除することを許可していません。この制限をスキップするには、ローレベルプロパティ 'branch.delete.allowToDeleteCurrentBranch' を設定します。
#                                     !=By default, SmartGit disallows to delete the current branch. To skip this restriction, switch to a different branch or set the low-level property 'branch.delete.allowToDeleteCurrentBranch'.
dlgSgBranchDeleteCurrentNotPossible.hdl=現在のブランチを削除することはできません。
dlgSgBranchDeleteCurrentNotPossible.tle=削除
dlgSgBranchDeleteLocalConfirmMultiple.btn"Delete"=削除
dlgSgBranchDeleteLocalConfirmMultiple.chk"Delete from remote repository"=リモートリポジトリから削除する
dlgSgBranchDeleteLocalConfirmMultiple.chk"Delete tracked branches"=追跡されたブランチを削除する
dlgSgBranchDeleteLocalConfirmMultiple.fur=削除されたブランチを復元するのは複雑な場合があります。\n\nローカルにあるリモートブランチリストからブランチを削除するだけで、次のフェッチでブランチが復活する可能性があります。
dlgSgBranchDeleteLocalConfirmMultiple.hdl%1=$1個のローカルブランチを削除しますか？
dlgSgBranchDeleteLocalConfirmMultiple.tle=削除
dlgSgBranchDeleteLocalConfirmSingle.btn"Delete"=削除
dlgSgBranchDeleteLocalConfirmSingle.chk"Delete from remote repository '$1'"=リモートリポジトリ'$1'から削除
dlgSgBranchDeleteLocalConfirmSingle.chk"Delete tracked branch '$1'"=追跡ブランチ'$1'を削除
dlgSgBranchDeleteLocalConfirmSingle.fur=プッシュされていない変更が失われたり、ブランチの復元が複雑になったりする可能性があります。
dlgSgBranchDeleteLocalConfirmSingle.hdl%1=ローカルブランチ'$1'を削除しますか？
dlgSgBranchDeleteLocalConfirmSingle.tle=削除
dlgSgBranchDeleteRemoteConfirmSingle.btn"Delete"=削除
dlgSgBranchDeleteRemoteConfirmSingle.chk"Delete from remote '$1'"=リモート '$1' から削除
dlgSgBranchDeleteRemoteConfirmSingle.chk"Delete from remote repository '$1'"=リモートリポジトリ'$1'から削除
dlgSgBranchDeleteRemoteConfirmSingle.fur=ローカルにあるリモートブランチリストからブランチを削除するだけで、次のフェッチでブランチが復活する可能性があります。
#                                      !=If you don't delete the branch from the remote repository, it may come back with the next fetch.
dlgSgBranchDeleteRemoteConfirmSingle.hdl"Do you want to delete the branch '$1'?"=\
 ブランチ'$1'を削除しますか？
dlgSgBranchDeleteRemoteConfirmSingle.hdl"Do you want to delete the remote branch '$1'?"=\
 リモートブランチ'$1'を削除しますか？
dlgSgBranchDeleteRemoteConfirmSingle.tle=削除
dlgSgBranchTrackingResetConfirm.btn"Stop Tracking"=追跡を停止
dlgSgBranchTrackingResetConfirm.fur=必要な設定は .git/config ファイルで行います。
dlgSgBranchTrackingResetConfirm.hdl%2=ブランチ'$1'は'$2'の追跡を停止しますか?
dlgSgBranchTrackingResetConfirm.tle=追跡を停止
dlgSgBranchTrackingSetConfirm.btn"Configure"=設定
dlgSgBranchTrackingSetConfirm.fur=必要な設定は .git/config ファイルで行います。
dlgSgBranchTrackingSetConfirm.hdl%2=$1'を'$2'に追従させるように設定しますか？
dlgSgBranchTrackingSetConfirm.tle=追跡ブランチの設定
dlgSgBugReportSettings.btn"Exit"=終了
dlgSgBugReportSettings.chk"Automatically send 'crash footprints' after an internal error has occurred"=\
 内部エラー発生後、自動的に「クラッシュフットプリント」を送信
dlgSgBugReportSettings.chk"Send 'crash footprints' after an internal error has occurred"=\
 内部エラー発生後の「クラッシュフットプリント」の送信
dlgSgBugReportSettings.err"Sending 'crash footprints' is required for preview builds, because their main purposes is to get as much as possible bugs reported and fixed before release."=\
 プレビュービルドには「クラッシュフットプリント」を送信する必要があります。\rこれは、プレビュービルドの主な目的が、リリース前にできるだけ多くのバグを報告して修正することであるためです。
dlgSgBugReportSettings.hdl=クラッシュレポート
dlgSgBugReportSettings.inf=「クラッシュ フットプリント」と使用状況統計を自動的に送信することで、SmartGit の品質向上にご協力ください。 " このオプションは、後で [環境設定] で変更できます。
#                        !=Please help to improve SmartGit's quality by automatically sending 'crash footprints'.
dlgSgBugReportSettings.lbl"A 'crash footprint' contains details about your machine \(e.g. version of operating system\), SmartGit's version/build number, the JVM state and where the internal error occurred.\n\nIt contains NO POTENTIALLY SENSITIVE INFORMATION like user names, email addresses, file contents, file paths or server names."=\
 クラッシュフットプリント」には、お客様のマシンの詳細（オペレーティングシステムのバージョンなど）、SmartGitのバージョン/ビルド番号、JVMの状態、内部エラーが発生した場所などが含まれていますが、ユーザー名、メールアドレス、ファイルの内容、ファイルパス、サーバー名などの機密情報は含まれていません。
dlgSgBugReportSettings.lbl"Sent data contains \*no potentially sensitive information\* like user names, email addresses, file contents, file paths or server names."=送信されるデータには、ユーザー名、メールアドレス、ファイルの内容、ファイルパス、サーバー名などの\*機密情報になり得る情報\*は一切含まれていません。
#                                                                                                                                                                  !=Sent data contains \*no potentially sensitive information\* like user names, email addresses, file contents, file paths or server names.
dlgSgBugReportSettings.tle==SmartGit
dlgSgCheckout.btn"Branches"=ブランチ
dlgSgCheckout.btn"Check Out"=チェックアウト
dlgSgCheckout.hdl=コミットをチェックアウトする
dlgSgCheckout.inf=チェックアウトするコミットを選択します。これにより、作業ツリーを任意のコミットに切り替える\(戻す\)ことができます。
dlgSgCheckout.tle=チェックアウト
dlgSgCheckoutFastForwardMerge.btn"Fast-Forward-Merge"=ファストフォワードマージ
dlgSgCheckoutFastForwardMerge.btn"Just Checkout"=チェックアウトのみ
dlgSgCheckoutFastForwardMerge.fur=ファストフォワードマージは、ブランチを追跡対象のリモート ブランチに自動的に移動します。
dlgSgCheckoutFastForwardMerge.hdl%1=$1'をチェックアウトした後、リモートの変更を ファストフォワードマージしますか？
dlgSgCheckoutFastForwardMerge.tle=チェックアウト
dlgSgCheckoutLocalBranchConfirm.btn"Checkout"=チェックアウト
dlgSgCheckoutLocalBranchConfirm.chk=次回から表示しない
dlgSgCheckoutLocalBranchConfirm.fur%1=この操作により '$1' が現在のブランチになります。
dlgSgCheckoutLocalBranchConfirm.hdl%1=ブランチ '$1' をチェックアウトしますか？
dlgSgCheckoutLocalBranchConfirm.tle=チェックアウト
dlgSgCheckoutTarget.btn"Checkout"=チェックアウト
dlgSgCheckoutTarget.chk"Track remote branch '$1'"=リモートブランチ '$1' を追跡
dlgSgCheckoutTarget.chk"Track remote branch"=リモート ブランチの追跡
dlgSgCheckoutTarget.hdl"Check out commit"=コミットをチェックアウト
dlgSgCheckoutTarget.hdl"Check out remote branch"=リモートブランチをチェックアウト
dlgSgCheckoutTarget.hdl"Checkout commit"=コミットをチェックアウト
dlgSgCheckoutTarget.hdl"Checkout remote branch"=リモートブランチのチェックアウト
dlgSgCheckoutTarget.inf=ローカルブランチではなくコミットをチェックアウトする場合は注意してください。コミットの上にあるコミットは簡単に失われてしまう可能性があります。
#                     !=Create and checkout a new local branch for the selected commit
dlgSgCheckoutTarget.rbt"Checkout and fast-forward local branch '$1'"=
#                                                                  !=Checkout and fast-forward local branch '$1'
dlgSgCheckoutTarget.rbt"Checkout and fast-forward local branch 'dev'"=\
 ローカルブランチ「dev」をチェックアウトしてファストフォワード
#!=<REMOVED>
dlgSgCheckoutTarget.rbt"Checkout local branch '$1'"=ローカルブランチ'$1'のチェックアウト
dlgSgCheckoutTarget.rbt"Create local branch:"=ローカルブランチを作成:
dlgSgCheckoutTarget.rbt"Don't create local branch \(just work read-only\)"=\
 ローカルブランチを作成しない \(読み取り専用で作業\)
dlgSgCheckoutTarget.tle=チェックアウト
dlgSgCheckoutTarget.wrn"Be careful when checking out a commit instead of a local branch: commits on top of a commit can get lost easily."=ローカルブランチではなく、コミットを直接チェックアウトする際は注意が必要です。そのコミット以降のコミットは簡単に失われる可能性があります。
#                                                                                                                                       !=Be careful when checking out a commit instead of a local branch: commits on top of a commit can get lost easily.
dlgSgCheckoutTarget.wrn"Local branch '$1' is behind checkout target '$2'."=\
 ローカルブランチ '$1' はチェックアウトターゲット '$2' の後ろにあります。
dlgSgCheckoutTarget.wrn"Local branch '$1' is diverged from checkout target '$2'."=\
 ローカルブランチ '$1' はチェックアウトターゲット '$2' から分岐しています。
dlgSgCheckoutTarget.wrn"Local branch is ahead of remote branch. The checkout will end up at a more recent commit."=\
 ローカルブランチはリモートブランチより進んでいます。チェックアウトはより新しいコミットで終了します。
dlgSgCheckoutTargetAlreadyExistsOverwrite.btn"Overwrite"=上書き
dlgSgCheckoutTargetAlreadyExistsOverwrite.fur=「'キャンセル」をクリックすると、別のブランチ名を選択することができます。
dlgSgCheckoutTargetAlreadyExistsOverwrite.hdl%1=ブランチ '$1' はすでに存在しています。上書きしますか？
dlgSgCheckoutTargetAlreadyExistsOverwrite.tle=チェックアウト
dlgSgCherryPickConfigurationFile.btn"Cherry-Pick"=チェリーピック
dlgSgCherryPickConfigurationFile.fur=これらのファイルの変更点のみが（コミットせずに）チェリーピックされます。
dlgSgCherryPickConfigurationFile.hdl"Do you want to cherry-pick changes of $1 files?"=\
 $1 ファイルの変更をチェリーピックしますか?
dlgSgCherryPickConfigurationFile.hdl"Do you want to cherry-pick changes of '$1'?"=\
 '$1' の変更をチェリーピックしますか?
dlgSgCherryPickConfigurationFile.tle=チェリーピック
dlgSgCherryPickConfirmation.btn"Cherry-Pick && Commit"=チェリーピック && コミット
dlgSgCherryPickConfirmation.btn"Cherry-Pick"=チェリーピック
dlgSgCherryPickConfirmation.chk=コミットメッセージにソースSHAを追加する
dlgSgCherryPickConfirmation.fur=これにより、選択されたコミットが作業ツリーにチェリーピックされます。
dlgSgCherryPickConfirmation.hdl=チェリーピックしますか？
dlgSgCherryPickConfirmation.tle=チェリーピック
dlgSgCherryPickFailedBecauseOfConflicts.chk=次回から表示しない
dlgSgCherryPickFailedBecauseOfConflicts.fur=先に進む前に、コンフリクトを解消する必要があるかもしれません。
dlgSgCherryPickFailedBecauseOfConflicts.hdl=チェリーピッキングはコンフリクトのため失敗しました。
dlgSgCherryPickFailedBecauseOfConflicts.tle=チェリーピック
dlgSgCherryPickUnpushedCommits.btn"Cherry-Pick"=チェリーピック
dlgSgCherryPickUnpushedCommits.fur=選択されたコミットのうち少なくとも一つはまだプッシュされていないため、チェリーピックはローカルにのみ適用され、SVN\(マージ情報\)には変換されません。
dlgSgCherryPickUnpushedCommits.hdl=プッシュされていないコミットをチェリーピックしますか？
dlgSgCherryPickUnpushedCommits.tle=チェリーピック
dlgSgClean.btn"Clean Working Tree"=作業ツリーのクリーンアップ
dlgSgClean.chk"Remove only ignored files"=無視されたファイルのみ削除
dlgSgClean.chk"Remove untracked directories"=追跡されていないディレクトリを削除する
dlgSgClean.edt"Delete"=削除
#                    !=Delete
dlgSgClean.hdl=追跡されていないファイルを削除する
#            !=Delete unversioned files
dlgSgClean.inf=どの未追跡ファイルを削除するかを選択します。
#            !=Select which unversioned files should be deleted.
dlgSgClean.rbt"Files and Directories"=
#                                   !=Files and Directories
dlgSgClean.rbt"Files"=ファイル
#                   !=Files
dlgSgClean.rbt"Ignored"=
#                     !=Ignored
dlgSgClean.rbt"Untracked and ignored"=
#                                   !=Untracked and ignored
dlgSgClean.rbt"Untracked"=
#                       !=Untracked
dlgSgClean.tle=作業ツリーのクリーンアップ
dlgSgCleanDeleteFiles.btn"Delete Files"=ファイルを削除する
#                                     !=Delete Files
dlgSgCleanDeleteFiles.fur=Git は以下のファイルとディレクトリが削除されたと報告しました。:
#                       !=Git reported following files and directories to be deleted:
dlgSgCleanDeleteFiles.hdl=これらのファイルを削除しますか？
#                       !=Do you want to delete these files?
dlgSgCleanDeleteFiles.tle=作業ツリーのクリーンアップ
#                       !=Clean Working Tree
dlgSgClone.chk"Create upstream remote"=上流リモートの作成
dlgSgClone.chk"Fetch all Heads and Tags"=すべてのヘッドとタグを取得する
dlgSgClone.chk"Fetch all commits"=すべてのコミットを取得する
dlgSgClone.chk"Include Submodules"=サブモジュールを含める
dlgSgClone.chk"Just initialize clone \(expert mode, not officially supported!\)"=\
 クローンを初期化するだけ \(エキスパートモード、正式にはサポートされていません！\)
dlgSgClone.chk"Map SVN trunk, tags and branches to Git"=\
 SVNのトランク、タグ、ブランチをGitにマップする
dlgSgClone.chk"Skip large files \(\"partial clone\"\)"=大きなファイルをスキップする \("partial clone"\)
dlgSgClone.edt"Check Out Branch"=ブランチをチェックアウト
dlgSgClone.edt"Fetch Only"=フェッチのみ
dlgSgClone.edt"Fetch only the latest"=最新のものだけをフェッチする
dlgSgClone.edt"Local Directory"=ローカルディレクトリ
dlgSgClone.edt"Omit files larger than"=これより大きなファイルは省略
dlgSgClone.edt"Path"=パス
dlgSgClone.edt"Repository URL"=リポジトリ URL
dlgSgClone.err"Please select an empty, local directory for the new repository."=\
 新しいリポジトリ用に空のローカル ディレクトリを選択してください。
dlgSgClone.err"Please specify the URL of the remote repository to be cloned."=\
 クローンするリモートリポジトリのURLを指定してください。
dlgSgClone.err"Please specify the root directory of a local repository."=\
 ローカルリポジトリのルートディレクトリを指定してください。
dlgSgClone.inf"Customize how and what to clone."=\
 クローンする方法と内容をカスタマイズできます。
dlgSgClone.inf"Specify the local directory for the new repository."=\
 新しいリポジトリのローカルディレクトリを指定します。
dlgSgClone.inf"Specify the repository to clone."=クローンを作成するリポジトリを指定します。
dlgSgClone.lbl"Note: Pull or Fetch will not bring other refs, you will need to use Fetch More."=\
 注: プル または フェッチ では他の参照は取得されません。「追加のフェッチ」 を使用する必要があります。
dlgSgClone.lbl"Please wait ..."=しばらくお待ちください...
#                             !=Please wait ...
dlgSgClone.lbl"Steps"=ステップ
#                   !=Steps
dlgSgClone.lbl"e.g. https://user@server:port/path/to/repository"=例: https://user@server:port/path/to/repository
dlgSgClone.mni"Add Hosting Provider"=ホスティングプロバイダーを追加
dlgSgClone.rbt"Clone all revisions \(recommended\)"=すべてのリビジョンをクローンする \(推奨\)
dlgSgClone.rbt"Clone from revision:"=このリビジョンからクローン:
dlgSgClone.rbt"Local Git repository"=ローカルGitリポジトリ
dlgSgClone.rbt"Local repository"=ローカルリポジトリ
dlgSgClone.rbt"Remote Git or SVN repository"=Git または SVN のリモートリポジトリ
dlgSgClone.rbt"Remote repository"=リモートリポジトリ
dlgSgClone.tle=クローン
dlgSgClone.ttpPartialWarning"<b>Warning!</b>"=<b>警告！</b>
#                                           !=<b>Warning!</b>
dlgSgClone.ttpPartialWarning"Once the clone has finished, check the Output view for possible warnings."=クローンが完了したら、「出力」ビューで警告が表示されていないか確認してください。
#                                                                                                     !=Once the clone has finished, check the Output view for possible warnings.
dlgSgClone.ttpPartialWarning"This functionality depends on the capabilities of your server."=この機能はサーバーの機能に依存します。
#                                                                                          !=This functionality depends on the capabilities of your server.
dlgSgCloneRepositoryType.btn"Git"==Git
dlgSgCloneRepositoryType.btn"SVN"==SVN
dlgSgCloneRepositoryType.fur=指定された URL プロトコルがあいまいで、異なるタイプのリポジトリを参照している可能性があります。
dlgSgCloneRepositoryType.hdl=クローンを作成するリポジトリの種類を選択します。
dlgSgCloneRepositoryType.tle=クローン
dlgSgCloneSvnDetachedHeadSuccess.fur=SmartGit は現在、バックグラウンドで他のすべてのリビジョンの取得を続けています。ログ関連の操作だけが、この中間状態の影響を受けます。\n\nSmartGit がバックグラウンドでのクローンを完了すると、通知領域でそれを知らせますので、そこでクローンを完了することができます。
dlgSgCloneSvnDetachedHeadSuccess.hdl=HEADリビジョンのクローンに成功しました。
dlgSgCloneSvnDetachedHeadSuccess.tle=クローン
dlgSgCommit.btn"Commit && Push"=コミットしてプッシュ
dlgSgCommit.btn"Commit"=コミット
dlgSgCommit.btn"Select from Log"=ログから選択
dlgSgCommit.btn"Select"=選択
dlgSgCommit.chk"Add 'Signed-off-by' signature"=コミットメッセージにSigned-off-by 署名を追加する
dlgSgCommit.chk"Amend last commit instead of creating new one"=\
 新規にコミットせず、前回のコミットを修正する
dlgSgCommit.chk"Amend last commit"=前回のコミットを修正
dlgSgCommit.chk"Bypass commit hook"=コミットフックをバイパスする
dlgSgCommit.chk"More Options"=追加のオプション
dlgSgCommit.col"Directory"=ディレクトリ
dlgSgCommit.col"Name"=名前
dlgSgCommit.edt"Commit Message"=コミットメッセージ
dlgSgCommit.edt"Create"=作成
dlgSgCommit.err"Enter a commit message describing \(the reason for\) the commit."=\
 コミットを説明する\(理由となる\)コミットメッセージを入力します。
dlgSgCommit.hdl=ローカルまたはステージングされた変更のコミット
dlgSgCommit.inf=コミットしたいファイルを選択し、コミットメッセージを記入します。
dlgSgCommit.mni"Deselect All"=選択を解除
dlgSgCommit.mni"JIRA"==JIRA
dlgSgCommit.mni"Log"=ログ
dlgSgCommit.mni"Select All"=全選択
dlgSgCommit.mni"Select from Log"=ログから選択
dlgSgCommit.mni"Show Changes"=比較する
dlgSgCommit.mni"Toggle"=トグル
dlgSgCommit.rbt"Local Changes"=ローカルの変更
dlgSgCommit.rbt"Merge commit \(multiple parents\)"=マージ コミット \(複数の親\)
dlgSgCommit.rbt"Simple commit \(one parent, \"squash\"\)"=シンプルなコミット \(一つの親 、"スカッシュ" \)
dlgSgCommit.rbt"Staged Changes"=ステージされた変更
dlgSgCommit.tle=コミット
dlgSgCommit.wrn"All staged changes have been selected for commit, as this is necessary in 'Reverting' state."=\
 ステージされたすべての変更がコミット対象として選択されています。これは 'Reverting' 状態において必要なことだからです。
dlgSgCommit.wrn"When modifying or splitting a commit, you first need to commit all local changes before being able to continue the rebase."=\
 コミットを修正または分割する場合、リベースを続行する前に、まず全てのローカルの変更をコミットする必要があります。
dlgSgCommitAmendAlreadyPushedCommit.btn"Amend"=修正する
dlgSgCommitAmendAlreadyPushedCommit.fur=プッシュしたコミットを修正した場合、後で強制的にプッシュする必要があります。\rこの場合、他のユーザーの変更を上書きしてしまう可能性があります。
dlgSgCommitAmendAlreadyPushedCommit.hdl=すでにプッシュされているコミットを修正しますか？
dlgSgCommitAmendAlreadyPushedCommit.tle=コミット
dlgSgCommitCantAmend.fur=すでにプッシュされたコミットを変更することはできません。何をしているのか分かっていて有効にしたい場合は、設定で「プッシュされたコミットの変更を許可する」オプションを選択してください。
dlgSgCommitCantAmend.hdl=コミットを修正できません。
dlgSgCommitCantAmend.tle=コミット
dlgSgCommitContinueRebaseOrCreateAdditionalCommit.btn"Continue Rebase"=リベースを続行する
dlgSgCommitContinueRebaseOrCreateAdditionalCommit.btn"Create Commit"=コミットを作成
dlgSgCommitContinueRebaseOrCreateAdditionalCommit.fur=リポジトリは「リベース中」の状態です。リベース コミットの一部として追加のコミットを作成する代わりに、通常はリベースを続行するだけです。
dlgSgCommitContinueRebaseOrCreateAdditionalCommit.hdl=リベースを続行しますか、それとも追加のコミットを作成しますか?
dlgSgCommitContinueRebaseOrCreateAdditionalCommit.tle=リベース
dlgSgCommitDirectlyTo.btn"Commit Anyway"=とにかくコミットする
dlgSgCommitDirectlyTo.fur=Git-Flow が設定されており、Git-Flow の master ブランチへのコミットは直接行わず、Git-Flow コマンドとマージの助けを借りて行う必要があります。\n\n不明な点がある場合は、管理者にお問い合わせください。
dlgSgCommitDirectlyTo.hdl='master' に直接コミットしますか？
dlgSgCommitDirectlyTo.tle=コミット
dlgSgCommitIndexAllWorkingTreeChanges.btn"Commit All Working Tree Changes"=作業ツリーの全ての変更をコミットする
dlgSgCommitIndexAllWorkingTreeChanges.btn"Commit All"=すべてコミット
#                                                   !=Commit All
dlgSgCommitIndexAllWorkingTreeChanges.chk=次回から表示しない
#                                       !=<REMOVED>
dlgSgCommitIndexAllWorkingTreeChanges.chk"Don't show again"=次回から表示しない
#                                                         !=Don't show again
dlgSgCommitIndexAllWorkingTreeChanges.chk"Include untracked files"=追跡されていないファイルを含める
#                                                                !=Include untracked files
dlgSgCommitIndexAllWorkingTreeChanges.fur=まだステージングされていないファイルがあります。\r個々の変更をステージングするには、［キャンセル］をクリックしてください。\rそれ以外の場合は、作業ツリーの全ての変更がステージングされ、コミットされます。
#                                       !=No file is staged yet. To commit all \(visible\) working tree changes, click Commit All. To stage individual changes, click Cancel.
dlgSgCommitIndexAllWorkingTreeChanges.hdl=すべての作業ツリーの変更をコミットしますか？
#                                       !=Do you want to commit all \(visible\) working tree changes?
dlgSgCommitIndexAllWorkingTreeChanges.tle=コミット
dlgSgCommitIndexNoFilesFound.fur=コミットするものは何もありません。
#                              !=There is nothing to commit.
dlgSgCommitIndexNoFilesFound.hdl=コミットするものは何もありません。
dlgSgCommitIndexNoFilesFound.tle=コミット
dlgSgCommitMessageContainsComments.btn"Commit As-Is"=そのままコミットする
#                                                  !=Commit As-Is
dlgSgCommitMessageContainsComments.btn"Strip Comments"=コメントを除去
#                                                    !=Strip Comments
dlgSgCommitMessageContainsComments.fur=コミット メッセージには # で始まる行が含まれており、Git はこれをコメントとして扱います \(したがって、メッセージから削除されます\)。\n\n高度なコメント処理については、Git の設定オプション'core.commentChar'を使用してください。\n\nコメント行を常に保持するか、削除するかを指定するには、環境設定で設定することができます。
#                                    !=The commit message contains lines starting with # which Git would treat as comment \(and thus strip from the message\).\n\nFor advanced comment-handling you may consider to use Git's config option 'core.commentChar'.\n\nIf you always want to keep or strip comment lines, you can configure this in the Preferences.
dlgSgCommitMessageContainsComments.hdl=コメント行はそのままコミットすべきですか？
#                                    !=Should comment lines be committed as-is?
dlgSgCommitMessageContainsComments.tle=コミット
#                                    !=Commit
dlgSgCommitNoFilesFoundNotAllowEmpty.fur=ステージングされたファイルやローカルで変更されたファイルは見つかりませんでした。
dlgSgCommitNoFilesFoundNotAllowEmpty.hdl=コミットするものは何もありません。
dlgSgCommitNoFilesFoundNotAllowEmpty.tle=コミット
dlgSgCommitSelectMessageFromLog.btn"Branches"=ブランチ
dlgSgCommitSelectMessageFromLog.btn"Select"=選択
dlgSgCommitSelectMessageFromLog.chk"Add 'fixup!' prefix for easier automatic squashing using Interactive Rebase"=\
 インタラクティブなリベースを使用した自動スカッシュを容易にするために、'fixup!' プレフィックスを追加します。
dlgSgCommitSelectMessageFromLog.hdl=コミットを選択する
dlgSgCommitSelectMessageFromLog.inf=メッセージを使用するコミットを選択します。
dlgSgCommitSelectMessageFromLog.mni"Author"=作者
dlgSgCommitSelectMessageFromLog.mni"Branches and Tags"=ブランチとタグ
dlgSgCommitSelectMessageFromLog.mni"Committer"=コミッタ
dlgSgCommitSelectMessageFromLog.mni"Copy ID"=IDをコピー
dlgSgCommitSelectMessageFromLog.mni"Copy Message"=メッセージをコピー
dlgSgCommitSelectMessageFromLog.mni"File Content \(very expensive\)"=ファイルの内容\(非常に高コストな処理\)
dlgSgCommitSelectMessageFromLog.mni"File \(expensive\)"=ファイル\(高コスト\)
dlgSgCommitSelectMessageFromLog.mni"Forget Pattern"=パターンを忘れる
dlgSgCommitSelectMessageFromLog.mni"ID"==ID
dlgSgCommitSelectMessageFromLog.mni"Message"=メッセージ
dlgSgCommitSelectMessageFromLog.mni"Refresh"=更新
dlgSgCommitSelectMessageFromLog.mni"Regular Expressions"=正規表現
dlgSgCommitSelectMessageFromLog.mni"Remember Pattern"=パターンを記憶
dlgSgCommitSelectMessageFromLog.tle=コミットメッセージを選択
dlgSgCommitSingleOrAllWorkingTreeChanges.btn"Commit All Changes"=すべての変更をコミット
dlgSgCommitSingleOrAllWorkingTreeChanges.btn"Commit File"=ファイルをコミット
dlgSgCommitSingleOrAllWorkingTreeChanges.fur=選択した1つのファイルをコミットするか、変更したすべてのファイルをコミットするかを選択できます。
#                                          !=You either can commit the single selected file or all \(visible\) changed files.
dlgSgCommitSingleOrAllWorkingTreeChanges.hdl=何をコミットしますか？
dlgSgCommitSingleOrAllWorkingTreeChanges.tle=コミット
dlgSgCommitToDetachedHead.btn"Commit Anyway"=とにかくコミットする
dlgSgCommitToDetachedHead.fur=リポジトリの HEAD は現在、ブランチを指しておらず、コミット(SHA)を直接参照しています。コミットする際に、新しく作成したコミットはSHAでしか到達できないため、簡単に見失ってしまう可能性があります。今すぐコミットするのではなく、まず現在のHEADにブランチを作成し、その後にコミットしてください。
dlgSgCommitToDetachedHead.hdl=切り離されたHEADにコミットしますか?
dlgSgCommitToDetachedHead.tle=コミット
dlgSgCompareTwoFiles.btn"Compare with Each Other"=ファイル同士の比較
dlgSgCompareTwoFiles.btn"Compare with Repository"=リポジトリとの比較
dlgSgCompareTwoFiles.fur=ファイルはリポジトリの内容と比較したり、ファイル同士で比較することができます。
dlgSgCompareTwoFiles.hdl=選択された2つのファイルを比較しますか？
dlgSgCompareTwoFiles.tle=比較
dlgSgConflictResolverExternalStarted.btn"Mark Resolved"=解決済みとしてマーク
dlgSgConflictResolverExternalStarted.fur=外部コンフリクトソルバーが開始されました。競合を解決した後、ファイルを解決済みとしてマークすることができます。
dlgSgConflictResolverExternalStarted.hdl=ファイルを解決済みとしてマークしますか？
dlgSgConflictResolverExternalStarted.tle=外部コンフリクトソルバー
dlgSgConflictSolverMarkResolved.btn"Leave Conflicted"=競合したままにする
dlgSgConflictSolverMarkResolved.btn"Mark Resolved"=解決済みとしてマーク
dlgSgConflictSolverMarkResolved.fur=競合の解決を完了するには、そのファイルを解決済みとしてマークする必要があります。 \(git stage\)\n 解決済みとマークされるまでは、ファイルは競合状態のままであり、他の競合解決を試すことができます。
dlgSgConflictSolverMarkResolved.hdl=ファイルを解決済みとしてマークしますか？
dlgSgConflictSolverMarkResolved.tle=解決済みとしてマーク
dlgSgConflictSolverStageForCommit.btn"Don't Stage"=ステージングしない
dlgSgConflictSolverStageForCommit.btn"Stage"=ステージ
dlgSgConflictSolverStageForCommit.fur=ファイルの競合状態を解消するためには、ステージングが必要です。
dlgSgConflictSolverStageForCommit.hdl=今すぐコミットするためにファイルをステージングしますか？
dlgSgConflictSolverStageForCommit.tle=コミットするためにステージ
dlgSgCustomizeProjectUi.btn"Add"=追加
dlgSgCustomizeProjectUi.btn"Assign"=割り当て
dlgSgCustomizeProjectUi.btn"Clear"=クリア
dlgSgCustomizeProjectUi.btn"Remove"=除去
dlgSgCustomizeProjectUi.btn"Reset"=リセット
dlgSgCustomizeProjectUi.chk"Show text below icon"=アイコンの下にテキストを表示する
dlgSgCustomizeProjectUi.col"Accelerator"=ショートカット
dlgSgCustomizeProjectUi.col"Available"=利用可能
dlgSgCustomizeProjectUi.col"Default"=デフォルト
dlgSgCustomizeProjectUi.col"Menu Item"=メニュー項目
dlgSgCustomizeProjectUi.col"Selected"=選択された項目
dlgSgCustomizeProjectUi.edt"Accelerator"=ショートカット
dlgSgCustomizeProjectUi.mni"Regular Expressions"=正規表現
dlgSgCustomizeProjectUi.tab"Accelerators"=ショートカット
dlgSgCustomizeProjectUi.tab"Toolbar"=ツールバー
dlgSgCustomizeProjectUi.tle=カスタマイズ
dlgSgDeleteDirTrash.btn"Delete"=削除
#                             !=Delete
dlgSgDeleteDirTrash.btn"Move to Trash"=ゴミ箱へ移動
#                                    !=Move to Trash
dlgSgDeleteDirTrash.fur=「削除」をクリックすると、削除されたファイルを復元するためにファイル復元ツールが必要になる場合があります。
#                     !=If you click Delete you may require file recovery tools to restore the deleted files!
dlgSgDeleteDirTrash.hdl%1='$1' を再帰的に削除しますか？
#                       !=Do you want to delete '$1' recursively?
dlgSgDeleteDirTrash.tle=削除
#                     !=Delete
dlgSgDeleteFileTrash.hdl%1='$1'を削除しますか？
dlgSgDeleteFilesTrash.hdl%1=選択した$1個のファイルを削除しますか？
dlgSgDiscard.btn"Discard to Stash"=スタッシュに退避する
dlgSgDiscard.btn"Discard"=破棄
dlgSgDiscard.col"Directory"=ディレクトリ
dlgSgDiscard.col"Name"=名前
dlgSgDiscard.edt"Revert to"=次の状態に戻す
dlgSgDiscard.hdl=ローカルまたはステージングされた変更を破棄する
dlgSgDiscard.inf=変更を破棄するファイルと、インデックスとHEADのどちらの状態に戻すかを選択します。
dlgSgDiscard.mni"Copy Selection in Column"=この列の選択範囲をコピーする
dlgSgDiscard.mni"Deselect All"=選択を解除
dlgSgDiscard.mni"Directory"=ディレクトリ
dlgSgDiscard.mni"Name"=名前
dlgSgDiscard.mni"Select All"=全選択
dlgSgDiscard.mni"Show Changes"=比較する
dlgSgDiscard.mni"Toggle"=トグル
dlgSgDiscard.rbt"HEAD"==HEAD
dlgSgDiscard.rbt"Index"=インデックス
dlgSgDiscard.tle=破棄
dlgSgDiscardNoFilesFound.fur=ステージングされたファイルやローカルで変更されたファイルは見つかりませんでした。
dlgSgDiscardNoFilesFound.hdl=破棄するものはありません。
dlgSgDiscardNoFilesFound.tle=破棄
dlgSgDiscardNotApplicableForIndexFiles.fur=1つ以上のファイルのインデックスの変更のみを破棄するように選択しました。ただし、少なくとも1つのファイルは作業ツリーでも変更されています。この場合、インデックスの変更のみを破棄することはできません。\n\n作業ツリーの変更を実際に破棄したい場合は、作業ツリー テーブルのファイルを選択してください。
#                                        !=You have selected to discard only the Index changes of one or more files. However, at least one of the files is also modified in the working tree. It is not possible to discard only Index changes in this case.\n\nIf you actually want to discard the working tree changes, select the file in the working tree table.
dlgSgDiscardNotApplicableForIndexFiles.hdl=インデックスの変更を破棄することはできません。
#                                        !=Discarding Index changes is not possible.
dlgSgDiscardNotApplicableForIndexFiles.tle=破棄
#                                        !=Discard
dlgSgDiscardRevertToHead.hdl%1=$1 個のファイルを HEAD の状態に戻しますか?
dlgSgDiscardRevertToIndex.hdl%1=$1 個のファイルをインデックスの状態に戻しますか?
dlgSgDiscardRevertTo(Head|Index).btn"Discard"=破棄
dlgSgDiscardRevertTo(Head|Index).fur=内容を復元するのは難しいかもしれません。
dlgSgDiscardRevertTo(Head|Index).tle=破棄
dlgSgErrorUtilsClientException.fur"Commit '$1' was not found in repository."=\
 コミット '$1' がリポジトリ内に見つかりませんでした。
dlgSgErrorUtilsClientException.fur"Could not determine URL for submodule $1. Is it correctly initialized?"=\
 サブモジュール $1 の URL を判別できませんでした。正しく初期化されていますか？
dlgSgErrorUtilsClientException.fur"GIT_DIR for repository at '$1' does not exist."=\
 '$1' にあるリポジトリの GIT_DIR が存在しません。
dlgSgErrorUtilsClientException.fur"Repository '$1' is not valid."=リポジトリ '$1' は無効です。
dlgSgErrorUtilsClientException.fur"svn: $1"==svn: $1
dlgSgErrorUtilsClientException.hdl=コマンドの実行に失敗しました。
dlgSgErrorUtilsClientException.tle=コマンドの失敗
dlgSgExitConfirmation.btn"Exit Now"=終了する
dlgSgExitConfirmation.chk=次回から表示しない
dlgSgExitConfirmation.fur=最後のウィンドウを閉じることで、SmartGitが終了します。
dlgSgExitConfirmation.hdl=SmartGitを終了しますか？
dlgSgExitConfirmation.tle=終了
dlgSgFileCompareConflictSolverNoTextFile.btn"Force Opening"=強制的に開く
#                                                         !=Force Opening
dlgSgFileCompareConflictSolverNoTextFile.hdl%1='$1'はテキスト ファイルではないようなので、コンフリクトソルバーを開くことができませんでした。
#                                            !=Could not open Conflict Solver for '$1', because it seems to be no text file.
dlgSgFileCompareConflictSolverNoTextFile.tle=コンフリクトソルバー
#                                          !=Conflict Solver
dlgSgFileCompareInvokerFailedIO.hdl%1='$1' を呼び出すことができませんでした。
#                                   !='$1' could not be invoked.
dlgSgFileCompareInvokerFailedIO.tle=開く
#                                 !=Open
dlgSgFileCompareNoChanges.btn"Open"=開く
dlgSgFileCompareNoChanges.chk=次回から表示しない
dlgSgFileCompareNoChanges.fur=ファイルの内容を確認するには、「開く」をクリックしてください。
dlgSgFileCompareNoChanges.hdl=変更は表示されませんが、ファイルの比較を開きますか?
dlgSgFileCompareNoChanges.tle=ファイルの比較
dlgSgFindObject.edt"Repository Path, Commit ID or Ref"=\
 リポジトリパス、コミットID、Ref
dlgSgFindObject.tle=オブジェクトを検索
dlgSgFlowBranchDivergedHandlerFastForward.btn"Fast-Forward"=ファストフォワード
dlgSgFlowBranchDivergedHandlerFastForward.fur%3=ローカル ブランチ '$1' は、追跡されているブランチ '$2' の後ろにあります。ここでファストフォワードすることも、後で手動で行うこともできます。\nたとえば、ブランチ '$3' をチェックアウトするなど、手動で行っても良いでしょう。
dlgSgFlowBranchDivergedHandlerFastForward.hdl%2=ブランチ '$1' を '$2' にファストフォワードする必要がありますか?
dlgSgFlowBranchDivergedHandlerFastForward.tle=Featureを開始
dlgSgFlowBranchDivergedHandlerReplaceRemote.btn"Replace"=置換
dlgSgFlowBranchDivergedHandlerReplaceRemote.fur%2=ローカルブランチ '$1' には、リモートブランチ '$2' の書き換えられたコミットよりも新しいものが含まれているようです。\n\nローカルブランチがリモートブランチよりも実際に新しいかどうかわからない場合は、この操作をキャンセルしてローカルおよびリモートでの変更をより詳細に調査することをお勧めします。
dlgSgFlowBranchDivergedHandlerReplaceRemote.hdl%2=リモートブランチ'$2'をブランチ'$1'に置き換えますか?
dlgSgFlowBranchDivergedHandlerReplaceRemote.tle=Featureを完了
dlgSgFlowBranchDivergedHandlerResetToRemote.btn"Reset"=リセット
dlgSgFlowBranchDivergedHandlerResetToRemote.fur%2=リモート ブランチ '$1' には、ローカル ブランチ '$2' の最近の書き換えられたコミットが含まれているようです。\n\nリモート ブランチが実際にローカル ブランチよりも新しいかどうかわからない場合は、この操作をキャンセルして、ローカルおよびリモートの変更をより詳細に調査することをお勧めします。
dlgSgFlowBranchDivergedHandlerResetToRemote.hdl%2=ブランチ '$1' をリモート ブランチ '$2' にリセットする必要がありますか?
dlgSgFlowBranchDivergedHandlerResetToRemote.tle=Featureを完了
dlgSgFlowConfigure.btn"Reset to Defaults"=デフォルトにリセット
dlgSgFlowConfigure.edt"Develop Branch"=Develop ブランチ
dlgSgFlowConfigure.edt"Feature Branches"=Feature ブランチ
dlgSgFlowConfigure.edt"Git-Flow Type"=Git-Flow タイプ
dlgSgFlowConfigure.edt"Hot-Fix Branches"=Hot-Fix ブランチ
dlgSgFlowConfigure.edt"Main Development Branch"=メイン開発ブランチ
dlgSgFlowConfigure.edt"Master Branch"=Master ブランチ
dlgSgFlowConfigure.edt"Prefix for Feature Branches"=feature ブランチの接頭辞
dlgSgFlowConfigure.edt"Release Branches"=Release ブランチ
dlgSgFlowConfigure.edt"Remote"=リモート
dlgSgFlowConfigure.edt"Support Branches"=Support ブランチ
dlgSgFlowConfigure.edt"Version Tags"=バージョン タグ
dlgSgFlowConfigure.hdl=ブランチの命名規則を構成する
dlgSgFlowConfigure.inf=featureブランチ、releaseブランチ、Hotfixブランチにどのような名前を付けるかを設定します。
dlgSgFlowConfigure.lbl"Prefixes"=接頭辞
#                              !=Prefixes
dlgSgFlowConfigure.rbt"Full \(feature, release, hotfix, support branches\)"=\
 フル \(feature, release, hotfix, support ブランチ\)
dlgSgFlowConfigure.rbt"Light \(just feature branches\)"=ライト \(feature ブランチのみ\)
dlgSgFlowConfigure.tle=Git-Flowの設定
dlgSgFlowConfigureChangeOrSwitchOff.btn"Change Configuration"=構成を変更する
dlgSgFlowConfigureChangeOrSwitchOff.btn"Switch-Off Git-Flow"=Git-Flowの機能をオフにする
dlgSgFlowConfigureChangeOrSwitchOff.fur=このリポジトリには、すでにGit-Flowが設定されています。Git-Flow の設定を変更するか、Git-Flow の機能をオフにすることができます。どちらの場合も、~/.git/config ファイルが適宜変更されます。
dlgSgFlowConfigureChangeOrSwitchOff.hdl=Git-Flow の設定を変更もしくは機能をオフにしますか?
dlgSgFlowConfigureChangeOrSwitchOff.tle=Git-Flowの設定
dlgSgFlowFeatureFinish.btn"Finish"=完了
dlgSgFlowFeatureFinish.btn"Select from Log"=ログから選択
dlgSgFlowFeatureFinish.btn"Select"=選択
dlgSgFlowFeatureFinish.chk"Delete feature branch"=feature ブランチを削除
dlgSgFlowFeatureFinish.chk"Fetch latest commits and remove remote feature branch"=\
 最新のコミットを取得し、リモートの feature ブランチを削除する
dlgSgFlowFeatureFinish.edt"Commit Message"=コミットメッセージ
dlgSgFlowFeatureFinish.hdl=現在のfeatureを完了
dlgSgFlowFeatureFinish.inf"Choose how to finish the current feature. This operation will integrate the feature into the '$1' branch."=\
 現在の feature を完了させる方法を選択します。この操作により、feature が '$1' ブランチに統合されます。
dlgSgFlowFeatureFinish.inf"Choose how to finish the feature branch '$1'. This operation will integrate the feature into the '$2' branch."=\
 feature ブランチ '$1' をどのように完了させるかを選択します。この操作で、feature は '$2' ブランチに統合されます。
dlgSgFlowFeatureFinish.mni"JIRA"==JIRA
dlgSgFlowFeatureFinish.mni"Log"=ログ
dlgSgFlowFeatureFinish.rbt"Create merge commit"=マージコミットを作成
dlgSgFlowFeatureFinish.rbt"Create simple commit \(squash\)"=シンプルなコミットを作成する \('squash'\)
dlgSgFlowFeatureFinish.rbt"Rebase onto '$1'"='$1' にリベースする。
dlgSgFlowFeatureFinish.tle=Featureを完了
dlgSgFlowFeatureStart.btn"Start"=開始
dlgSgFlowFeatureStart.edt"Base"=ベース
dlgSgFlowFeatureStart.edt"Feature Name"=Feature名
dlgSgFlowFeatureStart.err"A feature with this name already exists. Choose a different name."=\
 この名前のfeatureはすでに存在しています。別の名前を選択してください。
dlgSgFlowFeatureStart.err"Invalid feature name: The name must not end with a slash or dot."=\
 無効なfeature名: 名前の末尾にスラッシュまたはドットを使用することはできません。
dlgSgFlowFeatureStart.hdl=新しい feature を開始する
dlgSgFlowFeatureStart.inf%1=新しいFeatureブランチの名前を入力します。この操作により、'$1' ブランチから新しいブランチがフォークされます。
dlgSgFlowFeatureStart.lbl"Resulting Branch: $1"=作成されるブランチ名: $1
dlgSgFlowFeatureStart.tle=Featureを開始
dlgSgFlowHotfixFinish.btn"Finish"=完了
dlgSgFlowHotfixFinish.btn"Select from Log"=ログから選択
dlgSgFlowHotfixFinish.chk"Create version tag"=バージョンタグの作成
dlgSgFlowHotfixFinish.chk"Create version tag:"=バージョンタグの作成:
dlgSgFlowHotfixFinish.chk"Delete hotfix branch"=hotfix ブランチを削除
dlgSgFlowHotfixFinish.chk"Fetch latest '$1' commits"=最新の '$1' コミットを取得する
dlgSgFlowHotfixFinish.chk"Merge to develop"=develop にマージする
dlgSgFlowHotfixFinish.chk"Push results and remove remote hotfix branch"=\
 結果をプッシュし、リモートHotfixブランチを削除する
dlgSgFlowHotfixFinish.edt"Commit Message"=コミットメッセージ
dlgSgFlowHotfixFinish.edt"Commit/Tag Message"=コミット/タグ メッセージ
dlgSgFlowHotfixFinish.hdl=hotfixを完了
dlgSgFlowHotfixFinish.inf"Choose how to finish the current hotfix. This operation will merge the hotfix into the '$1' and '$2' branches."=\
 現在の Hotfix を完了する方法を選択します。この操作により、Hotfix が $1 および $2 ブランチにマージされます。
dlgSgFlowHotfixFinish.inf"Choose how to finish the hotfix branch '$1'. This operation will merge the hotfix into the '$2' and '$3' branches."=\
 Hotfix ブランチ $1 を完了する方法を選択します。この操作により、Hotfix が $2 および $3 ブランチにマージされます。
dlgSgFlowHotfixFinish.inf"Choose how to finish the hotfix branch '$1'."=\
 Hotfix ブランチ '$1' を完了する方法を選択します。
dlgSgFlowHotfixFinish.tle=Hotfixを完了
dlgSgFlowHotfixStart.btn"Start"=開始
dlgSgFlowHotfixStart.chk"Fetch from '$1' branch"='$1' ブランチからフェッチ
dlgSgFlowHotfixStart.chk"Fetch from base branch"=ベースブランチからフェッチ
dlgSgFlowHotfixStart.edt"Base"=ベース
dlgSgFlowHotfixStart.edt"Hotfix Name"=Hotfix名
dlgSgFlowHotfixStart.hdl=新しい hotfix を開始する
dlgSgFlowHotfixStart.inf%1=新しいHotfixブランチの名前を入力します。この操作により、'$1'ブランチから新しいブランチがフォークされます。
dlgSgFlowHotfixStart.lbl"Resulting Branch: $1"=作成されるブランチ名: $1
dlgSgFlowHotfixStart.tle=Hotfixの開始
dlgSgFlowIntegrateDevelop.btn"Integrate"=統合
dlgSgFlowIntegrateDevelop.chk"Fetch latest '$1' commits from remote repository"=\
 リモートリポジトリから最新の '$1' コミットを取得する
dlgSgFlowIntegrateDevelop.hdl%1='$1' からコミットを統合
dlgSgFlowIntegrateDevelop.inf"Merge or rebase commits from the base branch to the current feature."=\
 ベース ブランチから現在の feature にコミットをマージまたはリベースします。
dlgSgFlowIntegrateDevelop.inf"Merge or rebase commits from the main development line to the current feature."=\
 メインの開発ラインから現在の feature にコミットをマージまたはリベースします。
dlgSgFlowIntegrateDevelop.inf"Merge or rebase commits from the main development line to the feature branch '$1'."=\
 メインの development ラインから feature ブランチ '$1' にコミットをマージまたはリベースします。
dlgSgFlowIntegrateDevelop.rbt"Merge from '$1'"='$1' からマージ
dlgSgFlowIntegrateDevelop.rbt"Rebase current feature onto '$1'"=現在のfeatureを '$1' にリベースします
dlgSgFlowIntegrateDevelop.tle=Develop を統合
dlgSgFlowReleaseFinish.btn"Finish"=完了
dlgSgFlowReleaseFinish.btn"Select from Log"=ログから選択
dlgSgFlowReleaseFinish.chk"Create version tag"=バージョンタグの作成
dlgSgFlowReleaseFinish.chk"Create version tag:"=バージョンタグの作成:
dlgSgFlowReleaseFinish.chk"Delete release branch"=release ブランチを削除
dlgSgFlowReleaseFinish.chk"Fetch latest '$1' and '$2' commits"=\
 最新の $1 および $2 コミットを取得する
dlgSgFlowReleaseFinish.chk"Push results and remove remote release branch"=\
 結果をプッシュし、リモートの Release ブランチを削除します
dlgSgFlowReleaseFinish.edt"Commit Message"=コミットメッセージ
dlgSgFlowReleaseFinish.hdl=releaseを完了
dlgSgFlowReleaseFinish.inf"Choose how to finish the release branch '$1'. This operation will merge the current release into the '$2' and '$3' branches."=\
 Release ブランチ '$1' の完了方法を選択します。この操作は、現在の Release を '$2' および '$3' ブランチにマージします。
dlgSgFlowReleaseFinish.inf"Choose how to finish the release branch '$1'."=\
 Release ブランチ '$1' の完了方法を選択します。
dlgSgFlowReleaseFinish.tle=Releaseを完了
dlgSgFlowReleaseStart.btn"Start"=開始
dlgSgFlowReleaseStart.chk"Fetch from base branch"=ベースブランチからフェッチ
dlgSgFlowReleaseStart.edt"Base"=ベース
dlgSgFlowReleaseStart.edt"Release Name"=Release 名
dlgSgFlowReleaseStart.hdl=新しい release を開始する
dlgSgFlowReleaseStart.inf%1=新しいReleaseブランチの名前を入力してください。この操作により、'$1' ブランチから新しいブランチがフォークされます。
dlgSgFlowReleaseStart.lbl"Resulting Branch: $1"=作成されるブランチ名: $1
dlgSgFlowReleaseStart.tle=Releaseを開始
dlgSgFlowSupportStart.btn"Start"=開始
dlgSgFlowSupportStart.chk"Fetch from '$1' branch"='$1' ブランチからフェッチ
dlgSgFlowSupportStart.edt"Support Name"=サポートブランチ名
dlgSgFlowSupportStart.hdl=サポートを開始
dlgSgFlowSupportStart.inf%1=新しいサポート ブランチの名前を入力します。この操作により、'$1' ブランチから新しいブランチがフォークされます。
dlgSgFlowSupportStart.lbl"Resulting Branch: $1"=作成されるブランチ名: $1
dlgSgFlowSupportStart.tle=サポートを開始
dlgSgGarbageCollector.btn"Run Garbage Collector"=ガベージコレクタ
dlgSgGarbageCollector.chk"Also prune recently created objects"=最近作成されたオブジェクトのプルーニングも実施
dlgSgGarbageCollector.chk"Expire reflog now \(will also delete stashes!\)"=\
 今すぐ'reflog'を失効させる（スタッシュも削除されます）
dlgSgGarbageCollector.chk"Optimize repository more aggressively \(may take a while\)"=\
 リポジトリの最適化をより積極的に行う \(時間がかかる可能性あり\)
dlgSgGarbageCollector.hdl=ガベージコレクタ
dlgSgGarbageCollector.inf=Gitガベージコレクタを実行すると、到達できないオブジェクトが削除され、ローカルリポジトリが最適化されます。\rディスク消費量が削減され、パフォーマンスが向上します。
dlgSgGarbageCollector.tle=ガベージコレクタ
dlgSgGarbageCollectorDeleteAllStashes.btn"Delete Stashes"=スタッシュを削除
dlgSgGarbageCollectorDeleteAllStashes.fur=今すぐ reflog を期限切れにすると、すべての スタッシュ も削除されます。
dlgSgGarbageCollectorDeleteAllStashes.hdl=すべてのスタッシュも削除しますか？
dlgSgGarbageCollectorDeleteAllStashes.tle=ガベージコレクタの実行
dlgSgGitHubGenerateToken.btn"Authenticate"=認証
dlgSgGitHubGenerateToken.edt"Account"=アカウント
dlgSgGitHubGenerateToken.edt"Code"=コード
dlgSgGitHubGenerateToken.edt"Link"=リンク
dlgSgGitHubGenerateToken.edt"Password"=パスワード
dlgSgGitHubGenerateToken.hdl=GitHub用の新しいAPIトークンの生成
dlgSgGitHubGenerateToken.inf=OAuthまたは認証情報を用いてGitHubで認証します。
#                          !=Authenticate at GitHub and grant access to SmartGit.
dlgSgGitHubGenerateToken.lbl"Your browser should have opened automatically, let you authenticate with your preferred account at GitHub and grant access to SmartGit. If this didn't happen, manually open following link:"=\
 ブラウザが自動的に起動し、GitHubのアカウントで認証され、SmartGitへのアクセスが許可されるはずです。\n認証されなかった場合は、手動で以下のリンクを開いてください。
dlgSgGitHubGenerateToken.rbt"Authenticate using OAuth \(recommended\)"=OAuthによる認証\(推奨\)
dlgSgGitHubGenerateToken.rbt"Authenticate with your GitHub account and password"=\
 GitHubのアカウントとパスワードで認証
dlgSgGitHubGenerateToken.tle=APIトークンを生成
dlgSgGitHubPullRequestCreate.btn"Create"=作成
dlgSgGitHubPullRequestCreate.chk"Draft \(don\'t notify code owners yet\)"=\
 ドラフト （コード所有者にはまだ通知しないでください）
dlgSgGitHubPullRequestCreate.edt"$1 \u21d2"==$1 \u21d2
dlgSgGitHubPullRequestCreate.edt"Title and Description"=タイトルと説明
dlgSgGitHubPullRequestCreate.hdl=プルリクエストを作成
dlgSgGitHubPullRequestCreate.inf=別のリポジトリやブランチにプルリクエストを送信します。
dlgSgGitHubPullRequestCreate.tle=プルリクエストを作成
dlgSgGitHubPullRequestMerge.btn"Merge"=マージ
dlgSgGitHubPullRequestMerge.btn"Select from Log"=ログから選択
dlgSgGitHubPullRequestMerge.edt"Commit Message"=コミットメッセージ
dlgSgGitHubPullRequestMerge.hdl=プル リクエストをマージする
dlgSgGitHubPullRequestMerge.inf=選択したプルリクエストをどのようにマージしますか?
dlgSgGitHubPullRequestMerge.lbl"If you have integrated the Pull Request manually, choose this option to close the Pull Request on the server."=\
 プル リクエストを手動で統合した場合は、このオプションを選択してサーバー上のプル リクエストを閉じます。
dlgSgGitHubPullRequestMerge.lbl"If your are fine with the Pull Request changes, choose this option to perform the merge directly on the GitHub server."=\
 プル リクエストの変更に問題がない場合は、このオプションを選択して、GitHub サーバーで直接マージを実行します。
dlgSgGitHubPullRequestMerge.lbl"To locally check how a Pull Request integrates with the latest commits, choose this option."=\
 プルリクエストが最新のコミットとどのように統合されるかをローカルで確認するには、このオプションを選択します。
dlgSgGitHubPullRequestMerge.rbt"Mark as merged on GitHub Server"=\
 GitHub サーバーでマージ済みとしてマーク
dlgSgGitHubPullRequestMerge.rbt"Merge on GitHub Server"=GitHub Serverでマージ
dlgSgGitHubPullRequestMerge.rbt"Merge to Local Repository"=ローカルリポジトリにマージ
dlgSgGitHubPullRequestMerge.tle=プルリクエストのマージ
dlgSgGitLabGenerateToken.edt"Code"=コード
dlgSgGitLabGenerateToken.edt"Link"=リンク
dlgSgGitLabGenerateToken.edt"Token"=トークン
dlgSgGitLabGenerateToken.hdl=生成されたトークンを入力します
#                          !=Generate a new API token for GitLab
dlgSgGitLabGenerateToken.inf=GitLabで認証し、生成されたトークンを入力します。
#                          !=Paste the OAuth code from your browser.
dlgSgGitLabGenerateToken.lbl"Your browser should have opened automatically, let you authenticate with your preferred account at GitLab and grant access to SmartGit. If this didn't happen, manually open following link:"=\
 ブラウザが自動的に起動し、GitLabのアカウントで認証され、SmartGitへのアクセスが許可されるはずです。\n認証されなかった場合は、手動で次のリンクを開いてください。
dlgSgGitLabGenerateToken.tle=アクセストークンを要求する
dlgSgGitLabMergeRequestCreate.btn"Create"=作成
dlgSgGitLabMergeRequestCreate.edt"$1 \u21d2"==$1 \u21d2
dlgSgGitLabMergeRequestCreate.edt"Title and Description"=タイトルと説明
dlgSgGitLabMergeRequestCreate.hdl=マージリクエストを作成
dlgSgGitLabMergeRequestCreate.inf=別のリポジトリやブランチにマージリクエストを送信します。
dlgSgGitLabMergeRequestCreate.tle=マージリクエストを作成
dlgSgGitLabSettingsInvalidToken.fur=GitLabアカウントのPersonal Access Tokenを使用します。
dlgSgGitLabSettingsInvalidToken.hdl=GitLab アカウントの個人用アクセストークンを入力してください。
dlgSgGitLabSettingsInvalidToken.tle=入力検証
dlgSgHeadMessageListenerReplaceMessage.btn"Don't Replace"=置換しない
dlgSgHeadMessageListenerReplaceMessage.btn"Replace This Time"=置換する
dlgSgHeadMessageListenerReplaceMessage.chk=メッセージがすでに入力されている場合は、決して置き換えない
dlgSgHeadMessageListenerReplaceMessage.fur=コミットメッセージの入力欄が空の場合は、HEADのコミットメッセージが自動的に再利用されます。
dlgSgHeadMessageListenerReplaceMessage.hdl=入力されたコミットメッセージをHEADコミットのメッセージに置換しますか？
dlgSgHeadMessageListenerReplaceMessage.tle=コミット
dlgSgHistoryCommitCantBeModified.fur=影響を受けるコミットのうち少なくとも1つは、HEADの最初の親となる履歴の一部ではありません。
#                                  !=At least one of the affected commits is not part of your HEAD's first-parent history.
dlgSgHistoryCommitCantBeModified.hdl=少なくとも1つの選択されたコミットを変更できません。
#                                  !=At least one selected commit can't be modified.
dlgSgHistoryCommitCantBeModified.tle=コミットの修正
#                                  !=Modify Commit
dlgSgHistoryCommitCantBeModified.ttp"In the Preferences, you can configure Low-Level Property 'history.disableOperationsForUnmodifiableCommits' to have inapplicable operations showing up as disabled menu items immediately."=環境設定のローレベル・プロパティ 'history.disableOperationsForUnmodifiableCommits' を設定することで、適用できない操作を無効なメニュー項目として表示させることができます。
#                                                                                                                                                                                                                             !=In the Preferences, you can configure Low-Level Property 'history.disableOperationsForUnmodifiableCommits' to have inapplicable operations showing up as disabled menu items immediately.
dlgSgHistoryCommitCantBeModified.ttpSgHistoryCommitCantBeModifiedInfo"In the Preferences, you can configure Low-Level Property 'history.disableOperationsForUnmodifiableCommits' to have inapplicable operations showing up as disabled menu items immediately."=環境設定のローレベル・プロパティ 'history.disableOperationsForUnmodifiableCommits' を設定することで、適用できない操作を無効なメニュー項目として表示させることができます。
#                                                                                                                                                                                                                                                              !=In the Preferences, you can configure Low-Level Property 'history.disableOperationsForUnmodifiableCommits' to have inapplicable operations showing up as disabled menu items immediately.
dlgSgHistoryEditAuthor.btn"Set Author"=作者を設定
dlgSgHistoryEditAuthor.edt"Email"=電子メール
dlgSgHistoryEditAuthor.edt"User Name"=ユーザ名
dlgSgHistoryEditAuthor.hdl=作者を編集
dlgSgHistoryEditAuthor.inf=新しいコミットの作者とそのメールアドレスを入力します。
dlgSgHistoryEditAuthor.tle=作者を編集
dlgSgHistoryEditMessage.btn"JIRA"==JIRA
dlgSgHistoryEditMessage.btn"Select from Log"=ログから選択
dlgSgHistoryEditMessage.btn"Select"=選択
dlgSgHistoryEditMessage.btn"Set Message"=メッセージをセットする
dlgSgHistoryEditMessage.edt"Commit Message"=コミットメッセージ
dlgSgHistoryEditMessage.hdl=コミットメッセージを編集
dlgSgHistoryEditMessage.inf=新しいコミットメッセージを入力します。
dlgSgHistoryEditMessage.mni"JIRA"==JIRA
dlgSgHistoryEditMessage.mni"Log"=ログ
dlgSgHistoryEditMessage.tle=コミットメッセージを編集
#                         !=Edit Message
dlgSgHistoryModifySplitConfirm.btn"Modify"=変更
dlgSgHistoryModifySplitConfirm.btn"Split"=分割
dlgSgHistoryModifySplitConfirm.fur=「変更」はコミット後に停止します。\n\n 「分割」は、変更をインデックスに格納します。 2 番目のコミットに入れる必要があるいくつかの変更を破棄することができます。\n\n変更を行った後、リベースを続行して残りのコミットを処理します。
dlgSgHistoryModifySplitConfirm.hdl%1=コミットした $1 を修正又は分割しますか?
dlgSgHistoryModifySplitConfirm.tle=コミットの変更または分割
dlgSgHistoryPushCommitsReplaceRemoteBranch.btn"Force Push"=強制プッシュ
dlgSgHistoryPushCommitsReplaceRemoteBranch.fur=リモートブランチへのプッシュは ファストフォワードできないので、強制的にプッシュする必要があります。リモートブランチでのコミットは失われます。
dlgSgHistoryPushCommitsReplaceRemoteBranch.hdl%1=リモートブランチをコミット $1 で置き換えますか？
dlgSgHistoryPushCommitsReplaceRemoteBranch.tle=プッシュアップ
dlgSgHistoryPushCommitsUpToCommit.btn"Push"=プッシュ
dlgSgHistoryPushCommitsUpToCommit.fur=選択したコミットまでのすべてのコミットが、リモートリポジトリにプッシュされます。
dlgSgHistoryPushCommitsUpToCommit.hdl%1=コミット$1まで変更をプッシュしますか？
dlgSgHistoryPushCommitsUpToCommit.tle=プッシュアップ
dlgSgHistoryPushedCommitsModifyPushedCommits.btn"Modify Pushed Commits"=既にプッシュされたコミットを修正する
dlgSgHistoryPushedCommitsModifyPushedCommits.fur=既にプッシュされているコミットは、他のユーザーにも知られており、そのユーザーが自分のコミットを構築する際に使用されている可能性があります。\rこのようなコミットを変更すると、後で予期せぬ衝突が起こる可能性があります。
dlgSgHistoryPushedCommitsModifyPushedCommits.hdl=既にプッシュされているコミットを修正しますか?
dlgSgHistoryPushedCommitsModifyPushedCommits.tle=コミットの修正
#                                              !=<REMOVED>
dlgSgHistoryPushedCommitsModifyPushedCommits.tle"Modify Commit"=コミットの修正
#                                                             !=Modify Commit
dlgSgHistoryPushedCommitsModifyPushedCommits.tle"Squash Commits"=スカッシュコミット
#                                                              !=Squash Commits
dlgSgHistorySplitConfirm.btn"Split"=分割
dlgSgHistorySplitConfirm.chk=次回から表示しない
dlgSgHistorySplitConfirm.fur=これにより、コミットの変更がインデックスに格納されます。2 番目のコミットで行うべき変更をアンステージしてからステージングされた変更をコミットします。続けて2 回目\(または 3 回目\) のコミットで残りの変更をコミットします。\n\n完了後、リベースを続行して残りのコミットを処理します。
dlgSgHistorySplitConfirm.hdl=選択したコミットを複数のコミットに分割しますか?
dlgSgHistorySplitConfirm.tle=コミットの分割
dlgSgHistorySquash.btn"JIRA"==JIRA
dlgSgHistorySquash.btn"Select from Log"=ログから選択
dlgSgHistorySquash.btn"Select"=選択
dlgSgHistorySquash.btn"Squash Commits"=スカッシュコミット
dlgSgHistorySquash.edt"Authorship"=著作権
dlgSgHistorySquash.edt"Commit Message"=コミットメッセージ
dlgSgHistorySquash.hdl=複数のコミットをスカッシュする
dlgSgHistorySquash.inf=選択されたコミットは、個々のコミットのすべての変更を含む1つのスカッシュコミットに置き換わります。
dlgSgHistorySquash.mni"JIRA"==JIRA
dlgSgHistorySquash.mni"Log"=ログ
dlgSgHistorySquash.tle=スカッシュコミット
dlgSgHostingProviderAdd.btn"Add"=追加
dlgSgHostingProviderAdd.btn"Generate API Token"=APIトークンを生成
dlgSgHostingProviderAdd.btn"Generate Token"=トークンを生成
dlgSgHostingProviderAdd.chk"Use OAuth token for repository authentication \(instead of password\)"=\
 リポジトリの認証に（パスワードではなく）OAuthトークンを使用する
dlgSgHostingProviderAdd.chk"Use SSH instead of HTTPS to access repositories"=\
 リポジトリへのアクセスにHTTPSではなくSSHを使用する
dlgSgHostingProviderAdd.chk"Use SSL client certificates \(usually not required\)"=\
 SSLクライアント証明書の使用（通常は必要ありません）
dlgSgHostingProviderAdd.chk"Use a GitHub Enterprise instance"=GitHub Enterpriseインスタンスの使用
dlgSgHostingProviderAdd.chk"Use a custom Azure DevOps server"=\
 カスタムAzure DevOpsサーバーの使用
dlgSgHostingProviderAdd.chk"Use a custom GitLab server"=カスタムGitLabサーバーの使用
dlgSgHostingProviderAdd.edt"Account"=アカウント
dlgSgHostingProviderAdd.edt"Certificate Password"=証明書のパスワード
dlgSgHostingProviderAdd.edt"Client Certificate"=クライアント証明書
dlgSgHostingProviderAdd.edt"Domain"=ドメイン
dlgSgHostingProviderAdd.edt"Password"=パスワード
dlgSgHostingProviderAdd.edt"Server URL \(including collection\)"=サーバーURL \(コレクションを含む\)
dlgSgHostingProviderAdd.edt"Server URL"=サーバURL
dlgSgHostingProviderAdd.edt"Token"=トークン
dlgSgHostingProviderAdd.edt"User Name"=ユーザ名
dlgSgHostingProviderAdd.hdl=ホスティングプロバイダーの新規アカウント設定
dlgSgHostingProviderAdd.inf=新規アカウントを設定するホスティングプロバイダーを選択します。
dlgSgHostingProviderAdd.lbl"For example: https://azure.devops.server/DefaultCollection"=例: https://azure.devops.server/DefaultCollection
dlgSgHostingProviderAdd.lbl"The \(API\) token is a special auto-generated credential which SmartGit will use to authenticate at GitHub. It adds another layer of security, as you can easily revoke access by removing the token from the GitHub front-end."=\
 APIトークンとは、SmartGitがGitHubでの認証に使用する、自動生成された特別なクレデンシャルです。\rこのトークンを GitHub のフロントエンドから削除すれば、簡単にアクセスを取り消すことができるので、もうひとつのセキュリティ層となります。
dlgSgHostingProviderAdd.lbl"The token may either be an autogenerated OAuth-token \(use 'Generate Token' below\) or a 'personal access token' which you can generate yourself in your Azure DevOps account settings."=\
 トークンは、自動生成されたOAuthトークン（下記の「トークンの生成」を使用）か、Azure DevOpsのアカウント設定で自分で生成できる「パーソナルアクセストークン」のどちらかを使用します。
dlgSgHostingProviderAdd.lbl"The token may either be an autogenerated OAuth-token \(use 'Generate Token' below\) or a 'personal access token' which you can generate yourself in your GitHub account settings."=\
 トークンには、自動生成された OAuth トークン (以下の 'トークンを生成' を使用します) か、あるいは GitHub のアカウント設定で自分で生成した 'personal access token' を使用します。
dlgSgHostingProviderAdd.lbl"The token may either be an autogenerated OAuth-token \(use 'Generate Token' below\) or a 'personal access token' which you can generate yourself in your GitLab account settings."=\
 トークンには、自動生成された OAuth トークン (以下の 'トークンを生成' を使用します) か、あるいは GitLab のアカウント設定で自分で生成した 'personal access token' を使用します。
dlgSgHostingProviderAdd.lbl"Use the same login information as for the assembla website."=\
 assemblaウェブサイトと同じログイン情報を使用してください。
dlgSgHostingProviderAdd.lbl"Use the same login information as for the beanstalk website and make sure that for 'My Profile' - 'Account' - 'Account Settings' - 'Developer API' is enabled."=\
 beanstalkウェブサイトと同じログイン情報を使用し、'My Profile' - 'Account' - 'Account Settings' - 'Developer API' が有効であることを確認します。
dlgSgHostingProviderAdd.lbl"Use the same login information as for the codebasehq website."=\
 ログイン情報は、codebasehqのサイトと同じものを使用してください。
dlgSgHostingProviderAdd.lbl"Use the same login information as for the unfuddle website."=\
 unfuddleのウェブサイトと同じログイン情報を使用します。
dlgSgHostingProviderAdd.tle=ホスティングプロバイダーを追加
dlgSgHostingProviderEdit.btn"Generate API Token"=APIトークンを生成
dlgSgHostingProviderEdit.btn"Generate Token"=トークンを生成
dlgSgHostingProviderEdit.chk"Use OAuth token for repository authentication \(instead of password\)"=\
 リポジトリの認証に（パスワードではなく）OAuthトークンを使用する
dlgSgHostingProviderEdit.chk"Use SSH instead of HTTPS to access repositories"=\
 リポジトリへのアクセスにHTTPSではなくSSHを使用する
dlgSgHostingProviderEdit.chk"Use SSL client certificates \(usually not required\)"=\
 SSLクライアント証明書の使用（通常は必要ありません）
dlgSgHostingProviderEdit.chk"Use a GitHub Enterprise instance"=GitHub Enterpriseインスタンスの使用
dlgSgHostingProviderEdit.chk"Use a custom Azure DevOps server"=カスタムAzure DevOpsサーバーの使用
#                                                            !=Use a custom Azure DevOps server
dlgSgHostingProviderEdit.chk"Use a custom GitLab server"=カスタムGitLabサーバーの使用
dlgSgHostingProviderEdit.edt"Account"=アカウント
dlgSgHostingProviderEdit.edt"Certificate Password"=証明書のパスワード
dlgSgHostingProviderEdit.edt"Client Certificate"=クライアント証明書
dlgSgHostingProviderEdit.edt"Name"=名前
dlgSgHostingProviderEdit.edt"Password"=パスワード
dlgSgHostingProviderEdit.edt"Server URL \(including collection\)"=サーバーURL \(コレクションを含む\)
#                                                               !=Server URL \(including collection\)
dlgSgHostingProviderEdit.edt"Server URL"=サーバURL
dlgSgHostingProviderEdit.edt"Token"=トークン
dlgSgHostingProviderEdit.err"Please enter a Personal Access Token for your GitLab account."=\
 GitLab アカウントの個人用アクセストークンを入力してください。
dlgSgHostingProviderEdit.err"Please enter an OAuth 'refresh' token."=\
 OAuthの'refresh'トークンを入力してください。
dlgSgHostingProviderEdit.err"Please enter the API token."=APIトークンを入力してください。
dlgSgHostingProviderEdit.err"Please enter the configuration name."=
#                                                                !=Please enter the configuration name.
dlgSgHostingProviderEdit.err"Please enter the root URL for the GitLab server."=
#                                                                            !=Please enter the root URL for the GitLab server.
dlgSgHostingProviderEdit.err"Please specify the private key file."=\
 秘密鍵ファイルを指定してください。
dlgSgHostingProviderEdit.err"The entered URL is invalid - it should look like https://server"=
#                                                                                           !=The entered URL is invalid - it should look like https://server
dlgSgHostingProviderEdit.err"The provided SSL client certificate path is invalid."=
#                                                                                !=The provided SSL client certificate path is invalid.
dlgSgHostingProviderEdit.hdl%1=$1 アカウントの設定
dlgSgHostingProviderEdit.inf%1=$1 に接続するための認証情報を指定してください。
dlgSgHostingProviderEdit.lbl"For example: https://azure.devops.server/DefaultCollection"=例: https://azure.devops.server/DefaultCollection
#                                                                                      !=For example: https://azure.devops.server/DefaultCollection
dlgSgHostingProviderEdit.lbl"The \(API\) token is a special auto-generated credential which SmartGit will use to authenticate at GitHub. It adds another layer of security, as you can easily revoke access by removing the token from the GitHub front-end."=\
 APIトークンとは、SmartGitがGitHubでの認証に使用する、自動生成された特別なクレデンシャルです。\rこのトークンを GitHub のフロントエンドから削除すれば、簡単にアクセスを取り消すことができるので、もうひとつのセキュリティ層となります。
dlgSgHostingProviderEdit.lbl"The token may either be an autogenerated OAuth-token \(use 'Generate Token' below\) or a 'personal access token' which you can generate yourself in your Azure DevOps account settings."=トークンは、自動生成されたOAuthトークン（下記の「トークンの生成」を使用）か、Azure DevOpsのアカウント設定で自分で生成できる「パーソナルアクセストークン」のどちらかを使用します。
#                                                                                                                                                                                                                   !=The token may either be an autogenerated OAuth-token \(use 'Generate Token' below\) or a 'personal access token' which you can generate yourself in your Azure DevOps account settings.
dlgSgHostingProviderEdit.lbl"The token may either be an autogenerated OAuth-token \(use 'Generate Token' below\) or a 'personal access token' which you can generate yourself in your GitHub account settings."=\
 トークンには、自動生成された OAuth トークン (以下の 'トークンを生成' を使用します) か、あるいは GitHub のアカウント設定で自分で生成した 'personal access token' を使用します。
dlgSgHostingProviderEdit.lbl"The token may either be an autogenerated OAuth-token \(use 'Generate Token' below\) or a 'personal access token' which you can generate yourself in your GitLab account settings."=\
 トークンには、自動生成された OAuth トークン (以下の 'トークンを生成' を使用します) か、あるいは GitLab のアカウント設定で自分で生成した 'personal access token' を使用します。
dlgSgHostingProviderEdit.lbl"You can review the GitHub application settings \[$1 here\]."=GitHub アプリケーションの設定は、\[$1 こちら\] をご覧ください。
#                                                                                       !=You can review the GitHub application settings \[$1 here\].
dlgSgHostingProviderEdit.tle=GitLab
#                          !=<REMOVED>
dlgSgHostingProviderEdit.tle"Azure DevOps"==Azure DevOps
#                                        !=Azure DevOps
dlgSgHostingProviderEdit.tle"Bitbucket Server"==Bitbucket Server
#                                            !=Bitbucket Server
dlgSgHostingProviderEdit.tle"Bitbucket"==Bitbucket
#                                     !=Bitbucket
dlgSgHostingProviderEdit.tle"GitHub"==GitHub
#                                  !=GitHub
dlgSgHostingProviderEdit.tle"GitLab"==GitLab
#                                  !=GitLab
dlgSgHostingProviderEdit.wrn"Connection to '$1' failed: $2"='$1' への接続に失敗しました: $2
dlgSgHostingProviderSelectRepository.btn"Select"=選択
dlgSgHostingProviderSelectRepository.col"Name"=名前
dlgSgHostingProviderSelectRepository.col"Namespace"=名前空間
dlgSgHostingProviderSelectRepository.col"Repository"=リポジトリ
dlgSgHostingProviderSelectRepository.mni"Copy Selection in Column"=この列の選択範囲をコピーする
dlgSgHostingProviderSelectRepository.mni"Name"=名前
dlgSgHostingProviderSelectRepository.mni"Owner"=所有者
dlgSgHostingProviderSelectRepository.mni"Repository"=リポジトリ
dlgSgHostingProviderSelectRepository.tle=GitHub プロジェクト
dlgSgHostingProvider(Add|Edit).lbl"Optional SSL configuration"=オプションのSSL設定
#                                                            !=Optional SSL configuration
dlgSgHttpPasswordAuthenticationFailedCause1.fur%3=OAuth アクセス トークンを要求できませんでした。 ほとんどの場合 $1 の設定が変更され、SmartGit に保存されている OAuth 資格情報が無効になっています。\n\n解決するには、環境設定で $2 ホスティング プロバイダーを再作成します。\n\n詳細：\n\n $3
dlgSgHttpPasswordAuthenticationFailedCause1.hdl%1=$1 OAuth認証に失敗しました
dlgSgHttpPasswordAuthenticationFailedCause1.tle=HTTP 認証
dlgSgHttpPasswordCredentials.btn"Login"=ログイン
dlgSgHttpPasswordCredentials.chk"Store password"=パスワードの保存
dlgSgHttpPasswordCredentials.edt"Password"=パスワード
dlgSgHttpPasswordCredentials.edt"User Name"=ユーザ名
dlgSgHttpPasswordCredentials.hdl%1='$1' にログインする
dlgSgHttpPasswordCredentials.inf=リポジトリに認証するためのユーザー名とパスワードを入力します。
dlgSgHttpPasswordCredentials.tle=ログイン
dlgSgIgnoreChanged.btn"Discard Changes"=変更を破棄
dlgSgIgnoreChanged.fur=続行すると、変更は破棄されます。
dlgSgIgnoreChanged.hdl=本当に変更されたファイルを削除しますか?
dlgSgIgnoreChanged.tle=無視
dlgSgIgnoreDirectoryConfirm.btn"Ignore"=無視
dlgSgIgnoreDirectoryConfirm.cmb".git/info/exclude \(only for this repository\)"=.git/info/exclude \(このリポジトリのみ\)
#                                                                             !=.git/info/exclude \(only for this repository\)
dlgSgIgnoreDirectoryConfirm.cmb".gitignore in parent directory"=親ディレクトリの .gitignore
#                                                             !=.gitignore in parent directory
dlgSgIgnoreDirectoryConfirm.cmb".gitignore in repository root directory"=リポジトリのルートディレクトリの .gitignore
#                                                                      !=.gitignore in repository root directory
dlgSgIgnoreDirectoryConfirm.edt"Ignore File"=Ignoreファイル
dlgSgIgnoreDirectoryConfirm.fur=このディレクトリ名は、.ignore ファイルに追加されます。 .ignore ファイルが存在しない場合は、作成されます。
dlgSgIgnoreDirectoryConfirm.hdl%1=ディレクトリ'$1'を無視しますか？
dlgSgIgnoreDirectoryConfirm.tle=無視
dlgSgIgnoreEdit.btn"Edit"=編集
dlgSgIgnoreEdit.hdl=Git ignore ファイルの編集
dlgSgIgnoreEdit.inf=編集する Git ignore ファイルを選択します。
dlgSgIgnoreEdit.mni"Copy Path"=パスをコピー
dlgSgIgnoreEdit.mni"Reveal"=表示する
dlgSgIgnoreEdit.tle=無視リストを編集
dlgSgIgnoreFile.btn"Ignore"=無視
dlgSgIgnoreFile.btn"Remove && Ignore"=除去して無視する
dlgSgIgnoreFile.cmb".git/info/exclude \(only for this repository\)"=.git/info/exclude \(このリポジトリのみ\)
#                                                                 !=.git/info/exclude \(only for this repository\)
dlgSgIgnoreFile.cmb".gitignore in parent directory"=親ディレクトリの .gitignore
#                                                 !=.gitignore in parent directory
dlgSgIgnoreFile.cmb".gitignore in repository root directory"=リポジトリのルートディレクトリの .gitignore
#                                                          !=.gitignore in repository root directory
dlgSgIgnoreFile.edt"Ignore File"=Ignoreファイル
dlgSgIgnoreFile.err"The pattern must match all selected file names. For instance, '$1' is not matched."=\
 パターンは、選択されたすべてのファイル名と一致する必要があります。例えば、'$1' はマッチしません。
dlgSgIgnoreFile.hdl=無視するファイルを指定する
dlgSgIgnoreFile.inf=選択したファイルだけを無視するか、指定したパターンに一致するすべてのファイルを無視するかを選択します。\r追跡されたファイルは以降のバージョン管理の対象から除外されます。
dlgSgIgnoreFile.lbl"Use ? to match a single or \* to match multiple arbitrary characters. The pattern will be saved in the .gitignore file of the same directory."=\
 単一の文字にマッチする場合は ? を、複数の任意の文字にマッチする場合は * を使用します。このパターンは、同じディレクトリの .gitignore ファイルに保存されます。
dlgSgIgnoreFile.rbt"Ignore as pattern \(e.g. '\*.obj'\):"=パターンで無視する \(例：\*.obj\):
dlgSgIgnoreFile.rbt"Ignore explicitly \(e.g. 'Makefile'\)"=明示的に無視する \(例：'Makefile'\)
dlgSgIgnoreFile.tle=無視
dlgSgIndexEditorSaveOrDiscard.btn"Discard"=破棄
dlgSgIndexEditorSaveOrDiscard.btn"Save"=保存
dlgSgIndexEditorSaveOrDiscard.fur=今すぐ保存しないと、変更内容が失われます。
dlgSgIndexEditorSaveOrDiscard.hdl=変更内容を保存しますか？
dlgSgIndexEditorSaveOrDiscard.tle=閉じる
dlgSgJournalDoubleClick.btn"Check Out '$1'"='$1' をチェックアウト
dlgSgJournalDoubleClick.btn"Open Log"=ログを開く
dlgSgJournalDoubleClick.fur%1='$1' をチェックアウトするか、選択したコミットのログを開くかを選択します。
dlgSgJournalDoubleClick.hdl%1='$1' をチェックアウトしますか？
dlgSgJournalDoubleClick.tle=ジャーナル
dlgSgJournalFormCommitCantBeModified.fur=HEAD の 親を辿った履歴に含まれていません。
dlgSgJournalFormCommitCantBeModified.hdl=少なくとも1つの選択されたコミットを変更できません。
dlgSgJournalFormCommitCantBeModified.tle=作者を編集
dlgSgLfsInstallConfirm.btn"Install"=インストール
dlgSgLfsInstallConfirm.fur=LFSに必要なフックとフィルタを設定します。
dlgSgLfsInstallConfirm.hdl=このリポジトリをLFS \(Large File Support\) 用に初期化しますか？
dlgSgLfsInstallConfirm.tle=LFS インストール
dlgSgLfsTrack.edt"Pattern"=パターン
dlgSgLfsTrack.err"File '$1' does not match the specified pattern."=\
 ファイル '$1' は、指定されたパターンと一致しません。
dlgSgLfsTrack.hdl=ファイルまたはパターンを追跡済みとしてマークする
dlgSgLfsTrack.inf=Large File Support\(LFS\)で扱うファイル名のパターンを指定します。
dlgSgLfsTrack.tle=LFSで追跡
dlgSgLocalChangesFormTakeBlockListenerRevertWorkingTreeFile.btn"Revert"=リバート
dlgSgLocalChangesFormTakeBlockListenerRevertWorkingTreeFile.fur%1=インデックスの行を作業ツリーのファイル '$1' に適用しようとしています。変更はすぐに保存されます。
dlgSgLocalChangesFormTakeBlockListenerRevertWorkingTreeFile.hdl=作業ツリー ファイルの変更を本当に元に戻しますか?
dlgSgLocalChangesFormTakeBlockListenerRevertWorkingTreeFile.tle=作業ツリーのファイルを元に戻す
dlgSgLocalCommandRepositoryEmpty.fur=空のリポジトリに対して要求された操作を実行することはできません。
dlgSgLocalCommandRepositoryEmpty.hdl=リポジトリが空です。
dlgSgLocalCommandRepositoryEmpty.tle=スタッシュに保存
dlgSgLogCheckoutFileAs.btn"Save After"=後を保存
dlgSgLogCheckoutFileAs.btn"Save Before"=前を保存
dlgSgLogCheckoutFileAs.edt"Target File"=ターゲットファイル
dlgSgLogCheckoutFileAs.hdl=リポジトリファイルの保存
dlgSgLogCheckoutFileAs.inf"Select the local file to saved to."=\
 保存先のローカル ファイルを選択します。
dlgSgLogCheckoutFileAs.inf"Select whether to save the file state Before or After the selected commit."=\
 選択したコミット後 又は コミット前のファイル状態を保存するかどうかを選択します。
dlgSgLogCheckoutFileAs.tle=ファイルを別名で保存
dlgSgLogCommentDeleteConfirm.hdl%1=本当にコメント'$1'を削除しますか？
dlgSgLogComment(|s)DeleteConfirm.btn"Delete Comment"=コミットを削除
dlgSgLogComment(|s)DeleteConfirm.fur=削除したコメントは元に戻せません。
dlgSgLogComment(|s)DeleteConfirm.tle=コミットを削除
dlgSgLogCommentsDeleteConfirm.hdl%1=$1のコメントを本当に削除しますか？
dlgSgLogCompareSelectedFilesAgainstEachOther.btn"Compare Separately"=個別に比較
dlgSgLogCompareSelectedFilesAgainstEachOther.btn"Compare With Each Other"=ファイル同士の比較
dlgSgLogCompareSelectedFilesAgainstEachOther.fur=選択したファイル同士を比較することも、各ファイルの以前の状態と比較するために2つの別々の比較画面を開くこともできます。
dlgSgLogCompareSelectedFilesAgainstEachOther.hdl=選択したファイル同士を比較しますか？
dlgSgLogCompareSelectedFilesAgainstEachOther.tle=比較
dlgSgLogCompareWithWorkingTree.btn"Compare After"=後と比較
dlgSgLogCompareWithWorkingTree.btn"Compare Before"=前と比較
dlgSgLogCompareWithWorkingTree.edt"Working Tree File"=ワーキングツリーファイル
dlgSgLogCompareWithWorkingTree.hdl=リポジトリファイルとローカルファイルの比較
dlgSgLogCompareWithWorkingTree.inf=選択したコミットの前または後の状態のリポジトリファイルと比較するかどうかを選択します。
dlgSgLogCompareWithWorkingTree.tle=作業ツリーとの比較
dlgSgLogGraphRootSwitch.chk"Include tracked remote branches"=追跡されたリモート ブランチを含める
dlgSgLogGraphRootSwitch.hdl=表示されたブランチを選択
dlgSgLogGraphRootSwitch.inf=グラフにコミットを表示するブランチを選択します。
dlgSgLogGraphRootSwitch.mni"Toggle"=トグル
dlgSgLogGraphRootSwitch.tle=ブランチを選択
dlgSgLogOpenFailedRepository.fur=リポジトリはまだ有効ですか?
#                              !=<REMOVED>
dlgSgLogOpenFailedRepository.fur"Details: $1"=詳細: $1
#                                           !=Details: $1
dlgSgLogOpenFailedRepository.fur"Is the repository still valid?"=リポジトリはまだ有効ですか?
#                                                              !=Is the repository still valid?
dlgSgLogOpenFailedRepository.hdl=リポジトリを開くことができませんでした。
dlgSgLogOpenFailedRepository.tle=ログ
dlgSgLogOpenFailedSubmodule.fur=リポジトリはまだ有効ですか?
dlgSgLogOpenFailedSubmodule.hdl=サブモジュールを開くことができませんでした。
dlgSgLogOpenFailedSubmodule.tle=ログ
dlgSgLogOpenNewWindow.btn"Existing Window"=既存のウィンドウ
dlgSgLogOpenNewWindow.btn"New Window"=新しいウィンドウ
dlgSgLogOpenNewWindow.fur=すでに既存のログウィンドウがあり、それを表示することができます。
dlgSgLogOpenNewWindow.hdl=新しいログウィンドウを開きますか?
dlgSgLogOpenNewWindow.tle=ログ
dlgSgLogOpenSubmoduleLinkOrRepository.btn"History of Updates"=更新履歴
dlgSgLogOpenSubmoduleLinkOrRepository.btn"Submodule Log"=サブモジュールログ
dlgSgLogOpenSubmoduleLinkOrRepository.fur=サブモジュールの更新履歴には、親リポジトリから見たサブモジュールリンク ('GITLINK') の変更が表示されます。サブモジュールリポジトリのログには、サブモジュールリポジトリ自身で発生したすべてのコミットが表示されます。
dlgSgLogOpenSubmoduleLinkOrRepository.hdl=サブモジュールの更新履歴またはサブモジュール リポジトリのログを表示しますか?
dlgSgLogOpenSubmoduleLinkOrRepository.tle=ログを開く
dlgSgLogRefActionsDeleteConfirm.btn"Delete Branch"=ブランチを削除
dlgSgLogRefActionsDeleteConfirm.fur=プッシュされていない変更が失われたり、ブランチの復元が複雑になったりする可能性があります。
dlgSgLogRefActionsDeleteConfirm.hdl%1=本当にローカルブランチ'$1'を削除しますか？
dlgSgLogRefActionsDeleteConfirm.tle=ローカルブランチを削除
dlgSgLogRefreshRepositoryInvalid.btn"Close Repository"=リポジトリを閉じる
dlgSgLogRefreshRepositoryInvalid.btn"Remove Repository"=リポジトリを削除
dlgSgLogRefreshRepositoryInvalid.fur%1=下記のリポジトリが削除されたか、SmartGit の外部で名前が変更された可能性があります。\n\n$1
dlgSgLogRefreshRepositoryInvalid.hdl%1=開いていたリポジトリ'$1'が無効になりました。
dlgSgLogRefreshRepositoryInvalid.tle=更新
dlgSgMerge.btn"Branches"=ブランチ
dlgSgMerge.btn"Create Merge-Commit"=マージリクエストを作成
dlgSgMerge.btn"Merge to Working Tree"=作業ツリーへマージ
dlgSgMerge.btn"Squash-Merge"=スカッシュマージ
dlgSgMerge.hdl=マージ
dlgSgMerge.inf=マージするブランチやコミットを選択し、それらをどのように作業ツリーにマージするかを決定します。
dlgSgMerge.mni"Copy ID"=IDをコピー
dlgSgMerge.mni"Copy Message"=メッセージをコピー
dlgSgMerge.mni"Refresh"=更新
dlgSgMerge.tle=マージ
dlgSgMergeConfirmNoCommit.btn"Merge"=マージ
dlgSgMergeConfirmNoCommit.fur=選択したリビジョンが作業ツリーにマージされます。\n\nGitFlow-master ブランチに直接マージすることは推奨されないことに注意してください。代わりに、hotfix を開始する必要があります。
dlgSgMergeConfirmNoCommit.hdl=マージを実行しますか?
dlgSgMergeConfirmNoCommit.tle=マージ
dlgSgMergeHowToMerge.btn"Create Merge-Commit"=マージリクエストを作成
dlgSgMergeHowToMerge.btn"Fast-Forward"=ファストフォワード
dlgSgMergeHowToMerge.btn"Merge to Working Tree"=作業ツリーへマージ
dlgSgMergeHowToMerge.btn"Squash-Merge"=スカッシュマージ
dlgSgMergeHowToMerge.fur=ファストフォワードマージは、現在のブランチ (HEAD) を選択されたコミットに進めることを意味します。\r別の方法として、マージコミットを作成したり、作業ツリーにマージしたりすることもできます。\r後者の場合、変更内容を確認し、後でマージコミットや通常の\(スカッシュ\)コミットを作成することができます。
#                      !=If there is no conflict, Git can automatically create a merge commit. Alternatively, you can opt to merge to the working tree.\nMerge to Working Tree will prepare a merge commit while Squash-Merge will prepare a normal commit \(discarding the information about what commits were merged\) - in both cases to be committed manually later.
dlgSgMergeHowToMerge.hdl"How to merge from branch '$1'?"=\
 ブランチ '$1' からどのようにマージしますか?
dlgSgMergeHowToMerge.hdl"How to merge from tag '$1'?"=\
 タグ '$1' からどのようにマージしますか?
dlgSgMergeHowToMerge.tle=マージ
dlgSgMergeNoop.fur=コミットをそれ自身にマージすることは、技術的にはGitで認められていますが、ノーオペレーション命令であり、新しいコミットやその他の意味のある変更を与えるものではありません。
dlgSgMergeNoop.hdl=マージするものはありません。
dlgSgMergeNoop.tle=マージ
dlgSgOpenRepository.edt"Repository"=リポジトリ
dlgSgOpenRepository.err"Please specify the root directory of a Git repository."=\
 Git リポジトリのルートディレクトリを指定してください。
dlgSgOpenRepository.hdl=既存のリポジトリを追加、または新しいリポジトリを作成
dlgSgOpenRepository.tle=リポジトリの追加又は作成
dlgSgOpenRepositoryInitializeGit.btn"Initialize"=初期化
dlgSgOpenRepositoryInitializeGit.fur=指定されたディレクトリは、有効な Git リポジトリではないようです。
dlgSgOpenRepositoryInitializeGit.hdl%1='$1' を新しい Git リポジトリとして初期化しますか?
dlgSgOpenRepositoryInitializeGit.tle=リポジトリの追加又は作成
dlgSgOpenRepositorySvnWorkingCopy.fur%1=SmartGit では不可能な既存の SVN 作業コピーを開こうとしています。代わりに、$1 を使用して、SVN リポジトリの Git クローン \(つまり、SVN ではなく Git に基づく作業コピー\) を作成してください。
dlgSgOpenRepositorySvnWorkingCopy.hdl=SVN作業コピーを開くことができません。SmartGitで再クローンしてください。
dlgSgOpenRepositorySvnWorkingCopy.tle=リポジトリの追加又は作成
dlgSgOutput.chk"Don't show again for these $1 warnings"=\
 これらの $1 警告については次回から表示しない
dlgSgOutput.chk"Don't show again for this warning"=\
 この警告は次回から表示しない
dlgSgOutput.chk"Show automatically for failed command"=失敗したコマンドを自動的に表示する
dlgSgOutput.lbl"Branches need merging first."=ブランチはまずマージする必要があります。
dlgSgOutput.lbl"Command Abort failed!"=コマンド「中止」に失敗しました!
dlgSgOutput.lbl"Command Apply Stash produced warnings."=
#                                                     !=Command Apply Stash produced warnings.
dlgSgOutput.lbl"Command Check Out Branch failed!"=コマンド 「ブランチのチェックアウト」に失敗しました!
dlgSgOutput.lbl"Command Check Out Branch produced warnings."=コマンド 「ブランチのチェックアウト」が警告を発しました。
#                                                          !=Command Check Out Branch produced warnings.
dlgSgOutput.lbl"Command Cherry-Pick failed!"=
#                                          !=Command Cherry-Pick failed!
dlgSgOutput.lbl"Command Cherry-Pick produced warnings."=コマンド 「チェリーピック」 が警告を発しました。
dlgSgOutput.lbl"Command Commit failed!"=コマンド 「コミット」に失敗しました!
dlgSgOutput.lbl"Command Discard failed!"=コマンド「破棄」に失敗しました!
dlgSgOutput.lbl"Command Fetch produced warnings."=コマンド 「フェッチ」 が警告を発しました。
#                                               !=Command Fetch produced warnings.
dlgSgOutput.lbl"Command Merge produced warnings."=コマンド 「マージ」 が警告を発しました。
#                                               !=Command Merge produced warnings.
dlgSgOutput.lbl"Command Move failed!"=
#                                   !=Command Move failed!
dlgSgOutput.lbl"Command Pull \(Rebase\) failed!"=コマンド 「プル \(リベース\)」 に失敗しました!
dlgSgOutput.lbl"Command Pull \(Rebase\) produced warnings."=コマンド 「プル \(リベース\)」で警告が発生しました。
dlgSgOutput.lbl"Command Push failed!"=
#                                   !=Command Push failed!
dlgSgOutput.lbl"Command Rebase failed!"=
#                                     !=Command Rebase failed!
dlgSgOutput.lbl"Command Rebase produced warnings."=
#                                                !=Command Rebase produced warnings.
dlgSgOutput.lbl"Command Reset failed!"=コマンド 'Reset' に失敗しました!
dlgSgOutput.lbl"Command Resolve produced warnings."=コマンド 「解決」 が警告を発しました。
#                                                 !=Command Resolve produced warnings.
dlgSgOutput.lbl"Command Start Support Branch failed!"=コマンド 「サポートブランチを開始」 に失敗しました!
dlgSgOutput.lbl"If in question, please ask your repository administrator."=\
 ご不明な点がありましたら、リポジトリ管理者にお問い合わせください。
dlgSgOutput.lbl"Not all refs have been pushed."=\
 すべての参照がプッシュされたわけではありません。
dlgSgOutput.lbl"The working tree has local changes."=
#                                                  !=The working tree has local changes.
dlgSgOutput.lbl"Your local changes to the following files would be overwritten by checkout:\ncould not detach HEAD"=\
 次のファイルに対するローカルの変更は、チェックアウトによって上書きされます:\n HEAD をデタッチできませんでした
dlgSgOutput.tle"Command Failed"=コマンドの失敗
dlgSgOutput.tle"Command Output"=コマンド出力
dlgSgOutput.tle"Command Succeeded"=コマンドが成功しました
dlgSgOutput.tle"Output"=出力
dlgSgPingRepositoryFailed.fur%1=リポジトリURLを確認してください。\n\n$1
dlgSgPingRepositoryFailed.hdl%1=リポジトリ'$1'に接続できませんでした。
dlgSgPingRepositoryFailed.tle=クローン
dlgSgPreferences.btn"Actions"=アクション
#                           !=Actions
dlgSgPreferences.btn"Add"=追加
dlgSgPreferences.btn"Assign"=割り当て
dlgSgPreferences.btn"Change Master Password"=マスターパスワードの変更
dlgSgPreferences.btn"Clear Cache"=キャッシュをクリア
dlgSgPreferences.btn"Clear"=クリア
dlgSgPreferences.btn"Copy"=コピー
dlgSgPreferences.btn"Edit"=編集
dlgSgPreferences.btn"Export"=エクスポート
dlgSgPreferences.btn"I accept the risk!"=リスクを受け入れて続行する
dlgSgPreferences.btn"Import"=インポート
dlgSgPreferences.btn"Move Down"=下へ
dlgSgPreferences.btn"Move Up"=上へ
dlgSgPreferences.btn"Re-Add Defaults"=デフォルト項目を追加し直す
dlgSgPreferences.btn"Remove All"=全て削除
dlgSgPreferences.btn"Remove"=除去
dlgSgPreferences.btn"Reset to Defaults"=デフォルトにリセット
dlgSgPreferences.btn"Reset"=リセット
dlgSgPreferences.btn"Show Password"=パスワードを表示
dlgSgPreferences.cdl"Authentication"=認証
dlgSgPreferences.cdl"Background Commands"=バックグラウンド処理
dlgSgPreferences.cdl"Built-in Text Editors"=内蔵テキストエディタ
dlgSgPreferences.cdl"Commands"=コマンド
dlgSgPreferences.cdl"Conflict Solvers"=コンフリクトソルバー
dlgSgPreferences.cdl"Diff Tools"=比較ツール
dlgSgPreferences.cdl"Executables"=実行可能ファイル
dlgSgPreferences.cdl"Git Config"==Git Config
dlgSgPreferences.cdl"Git Executable"=Git 実行ファイル
dlgSgPreferences.cdl"Hosting Providers"=ホスティングプロバイダ
dlgSgPreferences.cdl"Keyboard Shortcuts"=キーボード ショートカット
dlgSgPreferences.cdl"Log and Working Tree window"=ログとワーキングツリーウィンドウ
dlgSgPreferences.cdl"Log"=ログ
dlgSgPreferences.cdl"Low-level Properties"=ローレベルプロパティ
dlgSgPreferences.cdl"Privacy"=プライバシー
dlgSgPreferences.cdl"Proxy"=プロキシ
dlgSgPreferences.cdl"Refresh"=更新
dlgSgPreferences.cdl"SmartGit Updates"=SmartGitの更新
dlgSgPreferences.cdl"Spell Checker"=スペルチェッカー
dlgSgPreferences.cdl"Standard Window"=スタンダードウィンドウ
dlgSgPreferences.cdl"Tools"=ツール
dlgSgPreferences.cdl"User Interface"=ユーザインタフェース
dlgSgPreferences.chk"Add untracked files"=追跡されていないファイルの追加
dlgSgPreferences.chk"Allow all commands on stash and pull request commits"=\
 スタッシュとプルリクエストのコミットにすべてのコマンドを許可する
dlgSgPreferences.chk"Allow modifying pushed commits \(e.g. forced-push\)"=\
 プッシュされたコミットの修正を許可する (例: force-push)
dlgSgPreferences.chk"Allow to open multiple Log windows for the same repository/file"=\
 同一のリポジトリ/ファイルに対して複数のログウィンドウを開くことを許可する
dlgSgPreferences.chk"Also detect renames for untracked and missing files"=\
 トラックされていないファイルや行方不明のファイルのリネームも検出します。
dlgSgPreferences.chk"Always fetch new commits, tags and branches from submodule"=\
 サブモジュールから常に新しいコミット、タグ、ブランチを取得する
dlgSgPreferences.chk"Ask for master password on startup"=\
 起動時にマスターパスワードの入力を求める
dlgSgPreferences.chk"Autoindent new lines"=改行時のオートインデント
dlgSgPreferences.chk"Automatically save stash on common commands, if they fail due to local changes"=\
 一般的なコマンドがローカルの変更により失敗した場合、自動的にstashで変更内容を退避する
dlgSgPreferences.chk"Automatically send 'crash footprints' after an internal error has occurred"=\
 内部エラー発生後、自動的に「クラッシュフットプリント」を送信
dlgSgPreferences.chk"Automatically set up tracking for new branches \(requires push.default to be unset\)"=\
 新しいブランチのトラッキングを自動的に設定する\(push.defaultが未設定の必要があります。\）
dlgSgPreferences.chk"Automatically set up tracking for new branches"=\
 新規ブランチの追跡を自動的に設定
dlgSgPreferences.chk"Begin of line: jump to first non-whitespace character"=\
 行頭：最初の非ホワイトスペース文字にジャンプする
dlgSgPreferences.chk"Closed 'favorite' repositories"=閉じた「お気に入り」リポジトリ
dlgSgPreferences.chk"Compare with working tree, even if all changes are staged"=\
 すべての変更がステージングされていても、作業ツリーと比較する
dlgSgPreferences.chk"Detect local changes in closed 'favorite' repositories"=\
 閉じた「お気に入り」リポジトリのローカルな変更の検出
dlgSgPreferences.chk"Detect remote changes"=リモートの変更の検出
dlgSgPreferences.chk"Detect renames \(for added and removed files, as command line Git does\)"=\
 リネームの検出（コマンドラインGitと同様に、追加されたファイルと削除されたファイルの検出）
dlgSgPreferences.chk"Distinguish between content and EOL-only changes \(slightly more expensive\)"=\
 コンテンツとEOLのみの変更を区別する（やや高コストな処理）
dlgSgPreferences.chk"Enable integration for configured hosting providers \(pull requests, comments\)"=\
 設定済みのホスティングプロバイダーの統合を可能にする（プルリクエスト、コメント）
dlgSgPreferences.chk"Focus next change after accepting change \(Take Left/Take Right\)"=\
 変更を確認した後、次の変更点にフォーカスする \(左に移動/右に移動\)
dlgSgPreferences.chk"For Preview versions, automatically download the latest build"=\
 プレビューバージョンの場合、最新のビルドを自動的にダウンロードします。
dlgSgPreferences.chk"For ambiguous protocols like 'https', show dialog to choose between Git and SVN clone"=\
 http のような曖昧なプロトコルでは、GitとSVNのクローンを選択するダイアログを表示します。
#!=For ambiguous protocols like 'https', show dialog to choose between Git and SVN clone
dlgSgPreferences.chk"Highlight current line in text content"=\
 現在の行をハイライトする
dlgSgPreferences.chk"Home and end: operate on line, not the document"=\
 Home , End キー : ドキュメントではなく、行に対して操作する
dlgSgPreferences.chk"Include untracked files"=追跡されていないファイルを含める
dlgSgPreferences.chk"Initialize new submodules"=新しいサブモジュールを初期化
dlgSgPreferences.chk"Left and right cursor moves: limit to current line"=\
 左右のカーソル移動：現在の行に制限
dlgSgPreferences.chk"Open repositories when idle"=アイドル時にリポジトリを開く
dlgSgPreferences.chk"Open the last used repositories"=最後に使ったリポジトリを開く
dlgSgPreferences.chk"Periodically invoke Git's garbage collection when idle"=\
 アイドル時にGitのガベージコレクションを定期的に呼び出す
dlgSgPreferences.chk"Preselect 'Staged' if files are staged, even if a file without staged changes is selected"=\
 ファイルがステージングされている場合、ステージングされていない変更のないファイルが選択されていても、「ステージング」を事前に選択する。
dlgSgPreferences.chk"Proxy requires authentication"=プロキシに認証が必要
dlgSgPreferences.chk"Prune obsolete remote tracked branches"=不要になったリモートトラッキングブランチを整理
dlgSgPreferences.chk"Push all tags"=全てのタグをプッシュ
dlgSgPreferences.chk"Refresh file system also while SmartGit is in background"=\
 SmartGit がバックグラウンド動作している間、ファイルシステムを更新する
dlgSgPreferences.chk"Remember from last used single Log or Working Tree window"=\
 最後に使用したウィンドウタイプ(ロググラフ or ワーキングツリー)を記憶する
dlgSgPreferences.chk"Remove leading and trailing whitespace from commit message"=\
 コミットメッセージから先頭と末尾のホワイトスペースを削除する
dlgSgPreferences.chk"Remove missing files"=見つからないファイルの削除
dlgSgPreferences.chk"Restore all confirmation dialogs"=すべての確認ダイアログを復元する
dlgSgPreferences.chk"Send 'crash footprints' after an internal error has occurred"=\
 内部エラー発生後、「クラッシュフットプリント」を送信
dlgSgPreferences.chk"Send usage statistics"=使用状況の統計情報の送信
dlgSgPreferences.chk"Show also the resolve dialog for external conflict solvers"=\
 外部のコンフリクトソルバーの解決ダイアログも表示する
dlgSgPreferences.chk"Show chooser dialog if multiple entries match"=\
 複数のエントリーが一致した場合、選択ダイアログを表示
dlgSgPreferences.chk"Show line length guides \(only useful for monospaced-font\)"=\
 コミットメッセージ入力欄に行の長さのガイドを表示する（等幅フォントの場合に有用）
dlgSgPreferences.chk"Show verbose date for last days, e.g. Yesterday"=\
 過去の日の詳細な日付を表示する（例：Yesterday
dlgSgPreferences.chk"Show welcome dialog if no repository has been reopened"=\
 リポジトリが再オープンされていない場合、ウェルカムダイアログを表示する。
dlgSgPreferences.chk"Sign all commits"=すべてのコミットに署名する
dlgSgPreferences.chk"Swap 'ours' and 'theirs' on Rebase conflicts for easier understanding"=\
 リベースの競合で'ours'と'theirs'を入れ替えて理解しやすくする。
dlgSgPreferences.chk"Tab enters and Backspace deletes multiple leading spaces"=\
 Tabキーで複数のスペースを入力し、Backspaceキーで先頭の複数個のスペースを削除する
dlgSgPreferences.chk"Trim whitespace"=空白を削除する
dlgSgPreferences.chk"Update registered submodules"=登録されたサブモジュールの更新
dlgSgPreferences.chk"Use gravatar.com to show images for the users"=\
 gravatar.comを使用してユーザーアイコンを表示する
dlgSgPreferences.chk"Use indentation from previous non-empty line"=\
 空白でない前の行のインデントを使用
dlgSgPreferences.chk"Use pre-installed \(\"system\"\) Git-Flow\*"=プリインストールされた\("system"\) Git-Flowの使用\*
dlgSgPreferences.chk"Warn for slow rename detection"=リネームの検出に時間がかかる場合は警告する
dlgSgPreferences.cmb"Automatically select light/dark \(recommended\)"=
#                                                                   !=Automatically select light/dark \(recommended\)
dlgSgPreferences.cmb"Automatically select light/dark"=自動的にライト/ダークを選択
#                                                   !=Automatically select light/dark
dlgSgPreferences.cmb"Custom..."=
#                             !=Custom...
dlgSgPreferences.cmb"Dark \(independent of system\)"=ダーク \(システムに依存しない\)
#                                                  !=Dark \(independent of system\)
dlgSgPreferences.cmb"Don't reopen the last used repositories"=
#                                                           !=Don't reopen the last used repositories
dlgSgPreferences.cmb"Light \(independent of system\)"=ライト \(システムに依存しない\)
#                                                   !=Light \(independent of system\)
dlgSgPreferences.cmb"Open the last used repositories in the startup window"=
#                                                                         !=Open the last used repositories in the startup window
dlgSgPreferences.cmb"Open the last used repositories in their last used window"=
#                                                                             !=Open the last used repositories in their last used window
dlgSgPreferences.cmb"abort if any needs to be pushed"=
#                                                   !=abort if any needs to be pushed
dlgSgPreferences.cmb"ignore submodules"=
#                                     !=ignore submodules
dlgSgPreferences.cmb"push submodules first"=
#                                         !=push submodules first
dlgSgPreferences.col"Accelerator"=ショートカット
dlgSgPreferences.col"Account"=アカウント
dlgSgPreferences.col"Applies To"=適用対象
dlgSgPreferences.col"Arguments"=引数
dlgSgPreferences.col"Command + Arguments"=コマンドと引数
dlgSgPreferences.col"Command"=コマンド
dlgSgPreferences.col"Default"=デフォルト
dlgSgPreferences.col"Details"=詳細
dlgSgPreferences.col"Dictionary File"=辞書ファイル
dlgSgPreferences.col"File Pattern"=ファイルパターン
dlgSgPreferences.col"Key"=キー
dlgSgPreferences.col"Language"=言語
dlgSgPreferences.col"Name"=名前
dlgSgPreferences.col"Patterns"=パターン
dlgSgPreferences.col"Repository"=リポジトリ
dlgSgPreferences.col"Shortcut"=ショートカット
dlgSgPreferences.col"Value"=値
dlgSgPreferences.edt"Comments in Message"=メッセージ内のコメント
#                                       !=Comments in Message
dlgSgPreferences.edt"Date Format\*"=日付形式\*
dlgSgPreferences.edt"Double-Clicking Local File"=ローカルファイルのダブルクリック
dlgSgPreferences.edt"Email"=電子メール
dlgSgPreferences.edt"Example"=例
dlgSgPreferences.edt"Fetch"=フェッチ
dlgSgPreferences.edt"File Double-Click"=ファイルのダブルクリック
dlgSgPreferences.edt"File Name Matches\*"=ファイル名の一致\*
dlgSgPreferences.edt"Font Family"=フォント
dlgSgPreferences.edt"Font Size"=フォントサイズ
dlgSgPreferences.edt"Functionality\*"=機能性\*
dlgSgPreferences.edt"GPG Program"=GPG プログラム
dlgSgPreferences.edt"Git Executable"=Git 実行ファイル
dlgSgPreferences.edt"Host"=ホスト
dlgSgPreferences.edt"If nothing is staged"=ステージングされていない場合
#                                        !=If nothing is staged
dlgSgPreferences.edt"Known credentials"=既知の資格情報
dlgSgPreferences.edt"Language\*"=言語\*
dlgSgPreferences.edt"Name"=名前
dlgSgPreferences.edt"On startup"=起動時
dlgSgPreferences.edt"Password"=パスワード
dlgSgPreferences.edt"Port"=ポート
dlgSgPreferences.edt"Prefer"==Prefer
dlgSgPreferences.edt"Preview"=プレビュー
dlgSgPreferences.edt"Shortcut"=ショートカット
dlgSgPreferences.edt"Signing Key"=署名キー
dlgSgPreferences.edt"Startup Window\*"=スタートアップウィンドウ\*
dlgSgPreferences.edt"Submodule handling\*"=サブモジュールの取り扱い\*
dlgSgPreferences.edt"Suggest to"=提案する
dlgSgPreferences.edt"Text File Encoding"=テキストファイルのエンコーディング
dlgSgPreferences.edt"Theme"=テーマ
dlgSgPreferences.edt"Theme\*"=テーマ\*
dlgSgPreferences.edt"Time Format\*"=時間形式\*
dlgSgPreferences.edt"Username"=ユーザ名
dlgSgPreferences.hnt"No low-level property matches the entered filter."=
#                                                                     !=No low-level property matches the entered filter.
dlgSgPreferences.hnt"No modified low-level properties.\nStart searching by typing."=変更されたローレベルプロパティはありません。\n検索をするには、文字列を入力してください。
#                                                                                 !=No modified low-level properties.\nStart searching by typing.
dlgSgPreferences.hnt"Search"=検索
dlgSgPreferences.lbl"A sample 'crash footprint' can be found in the \[https://docs.syntevo.com/SmartGit/Latest/Bug-Reports.html documentation\]."=サンプルの 'クラッシュフットプリント' は、\[ドキュメント https://docs.syntevo.com/SmartGit/Latest/Bug-Reports.html\] にあります。
#                                                                                                                                               !=A sample 'crash footprint' can be found in the \[https://docs.syntevo.com/SmartGit/Latest/Bug-Reports.html documentation\].
dlgSgPreferences.lbl"All directories"=すべてのディレクトリ
#                                   !=All directories
dlgSgPreferences.lbl"All files"=すべてのファイル
#                             !=All files
dlgSgPreferences.lbl"All files/directories"=すべてのファイル/ディレクトリ
#                                         !=All files/directories
dlgSgPreferences.lbl"All"=全て
#                       !=All
dlgSgPreferences.lbl"Application can be updated manually in the About dialog"=\
 アプリケーションは、[SmartGitについて] ダイアログで手動で更新できます
dlgSgPreferences.lbl"Built-in Conflict Solver"=内蔵のコンフリクトソルバー
#                                            !=Built-in Conflict Solver
dlgSgPreferences.lbl"Built-in file compare"=内蔵の比較ツール
#                                         !=Built-in file compare
dlgSgPreferences.lbl"Changing these low-level properties can be harmful to the stability or performance of SmartGit. You should only continue if you are sure of what you are doing. Changed properties with a trailing \* need a restart to be applied."=\
 ローレベルのプロパティを変更すると、SmartGitの安定性や性能に悪影響を及ぼす可能性があります。\r自分が何をしているのか確信が持てる場合のみ、作業を続行するべきです。\r変更したプロパティの末尾に\*が付いている場合は、再起動が必要です。
dlgSgPreferences.lbl"Clone"=クローン
#                         !=Clone
dlgSgPreferences.lbl"Commit Dialog"=コミットダイアログ
#                                 !=Commit Dialog
dlgSgPreferences.lbl"Commit View"=コミットビュー
#                               !=Commit View
dlgSgPreferences.lbl"Commit"=コミット
#                          !=Commit
dlgSgPreferences.lbl"Define external tools which will show up in the Tools menu. Those marked with a leading \* in front of the name can be used by the Open command."=\
 ツールメニューに表示される外部ツールを定義します。名前の前に「\*」が付いているものは、「開く」コマンドで使用できます。
dlgSgPreferences.lbl"Diff tool:"=比較ツール:
#                              !=Diff tool:
dlgSgPreferences.lbl"External tool:"=外部ツール:
#                                  !=External tool:
dlgSgPreferences.lbl"Garbage Collector"=ガベージコレクタ
#                                     !=Garbage Collector
dlgSgPreferences.lbl"Here you can edit your account's 'gitconfig' which contains the defaults for all repositories."=\
 ここでは、あなたのアカウントの 'gitconfig' を編集することができます。この設定には、すべてのリポジトリのデフォルト値が含まれています。
dlgSgPreferences.lbl"Here you can view your account's 'gitconfig'. Because it contains 'include'-sections you need to edit it manually."=\
 ここでは、あなたのアカウントの 'gitconfig' を見ることができます。この設定には 'include' セクションが含まれているため、手動で編集する必要があります。
dlgSgPreferences.lbl"If you are using SSH to connect to other Git repositories, select what SSH client to use."=\
 SSHを使って他のGitリポジトリに接続する場合は、使用するSSHクライアントを選択します。
dlgSgPreferences.lbl"In order to use all SmartGit functionality, you need to have command line Git installed on your system. Provide here the full path to the installed 'git' executable."=\
 SmartGitのすべての機能を使用するには、システムにコマンドラインGitがインストールされている必要があります。インストールした'git'実行ファイルのフルパスを入力してください。
dlgSgPreferences.lbl"Local and Remote Changes"=ローカルとリモートの変更
#                                            !=Local and Remote Changes
dlgSgPreferences.lbl"Note: The password will be stored in plain text in SmartGit's configuration area!"=\
 注：パスワードは、SmartGitの設定領域にプレーンテキストで保存されます。
dlgSgPreferences.lbl"Page title"=ページタイトル
#                              !=Page title
dlgSgPreferences.lbl"Please help to improve SmartGit's quality by automatically sending 'crash footprints' and usage statistics. Sent data contains \*no potentially sensitive information\* like user names, email addresses, file contents, file paths or server names."=「クラッシュ フットプリント」と使用状況統計を自動的に送信することで、SmartGit の品質向上にご協力ください。送信されるデータには、ユーザー名、メールアドレス、ファイルの内容、ファイル パス、サーバー名など、\*機密情報となりうる情報は含まれていません。\*
#                                                                                                                                                                                                                                                                        !=Please help to improve SmartGit's quality by automatically sending 'crash footprints' and usage statistics. Sent data contains \*no potentially sensitive information\* like user names, email addresses, file contents, file paths or server names.
dlgSgPreferences.lbl"Please help to improve SmartGit's quality by automatically sending 'crash footprints' which do not contain any sensitive information. You can change this option later in the preferences.\n\nA 'crash footprint' contains details about your machine \(e.g. version of operating system\), SmartGit's version/build number, the JVM state and where the internal error occurred.\n\nIt contains NO POTENTIALLY SENSITIVE INFORMATION like user names, email addresses, file contents, file paths or server names."=\
 「クラッシュ フットプリント」と使用状況統計を自動的に送信することで、SmartGit の品質向上にご協力ください。 " このオプションは、後で [環境設定] で変更できます。\n\n「クラッシュ フットプリント」には、お使いのマシンの詳細（オペレーティング システムのバージョンなど）、SmartGit のバージョン/ビルド番号、JVM の状態、内部エラーが発生した場所などが含まれていますが、ユーザー名、電子メール アドレス、ファイルの内容、ファイル パス、サーバー名など、機密情報になりうる可能性のある情報は一切含まれていません。
dlgSgPreferences.lbl"Preview:"=プレビュー:
#                            !=Preview:
dlgSgPreferences.lbl"Push"=プッシュ
#                        !=Push
dlgSgPreferences.lbl"Refresh"=更新
#                           !=Refresh
dlgSgPreferences.lbl"Stash"=スタッシュ
#                         !=Stash
dlgSgPreferences.lbl"The last check was performed on $1."=前回のチェックは $1 に実施されました。
#                                                       !=The last check was performed on $1.
dlgSgPreferences.lbl"The proxy is primarily used for the Check for New Version. It will also be used for Git HTTP\(s\) connections if no reasonable system proxy configuration seems to be present already \(see documentation for details\)."=\
 このプロキシは、主に「新しいバージョンの確認」に使用されます。\rシステムのプロキシ設定が適切でない場合には、Git HTTP\(S\)の接続にも使用されます。(詳細はドキュメントを参照してください)
dlgSgPreferences.lbl"This file will be sent as is: $1"=\
 このファイルはそのまま送信されます: $1
dlgSgPreferences.lbl"To manually update in-place use the '...' button located next to the version number in the About dialog."=手動でインプレースアップデートするには、バージョン情報ダイアログのバージョン番号の横にある「...」ボタンを使用します。
#                                                                                                                            !=To manually update in-place use the '...' button located next to the version number in the About dialog.
dlgSgPreferences.lbl"When comparing files, this list is searched from top to bottom to find a matching diff tool. If none is found, the built-in file compare is used for text files."=\
 ファイルを比較する際には、このリストを上から下に向かって検索し、一致する 比較 ツールを探します。\r見つからない場合は、テキスト ファイルの場合は内蔵のファイル比較が使用されます。
dlgSgPreferences.lbl"When invoking the Conflict Solver feature, this list is searched from top to bottom to find a matching entry. If none is found, the built-in Conflict Solver is used for text files."=\
 コンフリクトソルバー機能を呼び出すと、このリストを上から下へ検索し、一致するエントリーを探します。\r見つからない場合は、テキストファイル用の組み込みのコンフリクトソルバーが使用されます。
dlgSgPreferences.lbl"You may configure hosting provider accounts to simplify accessing your hosted repositories or to enable the GitHub pull request and comment features."=\
 ホスティングプロバイダーのアカウントを設定して、ホストされているリポジトリへのアクセスを簡素化したり、GitHubのプルリクエストやコメント機能を有効にしたりすることができます。
dlgSgPreferences.lbl"\* if repository commit references non-pushed submodule commit"=\
 \* リポジトリのコミットがプッシュされていないサブモジュールのコミットを参照している場合
dlgSgPreferences.lbl"\*\) these options require an application restart to be applied"=\
 \*\) これらのオプションを適用するには、アプリケーションの再起動が必要です
dlgSgPreferences.lbl"\*\) this option requires an application restart to be applied"=\
 \*\) このオプションを適用するには、アプリケーションの再起動が必要です
dlgSgPreferences.lbl"directories"=
#                               !=directories
dlgSgPreferences.lbl"easy to set up and use, supports public key and password authentication"=\
 公開鍵認証とパスワード認証に対応し、簡単に設定・使用できます。
dlgSgPreferences.lbl"files"=
#                         !=files
dlgSgPreferences.lbl"files/directories"=
#                                     !=files/directories
dlgSgPreferences.lbl"may be harder to configure and use for new users, but is more flexible"=\
 新しいユーザーにとっては設定や使い方が難しいかもしれませんが、より柔軟性があります。
dlgSgPreferences.mni"Accelerator"=ショートカット
dlgSgPreferences.mni"Account"=アカウント
dlgSgPreferences.mni"Applies To"=適用対象
dlgSgPreferences.mni"Arguments"=引数
dlgSgPreferences.mni"Command + Arguments"=コマンドと引数
dlgSgPreferences.mni"Command"=コマンド
dlgSgPreferences.mni"Copy Key"=キーをコピー
dlgSgPreferences.mni"Copy Selection in Column"=この列の選択範囲をコピーする
dlgSgPreferences.mni"Default"=デフォルト
dlgSgPreferences.mni"Details"=詳細
dlgSgPreferences.mni"Dictionary File"=辞書ファイル
dlgSgPreferences.mni"Edit"=編集
dlgSgPreferences.mni"Export"=エクスポート
#                          !=Export
dlgSgPreferences.mni"File Pattern"=ファイルパターン
dlgSgPreferences.mni"Import"=インポート
#                          !=Import
dlgSgPreferences.mni"Language"=言語
dlgSgPreferences.mni"Name"=名前
dlgSgPreferences.mni"Patterns"=パターン
dlgSgPreferences.mni"Repository"=リポジトリ
dlgSgPreferences.mni"Reset All to Defaults"=すべての設定をデフォルトに戻す
#                                         !=Reset All to Defaults
dlgSgPreferences.mni"Reset to Default"=デフォルトにリセット
dlgSgPreferences.mni"Reset"=リセット
dlgSgPreferences.mni"Select"=選択
dlgSgPreferences.mni"Shortcut"=ショートカット
dlgSgPreferences.mni"Swap"=入れ替え
dlgSgPreferences.rbt"Advanced \(merge, rebase, ignore, stashes, tags, history modifications\)"=\
 Advanced \(マージ、リベース、無視、スタッシュ、タグ、履歴の修正\)
dlgSgPreferences.rbt"Ask if potential comments are detected"=潜在的なコメントが検出された場合に尋ねる
#                                                          !=Ask if potential comments are detected
dlgSgPreferences.rbt"Ask"=尋ねる
#                       !=Ask
dlgSgPreferences.rbt"Auto-detect the system proxy"=システムプロキシを自動検出
dlgSgPreferences.rbt"Automatically download and install updates"=アップデートを自動的にダウンロードしてインストールする
dlgSgPreferences.rbt"Basic \(for simple workflows\)"=Basic \(シンプルなワークフロー向け\)
dlgSgPreferences.rbt"Check and report new updates"=新しいアップデートの確認と通知
dlgSgPreferences.rbt"Commit all, except of untracked files"=追跡されていないファイルを除くすべてをコミットする
#                                                         !=Commit all, except of untracked files
dlgSgPreferences.rbt"Commit all, including untracked files"=追跡されていないファイルを含むすべてをコミットする
#                                                         !=Commit all, including untracked files
dlgSgPreferences.rbt"Dark"=ダーク
dlgSgPreferences.rbt"Do not check for new updates"=\
 アップデートを確認しない
dlgSgPreferences.rbt"Don't use a proxy"=プロキシを使わない
dlgSgPreferences.rbt"Exact case \('Foo' will match 'Foo', but not 'foo'\)"=\
 大文字小文字を区別する
dlgSgPreferences.rbt"Ignore case \('Foo' will match 'Foo' and 'foo'\)"=\
 大文字小文字を区別しない
dlgSgPreferences.rbt"Light"=ライト
dlgSgPreferences.rbt"Log Graph"=ロググラフ
dlgSgPreferences.rbt"Log graph \(commit oriented\)"=ロググラフ \(コミット中心\)
dlgSgPreferences.rbt"Prefer light-weight updates stored in home directory"=\
 ホームディレクトリに保存される軽量なアップデート
dlgSgPreferences.rbt"Show changes or open"=変更を表示または開く
dlgSgPreferences.rbt"Shows changes or opens the file"=\
 変更を表示するか、ファイルを開きます
dlgSgPreferences.rbt"Smart upper case \('FoB' will match 'FooBar', but neither 'foobar' nor 'Fob'\)"=\
 Smart upper case  \('FoB'は'FooBar'にマッチしますが、'foobar'でも'Fob'にはマッチしません\)
dlgSgPreferences.rbt"Stage or unstage"=ステージまたはアンステージ
dlgSgPreferences.rbt"Stages or unstages changes"=変更のステージングまたはステージング解除
dlgSgPreferences.rbt"Standard \(workflow oriented\)"=スタンダード\(ワークフロー中心\)
dlgSgPreferences.rbt"Strip comments \(lines starting with 'core.commentChar'\)"=コメントを削除する\('core.commentChar'で始まる行\)
#                                                                             !=Strip comments \(lines starting with 'core.commentChar'\)
dlgSgPreferences.rbt"Update SmartGit application in-place \(may require administrator permissions\)"=\
 インプレースでSmartGitを更新する \(管理者権限が必要な場合があります\)
dlgSgPreferences.rbt"Use SmartGit as SSH client"=SmartGitをSSHクライアントとして使用
dlgSgPreferences.rbt"Use following proxy"=以下のプロキシを使用
dlgSgPreferences.rbt"Use message as-is \(don't strip comments\)"=メッセージをそのまま使用する\(コメントを削除しない\)
#                                                              !=Use message as-is \(don't strip comments\)
dlgSgPreferences.rbt"Use system SSH client"=システムSSHクライアントの使用
dlgSgPreferences.rbt"Working Tree"=ワーキングツリー
dlgSgPreferences.rbt"Working tree \(file oriented\)"=作業ツリー \(ファイル中心\)
dlgSgPreferences.tab"Behavior"=動作
dlgSgPreferences.tab"Colors"=色
dlgSgPreferences.tab"Encoding"=エンコーディング
dlgSgPreferences.tab"Fetch and Pull"=フェッチとプル
#                                  !=Fetch and Pull
dlgSgPreferences.tab"Font and Colors"=フォントと色
#                                   !=Font and Colors
dlgSgPreferences.tab"Font"=フォント
dlgSgPreferences.tab"Languages"=言語
dlgSgPreferences.tab"Pull"=プル
dlgSgPreferences.tab"Push"=プッシュ
dlgSgPreferences.tab"Signing"=署名
dlgSgPreferences.tab"User"=ユーザー
dlgSgPreferences.tle=環境設定
dlgSgPreferences.ttpGroupPatterns"<b>Custom labels</b>"=<b>カスタムラベル</b>
#                                                     !=<b>Custom labels</b>
dlgSgPreferences.ttpGroupPatterns"<b>Grouping logic</b>"=<b>グループ化のロジック</b>
#                                                      !=<b>Grouping logic</b>
dlgSgPreferences.ttpGroupPatterns"<b>Multiple group patterns</b>"=<b>複数のグループパターン</b>
#                                                               !=<b>Multiple group patterns</b>
dlgSgPreferences.ttpGroupPatterns"Patterns will show up in the GUI using auto-generated labels which are derived from their regular expression. You can assign a custom label <tt>label</tt> to a pattern by prefixing it by <tt>label:</tt>; a label may only contain letters, digits and '_'."=パターンは、その正規表現から派生した自動生成されたラベルを使用してGUIに表示されます。ラベルには、<tt>label:</tt> という接頭辞を付けて <tt>label</tt> を割り当てることができます。ラベルには、文字、数字、'_' のみ使用できます。
#                                                                                                                                                                                                                                                                                              !=Patterns will show up in the GUI using auto-generated labels which are derived from their regular expression. You can assign a custom label <tt>label</tt> to a pattern by prefixing it by <tt>label:</tt>; a label may only contain letters, digits and '_'.
dlgSgProcessKiller.btn"Kill Process"=強制終了
dlgSgProcessKiller.btn"Wait"=待機
dlgSgProcessKiller.lbl"If you think the process is hanging, click the 'Kill Process' button, otherwise 'Wait'."=\
 プロセスがハングしていると思われる場合は、[強制終了] ボタンをクリックします。それ以外の場合は [待機] ボタンをクリックします。
dlgSgProcessKiller.tle=プロセスが応答していません
dlgSgProviderPullRequestCreateNoTargetRepositories.fur=リポジトリはGitHubフォークではなく、このリポジトリのフォークである他のリモートはありません。
dlgSgProviderPullRequestCreateNoTargetRepositories.hdl=ターゲットリポジトリが見つかりません。
dlgSgProviderPullRequestCreateNoTargetRepositories.tle=プルリクエストを作成
dlgSgProviderPullRequestCreatePushLocalCommits.btn"Push"=プッシュ
#                                                      !=Push
dlgSgProviderPullRequestCreatePushLocalCommits.btn"Skip"=スキップ
#                                                      !=Skip
dlgSgProviderPullRequestCreatePushLocalCommits.fur=サーバー側のプロバイダーリポジトリにまだ存在していないローカル コミットがあります。今すぐプッシュしない限り、これらのローカル コミットはマージリクエストに含まれません。
#                                                !=You have local commits which are not yet present in the server-side Provider repository. Unless you push them now, these local commits will not be included in the merge request.
dlgSgProviderPullRequestCreatePushLocalCommits.hdl=最初にローカルのコミットをプッシュしますか?
#                                                !=Do you want to push your local commits first?
dlgSgProviderPullRequestCreatePushLocalCommits.tle=マージリクエストを作成
#                                                !=Create Merge Request
dlgSgProviderPullRequestDropConfirmMr.btn"Drop"=削除
dlgSgProviderPullRequestDropConfirmMr.fur=マージリクエスト自体はサーバー上で削除されません。
dlgSgProviderPullRequestDropConfirmMr.hdl%1=本当にマージリクエスト$1のローカルコミットを削除しますか?
dlgSgProviderPullRequestDropConfirmMr.tle=マージ リクエストの削除
dlgSgProviderPullRequestDropConfirmPr.btn"Drop"=削除
dlgSgProviderPullRequestDropConfirmPr.fur=プルリクエスト自体はサーバー上で削除されることはありません。
dlgSgProviderPullRequestDropConfirmPr.hdl%1=プルリクエスト $1 のローカルコミットを本当に削除しますか?
dlgSgProviderPullRequestDropConfirmPr.tle=プルリクエストの削除
dlgSgProviderPullRequestRetractMr.btn"Retract"=取り消す
dlgSgProviderPullRequestRetractMr.edt"Comment"=コメント
dlgSgProviderPullRequestRetractMr.hdl=マージリクエストの取り消し
dlgSgProviderPullRequestRetractMr.inf=クローズされたマージリクエストと共にログに記録されるコメントを入力します。
dlgSgProviderPullRequestRetractMr.tle=マージリクエストの取り消し
dlgSgProviderPullRequestRetractPr.btn"Retract"=取り消す
dlgSgProviderPullRequestRetractPr.edt"Comment"=コメント
dlgSgProviderPullRequestRetractPr.hdl=プルリクエストの取り消し
dlgSgProviderPullRequestRetractPr.inf=クローズされたプルリクエストと共にログに記録されるコメントを入力します。
dlgSgProviderPullRequestRetractPr.tle=プルリクエストの取り消し
dlgSgPull.btn"Fetch Only"=フェッチのみ
dlgSgPull.btn"Pull"=プル
dlgSgPull.chk"Fetch from all remotes"=すべてのリモートからフェッチする
dlgSgPull.chk"More Options"=追加のオプション
dlgSgPull.chk"Remember as default for repository"=リポジトリのデフォルトとして記憶する
dlgSgPull.chk"Update existing and fetch new tags"=\
 既存のタグの更新と新しいタグの取得
dlgSgPull.edt"Fetch From"=フェッチ元
dlgSgPull.hdl=リモートリポジトリからコミットをプル
dlgSgPull.inf"In contrast to Fetch Only, Pull will also incorporate the fetched changes \(expand the options below to configure\)."=\
 「フェッチのみ」と対照的に、「プル」ではフェッチされた変更点も取り込まれます。
dlgSgPull.inf"Select the remote repository to pull. In contrast to Fetch Only, Pull will also incorporate the fetched changes \(expand the options below to configure\)."=\
 プルするリモート リポジトリを選択します。フェッチのみとは対照的に、プルはフェッチされた変更も取り込みます。 （以下のオプションを展開して設定します）
dlgSgPull.tle=プル
dlgSgPullConfiguration.btn"Configure"=設定
dlgSgPullConfiguration.chk"Remember as default for other repositories"=\
 他のリポジトリのデフォルトとして記憶させる
dlgSgPullConfiguration.hdl=プル方法を設定する
dlgSgPullConfiguration.inf=現在のリポジトリでプルするとき、マージするかリベースするかを指定します。
dlgSgPullConfiguration.lbl"Merging produces additional 'merge'-commits and is not recommended. It might however be a convention of your repository \(ask the maintainer to find out\)."=\
 マージすると追加のマージコミットが生成されるため、推奨されません。ただし、それはリポジトリの運用ルールである可能性があります \(メンテナーに確認してください\)。
dlgSgPullConfiguration.lbl"Rebasing gives a clean linear history and is recommended in general."=\
 リベースはきれいな直線的な履歴になるので、一般的に推奨されます。
dlgSgPullConfiguration.rbt"Merge"=マージ
dlgSgPullConfiguration.rbt"Rebase"=リベース
dlgSgPullConfiguration.tle=プル設定
dlgSgPullMergeInsteadOfRebase.btn"Merge"=マージ
dlgSgPullMergeInsteadOfRebase.btn"Rebase"=リベース
dlgSgPullMergeInsteadOfRebase.fur%1=リベースの対象となる変更の中に、マージコミット $1 があります。マージコミットをリベースすると、簡単にトラブルが発生します。
dlgSgPullMergeInsteadOfRebase.hdl=リベースの代わりにローカルの変更をマージしますか？
dlgSgPullMergeInsteadOfRebase.tle=プル
dlgSgPullNoRemoteRepository.btn"Add Remote"=リモートを追加
dlgSgPullNoRemoteRepository.fur=プルするためのリモートリポジトリを追加する必要があります。
dlgSgPullNoRemoteRepository.hdl=リモート リポジトリが見つかりませんでした。
dlgSgPullNoRemoteRepository.tle=プル
dlgSgPullOrJustFetch.btn"Fetch"=フェッチ
dlgSgPullOrJustFetch.btn"Pull"=プル
dlgSgPullOrJustFetch.chk"Fetch from all remotes"=すべてのリモートからフェッチする
dlgSgPullOrJustFetch.chk"Update existing and fetch new tags"=\
 既存のタグの更新と新しいタグの取得
dlgSgPullOrJustFetch.fur=プルの動作は、リポジトリ設定で変更することができます。
dlgSgPullOrJustFetch.hdl%1=リポジトリ $1 をフェッチしますか?
dlgSgPullOrJustFetch.tle=プル
dlgSgPushConfirmSingleBranch.btn"Push"=プッシュ
dlgSgPushConfirmSingleBranch.chk=次回から表示しない
dlgSgPushConfirmSingleBranch.fur%1=1つのブランチが'$1'にプッシュされます。
dlgSgPushConfirmSingleBranch.hdl%1=ブランチ'$1'をプッシュしますか？
dlgSgPushConfirmSingleBranch.tle=プッシュ
dlgSgPushForced.btn"Force Push"=強制プッシュ
dlgSgPushForced.fur=リモートブランチへのプッシュは ファストフォワードできないので、強制的にプッシュする必要があります。リモートブランチでのコミットは失われます。
dlgSgPushForced.hdl=リモートブランチを強制プッシュ（置き換え）しますか？
dlgSgPushForced.tle=プッシュ
dlgSgPushForcedSvn.btn"Force Push"=強制プッシュ
dlgSgPushForcedSvn.fur=リモート ブランチを置き換えようとしています。そのブランチのリビジョンには \(簡単には\) アクセスできなくなる可能性があります。
dlgSgPushForcedSvn.hdl=リモートブランチを強制プッシュ（置き換え）しますか？
dlgSgPushForcedSvn.tle=プッシュ
dlgSgPushOverwriteRemoteBranchConfirm.btn"Push"=プッシュ
dlgSgPushOverwriteRemoteBranchConfirm.chk=リモートでの変更を上書きする
dlgSgPushOverwriteRemoteBranchConfirm.fur=未知のコミットを含むリモート ブランチを置き換えようとしています。プッシュする前にリモートの変更をマージ/リベースする必要はありませんか?
dlgSgPushOverwriteRemoteBranchConfirm.hdl=本当にリモートブランチを上書きしますか?
dlgSgPushOverwriteRemoteBranchConfirm.tle=プッシュ
dlgSgPushToNoTagsOrLocalBranches.fur=プッシュできるのはタグかローカルブランチのみです。
dlgSgPushToNoTagsOrLocalBranches.hdl=プッシュするタグやローカル ブランチはありません。
dlgSgPushToNoTagsOrLocalBranches.tle=プッシュ先
dlgSgPushToRef.btn"Push"=プッシュ
dlgSgPushToRef.chk"Force pushing \(even if it's not fast-forward\)"=\
 強制プッシュ \(ファストフォワードでなくても\)
dlgSgPushToRef.edt"Push To"=プッシュ先
dlgSgPushToRef.edt"Target Repository"=ターゲットリポジトリ
dlgSgPushToRef.err"Enter the remote location to which the commits of the current branch should be pushed to."=\
 現在のブランチのコミットをプッシュするリモートの場所を入力します。
dlgSgPushToRef.err"Please specify a valid Git ref."=\
 有効なGit refを指定してください。
dlgSgPushToRef.hdl"Push '$1' to a remote repository"=\
 リモートリポジトリに '$1' をプッシュ
dlgSgPushToRef.hdl"Push '$1' to remote '$2'"='$1' をリモート '$2' にプッシュする
dlgSgPushToRef.inf=参照\(Ref\(s)\)をプッシュするターゲット リポジトリを選択します。
dlgSgPushToRef.rbt"Custom Ref:"=指定のブランチ:
dlgSgPushToRef.rbt"Tracked or matching branch"=追跡中または一致するブランチ
dlgSgPushToRef.tle=プッシュ先
dlgSgPushToRemote.btn"Push"=プッシュ
dlgSgPushToRemote.chk"Force pushing \(even if it's not fast-forward\)"=\
 強制プッシュ \(ファストフォワードでなくても\)
dlgSgPushToRemote.chk"Remove remote branches which don't have a local counterpart"=\
 ローカルと対応するブランチがないリモートブランチを削除する
dlgSgPushToRemote.edt"Target Repository"=ターゲットリポジトリ
dlgSgPushToRemote.hdl%1=別のリモートに '$1' ブランチをプッシュする
dlgSgPushToRemote.inf%1='$1' のすべてのブランチがターゲットリポジトリにプッシュされます。\r\(リモートにローカルと対応するブランチが作成されます。\)
dlgSgPushToRemote.tle=プッシュ先
dlgSgPushToRemoteRemoveTargetBranches.btn"Remove"=除去
dlgSgPushToRemoteRemoveTargetBranches.fur=ターゲットリモートのブランチとそのコミットを削除しました。これは後で失われます。
dlgSgPushToRemoteRemoveTargetBranches.hdl=本当にターゲットのリモートブランチを削除しますか?
dlgSgPushToRemoteRemoveTargetBranches.tle=プッシュ先
dlgSgPushToRemoteResetTargetBranches.btn"Force Push"=強制プッシュ
dlgSgPushToRemoteResetTargetBranches.chk=次回から表示しない
dlgSgPushToRemoteResetTargetBranches.fur=強制的にプッシュすると、ターゲットリモートのブランチとそのコミットが上書きされ、失われます。
dlgSgPushToRemoteResetTargetBranches.hdl=本当に対象のリモートブランチをリセットしますか？
dlgSgPushToRemoteResetTargetBranches.tle=プッシュ先
dlgSgPushTrackingConfigureSingle.btn"Configure"=設定
dlgSgPushTrackingConfigureSingle.btn"Skip"=スキップ
dlgSgPushTrackingConfigureSingle.fur=現在のブランチでは、トラッキング\(対応するリモートブランチ\)はまだ設定されていません。トラッキングを設定することで、ローカルブランチとリモートブランチの同期が保たれます。
dlgSgPushTrackingConfigureSingle.hdl%1='$1' ブランチに対してトラッキングを設定しますか？
dlgSgPushTrackingConfigureSingle.tle=プッシュ
dlgSgRebase.btn"Branches"=ブランチ
dlgSgRebase.btn"Rebase HEAD to"=HEAD を 選択したコミットにリベース
dlgSgRebase.hdl=HEAD を 選択したコミットにリベース
dlgSgRebase.inf=HEADコミットのリベース先となるコミットを選択します。
dlgSgRebase.tle=リベース
dlgSgRebaseConfirmUnreachable.btn"Rebase"=リベース
dlgSgRebaseConfirmUnreachable.fur=「ブランチ」 ビューの 「Recyclable Commits」 を選択することでのみ、このコミットにアクセスできる場合があります。
dlgSgRebaseConfirmUnreachable.hdl%1=コミット $1 は参照\(refs\)によって到達不能になります。
dlgSgRebaseConfirmUnreachable.tle=リベース
dlgSgRebaseContinueAfterSplittingCommit.btn"Continue"=続ける
dlgSgRebaseContinueAfterSplittingCommit.fur%1=コミット $1 の分割はまだ進行中で、このコミットのすべての変更が適用されています。
dlgSgRebaseContinueAfterSplittingCommit.hdl=コミットを分割した後、続行しますか？
dlgSgRebaseContinueAfterSplittingCommit.tle=リベース
dlgSgRebaseContinueConfirm.btn"Continue Rebase"=リベースを続ける
dlgSgRebaseContinueConfirm.chk=次回から表示しない
#                            !=Don't show again
dlgSgRebaseContinueConfirm.fur=すべてのコンフリクトを解決した後、リベース操作を続行します。
dlgSgRebaseContinueConfirm.hdl=リベースを続行しますか?
dlgSgRebaseContinueConfirm.tle=リベース
dlgSgRebaseContinueConflicts.fur=
#                              !=Please resolve all conflicts before continuing the rebase.
dlgSgRebaseContinueConflicts.hdl=
#                              !=Can't continue rebase with conflicts.
dlgSgRebaseContinueConflicts.tle=リベース
#                              !=Rebase
dlgSgRebaseContinueNothingToCommitContinue.btn"Continue Rebase"=リベースを続行する
dlgSgRebaseContinueNothingToCommitContinue.chk=次回から表示しない
#                                            !=Don't show again
dlgSgRebaseContinueNothingToCommitContinue.fur=リポジトリは「リベース中」の状態ですが、コミットするものがないため、リベースを続行できます。
#                                            !=The repository is in 'rebasing' state and there is nothing to commit, so you may just continue the Rebase.
dlgSgRebaseContinueNothingToCommitContinue.hdl=リベースを続行しますか?
dlgSgRebaseContinueNothingToCommitContinue.tle=リベース
dlgSgRebaseContinueNothingToCommitSkip.btn"Skip Commit"=コミットをスキップ
dlgSgRebaseContinueNothingToCommitSkip.fur=リポジトリは「リベース中」の状態ですが、コミットするものがないため、このリベース コミットをスキップできます。
dlgSgRebaseContinueNothingToCommitSkip.hdl=このリベースされたコミットをスキップしますか?
dlgSgRebaseContinueNothingToCommitSkip.tle=リベース
dlgSgRebaseContinuePreserveUntrackedFiles.btn"Commit"=コミット
dlgSgRebaseContinuePreserveUntrackedFiles.btn"Preserve"=保持
dlgSgRebaseContinuePreserveUntrackedFiles.fur=作業ツリーに追跡されていないファイルが含まれています。それらを作業ツリーに保持するか、リベース後のコミットに含めるかを選択することができます。
dlgSgRebaseContinuePreserveUntrackedFiles.hdl=追跡されていないファイルを作業ツリーに保持しますか?
dlgSgRebaseContinuePreserveUntrackedFiles.tle=リベース
dlgSgRebaseContinueWithoutApplyingAllChanges.btn"Continue Anyway"=とにかく続ける
dlgSgRebaseContinueWithoutApplyingAllChanges.btn"Put Changes into Index"=Indexに変更を反映
dlgSgRebaseContinueWithoutApplyingAllChanges.fur%1=コミット $1 の分割はまだ進行中ですが、このコミットのすべての変更が適用されているわけではありません。\n\nこれが意図的なものである場合は、続行できます。それ以外の場合は、「Indexに変更を反映」 をクリックして、変更内容を確認してください。
dlgSgRebaseContinueWithoutApplyingAllChanges.hdl=すべての変更を適用せずに、コミットの分割を続行しますか?
dlgSgRebaseContinueWithoutApplyingAllChanges.tle=リベース
dlgSgRebaseHeadToCommitConfirmBc.fur%1=これにより、作業ツリーのブランチ '$1' \(HEAD\) からのすべてのコミットが、選択したコミットに適用されます。
dlgSgRebaseHeadToCommitConfirmBc.hdl%1='$1' を選択したコミットにリベースしますか？
dlgSgRebaseHeadToCommitConfirmBr.fur%2=これは、作業ツリーのブランチ '$1' \(HEAD\) からのすべてのコミットを '$2' に適用します。
dlgSgRebaseHeadToCommitConfirmBr.hdl%2='$1' を '$2' にリベースしますか？
dlgSgRebaseHeadToCommitConfirm(Br|Bc|Hr|Hc).btn"Rebase HEAD to"=HEAD を 選択したコミットにリベース
dlgSgRebaseHeadToCommitConfirm(Br|Bc|Hr|Hc).btn"Rebase Interactively"=対話的なリベース
dlgSgRebaseHeadToCommitConfirm(Br|Bc|Hr|Hc).tle=HEAD を選択したコミットにリベースする
dlgSgRebaseInteractive.btn"Auto-Squash"=自動スカッシュ
dlgSgRebaseInteractive.btn"Edit Message"=メッセージの編集
dlgSgRebaseInteractive.btn"Edit"=編集
dlgSgRebaseInteractive.btn"Move Down"=下へ
dlgSgRebaseInteractive.btn"Move Up"=上へ
dlgSgRebaseInteractive.btn"Rebase"=リベース
dlgSgRebaseInteractive.btn"Remove"=除去
dlgSgRebaseInteractive.btn"Squash"=スカッシュ
dlgSgRebaseInteractive.col"IDs"==IDs
dlgSgRebaseInteractive.col"Message"=メッセージ
dlgSgRebaseInteractive.hdl=履歴を書き換える
dlgSgRebaseInteractive.inf=必要に応じてコミットを並べ替えたり、スカッシュします。
dlgSgRebaseInteractive.mni"Neighboring Commits"=隣接するコミット
dlgSgRebaseInteractive.mni"To Bottom Commit"=最下部のコミットへ
dlgSgRebaseInteractive.mni"To Top Commit"=最上部のコミットへ
dlgSgRebaseInteractive.tle=対話的なリベース
dlgSgRebaseInteractiveInitialCommitNotSupported.fur=現在のブランチの履歴の中で、変更すべき最初のコミットを選択する必要があります。このコミットから HEAD までのすべてのコミットには、ちょうどひとつの親がなければなりません。
dlgSgRebaseInteractiveInitialCommitNotSupported.hdl=初期コミットの変更は、対話型リベースではサポートされていません。
dlgSgRebaseInteractiveInitialCommitNotSupported.tle=対話的なリベース
dlgSgRebaseInteractiveMessage.edt"Commit Message"=コミットメッセージ
dlgSgRebaseInteractiveMessage.hdl=コミットメッセージを編集
dlgSgRebaseInteractiveMessage.inf=コミット用の新しいメッセージを指定します。
dlgSgRebaseInteractiveMessage.tle=メッセージの編集
dlgSgRebaseInteractiveRemoveCommit.btn"Remove"=除去
dlgSgRebaseInteractiveRemoveCommit.fur=コミットを再び回復することが困難または不可能になる可能性があります。
dlgSgRebaseInteractiveRemoveCommit.hdl%1=選択したコミット $1 を削除しますか?
dlgSgRebaseInteractiveRemoveCommit.tle=コミットを削除
dlgSgRebaseTagCommit.btn"Add Tag"=タグを追加
dlgSgRebaseTagCommit.btn"Skip Tag"=タグをスキップ
dlgSgRebaseTagCommit.fur=リベースの後、残りのコミットには到達できなくなります。
dlgSgRebaseTagCommit.hdl%1=コミット$1 にタグを付ける必要がありますか？
dlgSgRebaseTagCommit.tle=リベース
dlgSgRebasingAbortConfirm.btn"Abort Rebase"=リベースを中止
dlgSgRebasingAbortConfirm.fur=作業ツリーは「リベース中」の状態です。リベースを中止できます。現在のパッチをスキップしたい場合は、代わりに\[ブランチ\]→\[リベース\]→\[リベース HEAD to\] を使用してください。\n\n中止すると、ローカルの変更を消去することができます。\('git reset --hard' の実行\）
dlgSgRebasingAbortConfirm.hdl=リベースを中止しますか？
dlgSgRebasingAbortConfirm.tle=リベース
dlgSgRecursiveStage.btn"Stage"=ステージ
dlgSgRecursiveStage.chk"Don't show again"=次回から表示しない
dlgSgRecursiveStage.hdl=作業ツリーの変更をインデックスに保存し、後でコミットできるようにする。
dlgSgRecursiveStage.inf=Indexにステージングするファイルを選択します。
dlgSgRecursiveStage.mni"Deselect All"=選択を解除
dlgSgRecursiveStage.mni"Select All"=全選択
dlgSgRecursiveStage.mni"Toggle"=トグル
dlgSgRecursiveStage.tle=ステージ
dlgSgRecursiveUnstage.btn"Unstage"=アンステージ
dlgSgRecursiveUnstage.chk"Don't show again"=次回から表示しない
dlgSgRecursiveUnstage.hdl=ステージングされた変更をIndexから作業ツリーに戻す
dlgSgRecursiveUnstage.inf=アンステージするファイルをIndexから選択します。
dlgSgRecursiveUnstage.tle=アンステージ
dlgSgRecursive(Stage|Unstage).col"Directory"=ディレクトリ
dlgSgRecursive(Stage|Unstage).col"Name"=名前
dlgSgRemoteDeleteConfirm.btn"Delete"=削除
dlgSgRemoteDeleteConfirm.fur=これは、リモートリポジトリへのリンクを削除するだけです。
dlgSgRemoteDeleteConfirm.hdl%1=リモートリポジトリ'$1'を削除しますか？
dlgSgRemoteDeleteConfirm.tle=リモートリポジトリを削除
dlgSgRemoteFetchMore.btn"Fetch"=フェッチ
dlgSgRemoteFetchMore.col"Branch"=ブランチ
dlgSgRemoteFetchMore.hdl=リモートブランチの取得
dlgSgRemoteFetchMore.inf=リモートリポジトリからフェッチするブランチを選択します。
dlgSgRemoteFetchMore.tle=追加のフェッチ
dlgSgRemoteFetchMoreNoMoreBranches.fur=リモートリポジトリに存在するすべてのブランチは、すでにローカルにも存在します。
dlgSgRemoteFetchMoreNoMoreBranches.hdl=取得するリモート ブランチはありません。
dlgSgRemoteFetchMoreNoMoreBranches.tle=追加のフェッチ
dlgSgRemoteProperties.chk"Perform background Poll or Fetch"=バックグラウンドでポールまたはフェッチを実行する
dlgSgRemoteProperties.edt"URL or Path"=URL or パス
dlgSgRemoteProperties.hdl=リモートプロパティの設定
dlgSgRemoteProperties.inf=リモートのURLやその他のプロパティを変更します
dlgSgRemoteProperties.tle=リモート プロパティ
dlgSgRemoteSelect.edt"Remote"=リモート
dlgSgRemoteSelect.hdl=リモート レビュー データベースの初期化
dlgSgRemoteSelect.inf=レビュー データベースを初期化するリモート リポジトリを選択します。
dlgSgRemoteSelect.tle=リモートの初期化
dlgSgRemoteSetDepth.btn"Set Depth"=深さを設定
dlgSgRemoteSetDepth.edt"Depth"=深さ
dlgSgRemoteSetDepth.hdl=リポジトリの深さを設定
dlgSgRemoteSetDepth.inf=深さを無制限に設定する場合は、大きな数値\(例:100000\)を使用します。
dlgSgRemoteSetDepth.tle=深さの設定
dlgSgRemotesAdd.btn"Add"=追加
dlgSgRemotesAdd.chk"Verify repository connection"=リポジトリ接続の確認
dlgSgRemotesAdd.edt"Name"=名前
dlgSgRemotesAdd.edt"URL or Path"=URL or パス
dlgSgRemotesAdd.hdl=リモートリポジトリの追加
dlgSgRemotesAdd.inf=リモートリポジトリのURLと短い名前を入力します。
dlgSgRemotesAdd.mni"Add Hosting Provider"=ホスティングプロバイダーを追加
dlgSgRemotesAdd.mni"Select Local Repository"=ローカルリポジトリを選択
dlgSgRemotesAdd.tle=リモートリポジトリを追加
dlgSgRemotesNoRemoteDetected.fur%1=このこの操作を行うには、$1 のリポジトリ構成に、一意に決定された 1 つのリモートが含まれている必要があります。
dlgSgRemotesNoRemoteDetected.hdl=リモートが検出されませんでした。
dlgSgRemotesNoRemoteDetected.tle=プッシュアップ
dlgSgRemove.btn"Remove"=除去
dlgSgRemove.chk"Delete local files"=ローカルファイルの削除(消去)
dlgSgRemove.col"Directory"=ディレクトリ
dlgSgRemove.col"Name"=名前
dlgSgRemove.hdl=リポジトリからをファイル削除
dlgSgRemove.inf=リポジトリや作業ツリーから削除したい（追跡を停止したい）ファイルを選択します。
dlgSgRemove.tle=除去
dlgSgRenameBranch.btn"Rename"=リネーム
dlgSgRenameBranch.edt"Name"=名前
dlgSgRenameBranch.hdl=ブランチの名前を変更する
dlgSgRenameBranch.inf%1=ブランチの新しい名前 '$1' を入力してください。
dlgSgRenameBranch.tle=リネーム
dlgSgRenameFile.btn"Rename"=リネーム
dlgSgRenameFile.edt"Path"=パス
dlgSgRenameFile.hdl=ファイル名を変更する
dlgSgRenameFile.inf=新しいパスとファイル名を入力してください。
dlgSgRenameFile.tle=リネーム
dlgSgRenameRemote.btn"Rename"=リネーム
dlgSgRenameRemote.edt"Name"=名前
dlgSgRenameRemote.hdl=既存のリモートの名前を変更する
dlgSgRenameRemote.inf=選択したリモートの新しい名前を入力します。
dlgSgRenameRemote.tle=リモートリポジトリの名前を変更する
dlgSgRenameRepository.btn"Rename"=リネーム
dlgSgRenameRepository.edt"Name"=名前
dlgSgRenameRepository.hdl=リポジトリの名前を変更する
dlgSgRenameRepository.inf=リポジトリの新しい名前を指定します。リポジトリディレクトリの名前は変更されません。
dlgSgRenameRepository.tle=リネーム
dlgSgRepositoriesSearch.btn"Start Search"=検索
dlgSgRepositoriesSearch.col"Path"=パス
dlgSgRepositoriesSearch.edt"Found repository \(selected ones will be remembered\)"=\
 発見されたリポジトリ\(選択されたものは記憶されます\)
dlgSgRepositoriesSearch.edt"Search In"=検索対象
dlgSgRepositoriesSearch.hdl=既存のローカルリポジトリの検索
dlgSgRepositoriesSearch.inf=検索対象のルートディレクトリを指定し、「検索」をクリックします。
#                         !=Select a root directory where the search should start and click 'Start Search'.
dlgSgRepositoriesSearch.lbl"No repository selected"=リポジトリが選択されていません
#                                                 !=No repository selected
dlgSgRepositoriesSearch.lbl"Searching $1"=$1 を検索しています
#                                       !=Searching $1
dlgSgRepositoriesSearch.mni"Deselect All"=選択を解除
dlgSgRepositoriesSearch.mni"Path"=パス
dlgSgRepositoriesSearch.mni"Select All"=全選択
dlgSgRepositoriesSearch.mni"Toggle"=トグル
dlgSgRepositoriesSearch.tle=リポジトリの検索
dlgSgRepositoryAddGroup.btn"Add"=追加
dlgSgRepositoryAddGroup.edt"Group Name"=グループ名
dlgSgRepositoryAddGroup.hdl=グループ名を入力してください
dlgSgRepositoryAddGroup.inf=グループ作成後は、その中でリポジトリを移動させることができます。
dlgSgRepositoryAddGroup.tle=グループを作成
dlgSgRepositoryClose.btn"Force Close"=強制的に閉じる
dlgSgRepositoryClose.fur=現在実行中のGitプロセスは中止されない可能性があることに注意してください。
dlgSgRepositoryClose.hdl=本当に今すぐ閉じますか？
dlgSgRepositoryClose.tle=閉じる
dlgSgRepositoryFrameCloseWithoutPush.btn"Close Now"=今すぐ閉じる
dlgSgRepositoryFrameCloseWithoutPush.chk=次回から表示しない
dlgSgRepositoryFrameCloseWithoutPush.fur=プッシュ可能なコミットがあります。このウィンドウを閉じる前にプッシュする必要はありませんか?
dlgSgRepositoryFrameCloseWithoutPush.hdl=コミットをプッシュせずに終了しますか？
dlgSgRepositoryFrameCloseWithoutPush.tle=閉じる
dlgSgRepositoryOpen.btn"Remove"=除去
dlgSgRepositoryOpen.fur=移動した場合は、削除して新しい場所を追加してください。
dlgSgRepositoryOpen.hdl%1=見つからないリポジトリ'$1'を削除しますか？
dlgSgRepositoryOpen.tle=リポジトリを開く
dlgSgRepositoryRemoveFailed1.fur=別のウィンドウでリポジトリが開かれている場合や、コマンドが実行中の場合に、このようなことが起こる可能性があります。
#                              !=This could happen if the repository is open in another window or currently commands are executed.
dlgSgRepositoryRemoveFailed1.hdl%1=リポジトリ '$1' を削除できませんでした。
#                                !=The repository '$1' could not be removed.
dlgSgRepositoryRemoveFailed1.tle=除去
#                              !=Remove
dlgSgRepositoryRemoveMultiGroup.fur=削除されたグループ内のリポジトリは、グループの外に移動されます。
dlgSgRepositoryRemoveMultiGroup.hdl%1=グループ'$1'を削除しますか？
dlgSgRepositoryRemoveMultiRepo.fur=これは、ディスク上のリポジトリを維持しつつ、SmartGitに忘れさせるだけです。
dlgSgRepositoryRemoveMultiRepo.hdl%1=リポジトリ'$1'を削除しますか？
dlgSgRepositoryRemoveMultiRepoMultiGroup.fur=これにより、ディスク上のリポジトリは維持されますが、SmartGitはそのことを忘れてしまいます。削除されたグループの中にあるリポジトリは、グループの外に移動されます。
dlgSgRepositoryRemoveMultiRepoMultiGroup.hdl%2=リポジトリ'$1'とグループ'$2'を削除しますか？
dlgSgRepositoryRemoveMultiRepoSingleGroup.fur=これにより、ディスク上のリポジトリは維持されますが、SmartGitはそのことを忘れてしまいます。削除されたグループの中にあるリポジトリは、グループの外に移動されます。
dlgSgRepositoryRemoveMultiRepoSingleGroup.hdl%2=リポジトリ'$1'とグループ'$2'を削除しますか？
dlgSgRepositoryRemoveSingleGroup.fur=削除されたグループ内のリポジトリは、グループの外に移動されます。
dlgSgRepositoryRemoveSingleGroup.hdl%1=グループ'$1'を削除しますか？
dlgSgRepositoryRemoveSingleRepo.fur=これは、ディスク上のリポジトリを維持しつつ、SmartGitに忘れさせるだけです。
dlgSgRepositoryRemoveSingleRepo.hdl%1=リポジトリ '$1' を削除しますか?
dlgSgRepositoryRemoveSingleRepoMultiGroup.fur=これにより、ディスク上のリポジトリは維持されますが、SmartGitはそのことを忘れてしまいます。削除されたグループの中にあるリポジトリは、グループの外に移動されます。
dlgSgRepositoryRemoveSingleRepoMultiGroup.hdl%2=リポジトリ '$1' および '$2' グループを削除しますか?
dlgSgRepositoryRemoveSingleRepoSingleGroup.fur=これにより、ディスク上のリポジトリは維持されますが、SmartGitはそのことを忘れてしまいます。削除されたグループの中にあるリポジトリは、グループの外に移動されます。
dlgSgRepositoryRemoveSingleRepoSingleGroup.hdl%2=リポジトリ '$1' とグループ '$2' を削除しますか?
dlgSgRepositorySettings.chk"Always fetch new commits, tags and branches from submodule"=\
 サブモジュールから常に新しいコミット、タグ、ブランチを取得する
dlgSgRepositorySettings.chk"Initialize new submodules"=新しいサブモジュールを初期化
dlgSgRepositorySettings.chk"Prune obsolete remote tracked branches"=不要になったリモートトラッキングブランチを整理
dlgSgRepositorySettings.chk"Remember as default"=デフォルトとして記憶する
dlgSgRepositorySettings.chk"Sign all commits"=すべてのコミットに署名する
dlgSgRepositorySettings.chk"Update registered submodules"=登録されたサブモジュールを更新する
dlgSgRepositorySettings.edt"Email"=電子メール
dlgSgRepositorySettings.edt"GPG Program"=GPG プログラム
dlgSgRepositorySettings.edt"Name"=名前
dlgSgRepositorySettings.edt"Signing Key"=署名キー
dlgSgRepositorySettings.edt"Submodule handling\*"=サブモジュールの取り扱い\*
dlgSgRepositorySettings.edt"Text File Encoding"=テキストファイルのエンコーディング
dlgSgRepositorySettings.err"Please enter a valid, comma-separated list of regular expressions."=\
 有効なカンマ区切りの正規表現のリストを入力してください。
dlgSgRepositorySettings.hdl=効果的なリポジトリ設定の編集
#                         !=Edit the repository settings
dlgSgRepositorySettings.inf=ここでは、ユーザー設定ファイルとリポジトリに対する効果的なGit設定を確認・編集することができます。\rオプションをユーザー設定として保存するには、「デフォルトとして記憶する」を選択します。
#                         !=Here you can edit the Git settings for the repository. The default settings can be found in the preferences.
dlgSgRepositorySettings.lbl"\* if repository commit references non-pushed submodule commit"=\
 \* リポジトリのコミットがプッシュされていないサブモジュールのコミットを参照している場合
dlgSgRepositorySettings.tab"Encoding"=エンコーディング
dlgSgRepositorySettings.tab"Fetch and Pull"=フェッチとプル
#                                         !=Fetch and Pull
dlgSgRepositorySettings.tab"Pull"=プル
dlgSgRepositorySettings.tab"Push"=プッシュ
dlgSgRepositorySettings.tab"Signing"=署名
dlgSgRepositorySettings.tab"User & Encoding"=ユーザーとエンコーディング
dlgSgRepositorySettings.tab"User"=ユーザー
dlgSgRepositorySettings.tle=リポジトリの設定
dlgSgRepositorySettings.ttpGroupPatterns"<b>Custom labels</b>"=<b>カスタムラベル</b>
#                                                            !=<b>Custom labels</b>
dlgSgRepositorySettings.ttpGroupPatterns"<b>Grouping logic</b>"=<b>グループ化のロジック</b>
#                                                             !=<b>Grouping logic</b>
dlgSgRepositorySettings.ttpGroupPatterns"<b>Multiple group patterns</b>"=<b>複数のグループパターン</b>
#                                                                      !=<b>Multiple group patterns</b>
dlgSgRepositorySettings.ttpGroupPatterns"Patterns will show up in the GUI using auto-generated labels which are derived from their regular expression. You can assign a custom label <tt>label</tt> to a pattern by prefixing it by <tt>label:</tt>; a label may only contain letters, digits and '_'."=パターンは、その正規表現から派生した自動生成されたラベルを使用してGUIに表示されます。ラベルには、<tt>label:</tt> という接頭辞を付けて <tt>label</tt> を割り当てることができます。ラベルには、文字、数字、'_' のみ使用できます。
#                                                                                                                                                                                                                                                                                                     !=Patterns will show up in the GUI using auto-generated labels which are derived from their regular expression. You can assign a custom label <tt>label</tt> to a pattern by prefixing it by <tt>label:</tt>; a label may only contain letters, digits and '_'.
dlgSgRepositorySettings.wrn"The entered email address does not look like a valid one."=\
 入力された電子メール アドレスは有効なものではないようです。
dlgSgRepositorySettings.wrn"The name should not contain an email address."=\
 名前に電子メール アドレスを含めないでください。
dlgSgRepositorySettings.wrn"Without setting your name, you won't be able to commit."=\
 コミットするには名前を設定する必要があります。
dlgSgResetAdv.btn"Reset"=リセット
dlgSgResetAdv.chk"Thoroughly fix line endings according to .gitattributes"=\
 .gitattributesに従い改行コードを修正する
dlgSgResetAdv.chk"Thoroughly fix line-endings according to .gitattributes"=\
 .gitattributes に従って行末を徹底的に修正する
dlgSgResetAdv.hdl%1=コミット $1 にリセット
dlgSgResetAdv.inf=現在のブランチのHEADを選択したコミットにリセットし、オプションでインデックスと作業ツリーを更新します。
dlgSgResetAdv.lbl"Current staged and local changes will be lost!"=\
 現在のステージングされた変更と、ローカルの変更は失われます!
dlgSgResetAdv.lbl"Current staged changes will be lost!"=\
 現在のステージングされた変更は失われます!
dlgSgResetAdv.lbl"Similar to 'hard'. If a file to be replaced has working tree changes, the reset is aborted."=\
 'hard' に似ています。置き換えられるファイルに作業ツリーの変更がある場合、リセットは中止されます。
dlgSgResetAdv.lbl"Similar to 'hard'. If a file to be replaced has working tree or Index changes, the reset is aborted."=\
 'hard' に似ています。置き換えられるファイルに作業ツリーまたはインデックスの変更がある場合、リセットは中止されます。
dlgSgResetAdv.lbl"The Index will show all changes between the previous HEAD and the selected commit."=\
 インデックスには、前の HEAD と選択したコミットの間のすべての変更が表示されます。
dlgSgResetAdv.rbt"Don't touch the Index nor the working tree - 'soft'"=\
 インデックスにもワーキングツリーにも触れない - 'soft'
dlgSgResetAdv.rbt"Reset the Index and the working tree - 'hard'"=\
 インデックスと作業ツリーをリセットする  - 'hard'
dlgSgResetAdv.rbt"Reset the Index and the working tree, skipping modified files - 'keep'"=\
 インデックスと作業ツリーをリセットし、変更されたファイルをスキップする - 'keep'
dlgSgResetAdv.rbt"Reset the Index and the working tree, skipping working tree modified files - 'merge'"=\
 インデックスと作業ツリーをリセットし、作業ツリーの修正ファイルをスキップする - 'merge'
dlgSgResetAdv.rbt"Reset the Index but not the working tree - 'mixed'"=\
 インデックスをリセットするが、作業ツリーはリセットしない - 'mixed'
dlgSgResetAdv.tle=リセット
dlgSgResetConfirm.btn"Reset"=リセット
dlgSgResetConfirm.fur=現在のステージング領域とローカルの変更は失われます
dlgSgResetConfirm.hdl%1=HEADを コミット'$1' にリセットしますか？
dlgSgResetConfirm.tle=リセット
dlgSgResolve.btn"Resolve"=解決
dlgSgResolve.chk"Stage file \(reset conflict state\)"=ファイルをステージ \(競合状態のリセット\)
dlgSgResolve.edt"Content"=コンテンツ
dlgSgResolve.hdl=競合を解決する
dlgSgResolve.inf=解決されたファイルに使用するコンテンツを選択します。
dlgSgResolve.rbt"Leave as is"=そのままにしておく
dlgSgResolve.rbt"Open Conflict Solver"=競合解決ツールを開く
dlgSgResolve.rbt"Set to $1 \(\"ours\", $2\)"=$1 に設定\("ours", $2\)
dlgSgResolve.rbt"Set to $1 \(\"theirs\", $2\)"=$1 に設定\("theirs", $2\)
dlgSgResolve.rbt"Set to rebase target \(\"theirs\", $1\)"=\
 リベースターゲットに設定 \("theirs", $1\)
dlgSgResolve.rbt"Set to rebased branch '$1' \(\"ours\", $2\)"=\
 リベースされたブランチ"$1"に設定 \("ours", $2\)
dlgSgResolve.tle=解決
dlgSgResolveManuallyModifiedSingle.btn"Overwrite"=上書き
dlgSgResolveManuallyModifiedSingle.fur%1=$1では、手動でコンフリクトを解決しているようです。続行すると失われます。
dlgSgResolveManuallyModifiedSingle.hdl=手動の競合解決状態を上書きしますか?
dlgSgResolveManuallyModifiedSingle.tle=解決
dlgSgResolveSubmodule.btn"Resolve"=解決
dlgSgResolveSubmodule.hdl=競合を解決する
dlgSgResolveSubmodule.inf=解決するサブモジュールのコミットを選択します。
dlgSgResolveSubmodule.rbt"Check out and set submodule pointer to 'theirs' version"=\
 チェックアウトして、サブモジュール ポインターを 'theirs' バージョンに設定します
dlgSgResolveSubmodule.rbt"Leave submodule pointer as is"=サブモジュールのポインタをそのままにする
dlgSgResolveSubmodule.tle=解決
dlgSgRevealCommitLocalOrTracked.btn"Reveal Local"=ローカルを表示
dlgSgRevealCommitLocalOrTracked.btn"Reveal Tracked"=追跡ブランチを表示
dlgSgRevealCommitLocalOrTracked.chk=常にローカルブランチを表示する
dlgSgRevealCommitLocalOrTracked.fur%2=どちらを表示するかを選択してください。\r'$1'\r'$2'
dlgSgRevealCommitLocalOrTracked.hdl=ローカルと追跡されたブランチのどちらを表示しますか？
dlgSgRevealCommitLocalOrTracked.tle=コミットを表示する
dlgSgRevertAndCommitConfirmSingle.btn"Revert && Commit"=リバートしてコミット
dlgSgRevertAndCommitConfirmSingle.btn"Revert"=リバート
dlgSgRevertAndCommitConfirmSingle.fur=これにより、選択したコミットでの変更が取り消されます。
dlgSgRevertAndCommitConfirmSingle.hdl=選択したコミットを取り消しますか？
dlgSgRevertAndCommitConfirmSingle.tle=リバート
dlgSgRevertConfigurationFile.btn"Revert"=リバート
dlgSgRevertConfigurationFile.fur=これらのファイルの変更のみが\(コミットせずに\)元に戻されます。
dlgSgRevertConfigurationFile.hdl"Do you want to revert changes of '$1'?"=\
 '$1' の変更を元に戻しますか?
dlgSgRevertConfigurationFile.tle=リバート
dlgSgRevertInProgress.fur=続行する前に、リバートを完了する必要があります。 リバートをを完了するには コミットを使用し、中止するには 破棄 を使用します。
dlgSgRevertInProgress.hdl=現在、リバートが進行中です。
dlgSgRevertInProgress.tle=リバート
dlgSgRevertNotAllConflictsResolved.chk=次回から表示しない
dlgSgRevertNotAllConflictsResolved.fur=先に進む前に、コンフリクトを解消する必要があるかもしれません。
dlgSgRevertNotAllConflictsResolved.hdl=競合のため、リバートできませんでした。
dlgSgRevertNotAllConflictsResolved.tle=リバート
dlgSgReviewCommentAdd.btn"Add"=追加
dlgSgReviewCommentAdd.hdl=コメントの追加
dlgSgReviewCommentAdd.tle=コメントを追加
dlgSgReviewCommentEdit.btn"Edit"=編集
dlgSgReviewCommentEdit.hdl=コメントを編集
dlgSgReviewCommentEdit.tle=コメントを編集
dlgSgReviewCommentReply.btn"Reply"=返信
dlgSgReviewCommentReply.hdl=選択したコメントへの返信
dlgSgReviewCommentReply.tle=コメントに返信
dlgSgReviewComment(Add|Edit|Reply).edt"Text"=テキスト
dlgSgReviewComment(Add|Edit|Reply).inf=コメントのテキストを入力します。
dlgSgReviewConfigureDisposeDatabase.btn"Dispose"=廃棄する
dlgSgReviewConfigureDisposeDatabase.fur=これにより、レビュー システムが無効になり、プッシュされていないローカル データが失われます。
dlgSgReviewConfigureDisposeDatabase.hdl=本当にローカルレビューのデータをすべて廃棄しますか？
dlgSgReviewConfigureDisposeDatabase.tle=データベースの廃棄
dlgSgReviewConfigureForGitHub.btn"Continue"=続ける
dlgSgReviewConfigureForGitHub.fur=このリポジトリはGitHubサーバーに接続されています。\nGitHubには、コミットコメントやプルリクエストなど、独自のレビューの概念があります。\nそのため、GitHubの既存の機能に加えて、SmartGitのレビューデータベースは必要ないかもしれません。
dlgSgReviewConfigureForGitHub.hdl=GitHub リポジトリ用に SmartGit のレビュー データベースを本当に構成しますか?
dlgSgReviewConfigureForGitHub.tle=レビューシステムの設定
dlgSgReviewConfigureIntializeNew.btn"Initialize"=初期化
dlgSgReviewConfigureIntializeNew.fur=これにより、現在のリポジトリに新しい レビューデータベースが作成され、後で他のリモートにプッシュされる可能性があります。
dlgSgReviewConfigureIntializeNew.hdl=新しいレビューデータベースを初期化しますか？
dlgSgReviewConfigureIntializeNew.tle=レビューシステムの設定
dlgSgReviewConfigureWhat.btn"Dispose Database"=データベースの廃棄
dlgSgReviewConfigureWhat.btn"Edit Users"=ユーザーの編集
dlgSgReviewConfigureWhat.btn"Initialize a Remote"=リモートの初期化
dlgSgReviewConfigureWhat.fur=ユーザーデータベースでは、エイリアス（@mikeなど）を定義することができ、レビューコメントの中でチームメイトに声をかけやすくなります。
dlgSgReviewConfigureWhat.hdl=設定したい内容を選択してください。
dlgSgReviewConfigureWhat.tle=レビューデータベースの設定
dlgSgReviewPullRequestClose.edt"Comment"=コメント
dlgSgReviewPullRequestClose.hdl=プルリクエストを閉じる
dlgSgReviewPullRequestClose.inf=プルリクエストをクローズする際にログに記録されるコメントを入力します。
dlgSgReviewPullRequestClose.tle=プルリクエストを閉じる
dlgSgReviewPullRequestCreate.btn"Create"=作成
dlgSgReviewPullRequestCreate.edt"Assignees"=担当者
dlgSgReviewPullRequestCreate.edt"Message"=メッセージ
dlgSgReviewPullRequestCreate.err"Unknown user '$1'."=不明なユーザー '$1'
dlgSgReviewPullRequestCreate.hdl=プルリクエストを作成
dlgSgReviewPullRequestCreate.inf=プルリクエストは、あるブランチを別のブランチに統合することを提案するものです。
dlgSgReviewPullRequestCreate.lbl"The message will be displayed for the pull request node and will be the default commit message when integrating the pull request."=\
 メッセージはプル リクエスト ノードに対して表示され、プル リクエストを統合する際のデフォルトのコミット メッセージになります。
dlgSgReviewPullRequestCreate.lbl"The pull request will be highlighted to those users which are listed as assignees."=\
 プルリクエストは、担当者としてリストされているユーザーに対してハイライト表示されます。
dlgSgReviewPullRequestCreate.tle=プルリクエストを作成
dlgSgReviewPullRequestState.btn"Assign"=割り当て
dlgSgReviewPullRequestState.edt"Assignees"=担当者
dlgSgReviewPullRequestState.edt"Comment"=コメント
dlgSgReviewPullRequestState.err"Unknown user '$1'."=不明なユーザー '$1'
dlgSgReviewPullRequestState.hdl=プルリクエストの割り当て
dlgSgReviewPullRequestState.inf=プルリクエストを割り当てるユーザーを入力してください。
dlgSgReviewPullRequestState.tle=割り当て
dlgSgReviewUserAddEdit.edt"Aliases"=エイリアス
dlgSgReviewUserAddEdit.edt"Contact URI"=連絡先URI
dlgSgReviewUserAddEdit.edt"Email"=電子メール
dlgSgReviewUserAddEdit.edt"Name"=名前
dlgSgReviewUserAddEdit.err"Email address is not valid."=電子メールアドレスが無効です。
dlgSgReviewUserAddEdit.err"Enter at least one alias."=エイリアスを1つ以上入力してください。
dlgSgReviewUserAddEdit.hdl=ユーザの編集
dlgSgReviewUserAddEdit.inf=ユーザーの名前とメールアドレス（Gitで使用されているもの）、スペースまたはカンマで区切られた1つ以上のエイリアス、およびオプションの連絡先情報を入力します。
dlgSgReviewUserAddEdit.lbl"Aliases have to be alphanumeric and can be used in comments, like '@bob please check'."=\
 エイリアスは英数字でなければなりません。"@bob please check" のようにコメントに使用することができます。
dlgSgReviewUserAddEdit.lbl"Contact URIs are the primary way to contact users through SmartGit, e.g. 'mailto:bob@office.com' or 'skype:bob?chat'."=\
 連絡先URIは、SmartGitを通じてユーザーに連絡を取るための主要な手段です。例:'mailto:bob@office.com'   'skype:bob?chat'
dlgSgReviewUserAddEdit.tle=編集
dlgSgReviewUsersEdit.btn"Add"=追加
dlgSgReviewUsersEdit.btn"Edit"=編集
dlgSgReviewUsersEdit.btn"Import"=インポート
dlgSgReviewUsersEdit.btn"Remove"=除去
dlgSgReviewUsersEdit.col"Aliases"=エイリアス
dlgSgReviewUsersEdit.col"Email"=電子メール
dlgSgReviewUsersEdit.col"Name"=名前
dlgSgReviewUsersEdit.hdl=レビューデータベースのユーザー設定
#                      !=<REMOVED>
dlgSgReviewUsersEdit.hdl"Configure review database users"=レビューデータベースのユーザー設定
#                                                       !=Configure review database users
dlgSgReviewUsersEdit.hdl"Edit review database users"=レビューデータベースのユーザーを編集する
#                                                  !=Edit review database users
dlgSgReviewUsersEdit.inf=ユーザーは、コメント文に使用されるエイリアスを持つことができ、オプションで連絡先情報を持つことができます。
dlgSgReviewUsersEdit.tle=Users設定
#                      !=<REMOVED>
dlgSgReviewUsersEdit.tle"Configure Users"=ユーザーの設定
#                                       !=Configure Users
dlgSgReviewUsersEdit.tle"Edit Users"=ユーザーの編集
#                                  !=Edit Users
dlgSgSelectBranch.edt"Auxiliary Branch"=補助ブランチ
dlgSgSelectBranch.edt"Tracked Branch"=追跡されたブランチ
dlgSgSelectBranch.hdl"Select tracked branch"=追跡されたブランチを選択
dlgSgSelectBranch.inf"Select the branch which should be tracked by '$1'."=\
 '$1' で追跡するブランチを選択します。
dlgSgSelectBranch.inf"Select which auxiliary branch should be shown in addition to the current branch."=\
 現在のブランチに加えて、どの補助ブランチを表示するかを選択します。
dlgSgSelectBranch.tle=追跡ブランチの設定
dlgSgSetup.btn"Configure Proxy"=プロキシ設定
dlgSgSetup.btn"Exit"=終了
dlgSgSetup.chk"Automatically send 'crash footprints' after an internal error has occurred"=\
 内部エラー発生後、自動的に「クラッシュフットプリント」を送信
dlgSgSetup.chk"I understand and agree to all terms and conditions of the"=\
 すべての条件を理解し、同意します。
dlgSgSetup.chk"Register existing license"=既存のライセンスを登録する
dlgSgSetup.chk"Send 'crash footprints' after an internal error has occurred"=\
 内部エラー発生後、「クラッシュフットプリント」を送信
dlgSgSetup.chk"Send usage statistics"=使用状況の統計情報の送信
dlgSgSetup.chk"Use gravatar.com to show images for the users"=\
 gravatar.comを使用してユーザーアイコンを表示する
dlgSgSetup.edt"Email"=電子メール
dlgSgSetup.edt"Git Executable"=Git 実行ファイル
dlgSgSetup.edt"License File"=ライセンスファイル
dlgSgSetup.edt"License Server URL"=
#                                !=License Server URL
dlgSgSetup.edt"Repository search"=リポジトリを検索
dlgSgSetup.edt"User Name"=ユーザ名
dlgSgSetup.inf"Decide what SmartGit window you prefer. You can change this option later in the preferences."=\
 SmartGitのどのウィンドウを使用するかを決めます。このオプションは、後で環境設定で変更することができます。
dlgSgSetup.inf"If you are using SSH to connect to other Git repositories, select what SSH client to use. You can change it later in the Preferences."=\
 SSHを使って他のGitリポジトリに接続する場合は、使用するSSHクライアントを選択します。この設定は後から「環境設定」で変更できます。
dlgSgSetup.inf"Please review the following privacy options. You can change them later in the preferences."=\
 以下のプライバシーに関するオプションをご確認ください。後で環境設定で変更することができます。
dlgSgSetup.inf"Please wait a few moments while searching for a Git installation."=Gitのインストールを検索している間、しばらくお待ちください。
#                                                                               !=Please wait a few moments while searching for a Git installation.
dlgSgSetup.inf"SmartGit requires compatible Git installations on your system. Please specify the paths to your 'git' executable."=\
 SmartGitは、お使いのシステムに互換性のあるGitがインストールされている必要があります。'git'の実行ファイルのパスを指定してください。
dlgSgSetup.inf"User name and email will be stored as part of your commits. Here you can configure the default values which are stored in .gitconfig."=\
 ユーザー名とメールアドレスは、コミットの一部として保存されます。ここでは、.gitconfig に保存されるデフォルト値を設定することができます。
dlgSgSetup.inf"Welcome to SmartGit! Please confirm that you are accepting the license agreement."=\
 SmartGitへようこそ! 使用許諾契約に同意されることをご確認ください。
dlgSgSetup.lbl"- Working Tree and Graph\n- repository tabs\n\n- recommended for new users"=
#                                                                                        !=- Working Tree and Graph\n- repository tabs\n\n- recommended for new users
dlgSgSetup.lbl"- Working Tree as graph node\n- full feature set\n\n- recommended for power users"=
#                                                                                               !=- Working Tree as graph node\n- full feature set\n\n- recommended for power users
dlgSgSetup.lbl"- needs Log window for full history\n- file display from submodules\n\n- SmartGit 19.1 defaults"=
#                                                                                                             !=- needs Log window for full history\n- file display from submodules\n\n- SmartGit 19.1 defaults
dlgSgSetup.lbl"Found $1 repositories."=
#                                    !=Found $1 repositories.
dlgSgSetup.lbl"Please help to improve SmartGit's quality by automatically sending 'crash footprints' which do not contain any sensitive information. You can change this option later in the preferences.\n\nA 'crash footprint' contains details about your machine \(e.g. version of operating system\), SmartGit's version/build number, the JVM state and where the internal error occurred.\n\nIt contains NO POTENTIALLY SENSITIVE INFORMATION like user names, email addresses, file contents, file paths or server names."=\
 「クラッシュ フットプリント」と使用状況統計を自動的に送信することで、SmartGit の品質向上にご協力ください。 " このオプションは、後で [環境設定] で変更できます。\n\n「クラッシュ フットプリント」には、お使いのマシンの詳細（オペレーティング システムのバージョンなど）、SmartGit のバージョン/ビルド番号、JVM の状態、内部エラーが発生した場所などが含まれていますが、ユーザー名、電子メール アドレス、ファイルの内容、ファイル パス、サーバー名など、機密情報になりうる可能性のある情報は一切含まれていません。
dlgSgSetup.lbl"Please wait ..."=しばらくお待ちください...
#                             !=Please wait ...
dlgSgSetup.lbl"Searching repositories in $1 ..."=
#                                              !=Searching repositories in $1 ...
dlgSgSetup.lbl"Sent data contains \*no potentially sensitive information\* like user names, email addresses, file contents, file paths or server names."=送信されるデータには、ユーザー名、メールアドレス、ファイルの内容、ファイルパス、サーバー名などの\*機密情報になり得る情報\*は一切含まれていません。
#                                                                                                                                                      !=Sent data contains \*no potentially sensitive information\* like user names, email addresses, file contents, file paths or server names.
dlgSgSetup.lbl"Steps"=ステップ
#                   !=Steps
dlgSgSetup.lbl"You confirm that you will use SmartGit solely for non-commercial purposes."=\
 お客様は、SmartGitを非商業的な目的でのみ使用することを確認します。
dlgSgSetup.lbl"You have purchased a SmartGit license and are eligible to use SmartGit for both commercial and non-commercial purposes."=\
 お客様は、SmartGitのライセンスを購入し、商用・非商用を問わず、SmartGitを使用することができます。
dlgSgSetup.lbl"You may try SmartGit free of charge for 30 days."=\
 SmartGit は 30 日間無料でお試しいただけます。
dlgSgSetup.lbl"easy to set up and use, supports public key and password authentication"=公開鍵認証とパスワード認証に対応し、簡単に設定・使用できます。
#                                                                                     !=easy to set up and use, supports public key and password authentication
dlgSgSetup.lbl"may be harder to configure and use for new users, but is more flexible"=新しいユーザーにとっては設定や使い方が難しいかもしれませんが、より柔軟性があります。
#                                                                                    !=may be harder to configure and use for new users, but is more flexible
dlgSgSetup.rbt"Commits \(Log History\)"=コミット \(ログ履歴\)
dlgSgSetup.rbt"Free SmartGit evaluation for commercial use"=\
 SmartGitの無償評価版 \(商用利用可\)
dlgSgSetup.rbt"Log Graph \(commit oriented\)"=ロググラフ \(コミット中心\)
dlgSgSetup.rbt"Non-commercial use only \(most features, no support\)"=\
 非商用利用のみ （ほとんどの機能、サポートなし）
dlgSgSetup.rbt"Registered user, commercial use \(all features, support\)"=\
 登録ユーザー、商用利用\(全機能、サポート\)
dlgSgSetup.rbt"Standard \(workflow oriented\)"=スタンダード\(ワークフロー中心\)
dlgSgSetup.rbt"Undecided"=未定
dlgSgSetup.rbt"Use SmartGit as SSH client"=SmartGitをSSHクライアントとして使用
dlgSgSetup.rbt"Use system SSH client"=システムSSHクライアントの使用
dlgSgSetup.rbt"Working tree \(file oriented\)"=作業ツリー \(ファイル中心\)
dlgSgSetup.tle=SmartGit のセットアップ
dlgSgSetupStdWnd.btn"Use Standard Window"=
#                                       !=Use Standard Window
dlgSgSetupStdWnd.fur=
#                  !=We recommend the Standard window for \*new or less experienced Git users\*.\n\nIf you have used older SmartGit versions, you might be surprised that the Standard window \*looks different\* than you are used to. In case you want to get the previous experience, consider to select the \*Log Graph\* or \*Working Tree\* window instead.
dlgSgSetupStdWnd.hdl=
#                  !=Do you want to use the Standard Window?
dlgSgSetupStdWnd.tle%1=
#                    !=Setup SmartGit $1
dlgSgShowLocalChanges.btn"Compare"=比較
dlgSgShowLocalChanges.hdl%1=インデックスと作業ツリーでファイル$1が変更されました。
dlgSgShowLocalChanges.inf=比較するファイルの状態を選択します。
dlgSgShowLocalChanges.rbt"HEAD vs. Index"=HEAD 対 Index
dlgSgShowLocalChanges.rbt"HEAD vs. Working Tree"=HEAD 対 作業ツリー
dlgSgShowLocalChanges.rbt"Index vs. Working Tree"=インデックスと作業ツリー
dlgSgShowLocalChanges.tle=比較する
dlgSgSplitOffFiles.btn"JIRA"==JIRA
dlgSgSplitOffFiles.btn"Split Off"=分割する
dlgSgSplitOffFiles.edt"Commit Message"=コミットメッセージ
dlgSgSplitOffFiles.hdl=ファイルを2番目のコミットに移動する
dlgSgSplitOffFiles.inf=選択したファイルからの変更を含める必要がある 2 番目のコミットのメッセージを入力します。
dlgSgSplitOffFiles.tle=ファイルを分割
dlgSgSplitOffFilesEmptyCommit.fur=すべてのファイルを分割すると、結果のコミットは空になります。
dlgSgSplitOffFilesEmptyCommit.hdl=コミットからすべてのファイルを分割することはできません
dlgSgSplitOffFilesEmptyCommit.tle=コミット
dlgSgSshCredentials.btn"Login"=ログイン
dlgSgSshCredentials.chk"Store passphrase"=パスフレーズを保存する
dlgSgSshCredentials.chk"Store password"=パスワードの保存
dlgSgSshCredentials.edt"Authentication Type"=認証タイプ
dlgSgSshCredentials.edt"Passphrase"=パスフレーズ
dlgSgSshCredentials.edt"Password"=パスワード
dlgSgSshCredentials.edt"Private Key File"=秘密鍵ファイル
dlgSgSshCredentials.hdl=SSH 資格情報
dlgSgSshCredentials.inf=ユーザー「root」としてSSHサーバー「git」を認証するための認証情報を入力します。
#                     !=<REMOVED>
dlgSgSshCredentials.inf%2=ユーザー「root」としてSSHサーバー「git」を認証するための認証情報を入力します。
#                       !=Provide the credentials for authenticating to the SSH server '$1' as user '$2'.
dlgSgSshCredentials.lbl"Only private key files with OpenSSH format are supported."=
#                                                                                !=Only private key files with OpenSSH format are supported.
dlgSgSshCredentials.rbt"Password"=パスワード
dlgSgSshCredentials.rbt"Private Key"=秘密鍵
dlgSgSshCredentials.tle=SSH認証
dlgSgSshCredentials.wrn"$1"==$1
dlgSgStageConflict.btn"Stage Anyway"=とにかくステージ
dlgSgStageConflict.fur=このファイルには、すべての競合が解決されていないことを示す競合マーカーが含まれています。
dlgSgStageConflict.hdl%1=$1 は本当にステージングする必要がありますか?
dlgSgStageConflict.tle=ステージ
dlgSgStageNoFilesFound.fur=作業ツリーが変更されたファイル、追跡されていないファイル、または見つからないファイルが見つかりませんでした。
dlgSgStageNoFilesFound.hdl=ステージングできるファイルが見つかりませんでした。
dlgSgStageNoFilesFound.tle=ステージ
dlgSgStartupExpired.btn"&Continue \($1\)"=&続行 \($1\)
dlgSgStartupExpired.btn"Continue \($1\)"=続行 \($1\)
dlgSgStartupExpired.btn"Download New Version"=新バージョンのダウンロード
dlgSgStartupExpired.btn"Exit"=終了
dlgSgStartupExpired.fur=新しいバージョンまたはリリース バージョンをダウンロードしてインストールしてください。
dlgSgStartupExpired.hdl=このベータ版は有効期限切れです。
dlgSgStartupExpired.tle=ベータ版終了のお知らせ
dlgSgStashAll.btn"+ Keep Index"=+ インデックスを残す
dlgSgStashAll.btn"+ Keep Working Tree"=+ ワーキングツリーを残す
dlgSgStashAll.btn"Stash All"=すべての変更を隠す
dlgSgStashAll.btn"Stash Selection"=選択した変更を隠す
dlgSgStashAll.edt"Message"=メッセージ
dlgSgStashAll.hdl=インデックスとワーキングツリーの変更をスタッシュ
dlgSgStashAll.inf=保存されたスタッシュは後で適用することができます。デフォルトでは、インデックスとワーキングツリーがクリーンアップされますが、インデックスを残すか、両方を残すこともできます。
dlgSgStashAll.tle=スタッシュに保存
dlgSgStashApply.btn"Apply && Drop"=適用してドロップ
dlgSgStashApply.btn"Apply"=適用
dlgSgStashApply.chk"Restore Index"=インデックスを復元
dlgSgStashApply.hdl"Apply a previously saved stash"=以前に保存したスタッシュを適用
dlgSgStashApply.hdl"Apply the latest saved stash"=最新の保存されたスタッシュを適用する
dlgSgStashApply.inf=インデックスやワーキングツリーにスタッシュをどのように適用するかを選択してください。
dlgSgStashApply.tle=スタッシュを適用
dlgSgStashApplyWithoutRestoringIndex.btn"Try Without Restoring Index"=インデックスを復元せずに試す
dlgSgStashApplyWithoutRestoringIndex.fur=パッチの適用中にインデックスの復元に失敗しました。
dlgSgStashApplyWithoutRestoringIndex.hdl=インデックスを復元せずにスタッシュを適用しますか?
dlgSgStashApplyWithoutRestoringIndex.tle=スタッシュを適用
dlgSgStashOnDemandConfirmation.btn"Discard"=破棄
dlgSgStashOnDemandConfirmation.btn"Save Stash"=スタッシュに保存
dlgSgStashOnDemandConfirmation.chk=自動的にスタッシュを保存
dlgSgStashOnDemandConfirmation.fur=後で手動で再適用するためのに変更をスタッシュに退避するか、変更を廃棄するか選択してください。
#                                !=Checkout may require a clean working tree to complete successfully. After the Checkout succeeded, the stashed local changes will be automatically reapplied.
dlgSgStashOnDemandConfirmation.hdl=ワーキングツリー/Indexの変更をどのようにしますか？
#                                !=Do you want to save local changes to a stash and retry Checkout?
dlgSgStashOnDemandConfirmation.tle=リセット
#                                !=Checkout
dlgSgStashOnDemandLocalChangesCantBeReapplied.fur=プルが完了したら、最新のスタッシュを手動で適用し、ローカルの変更を作業ツリーに戻す必要があります。
dlgSgStashOnDemandLocalChangesCantBeReapplied.hdl=ローカルの変更はスタッシュに退避されましたが、再適用できませんでした。
dlgSgStashOnDemandLocalChangesCantBeReapplied.tle=プル
dlgSgStashOnDemandProceedWithoutStashing.btn"Proceed"=続行
dlgSgStashOnDemandProceedWithoutStashing.fur=技術的な理由により、変更を自動的にスタッシュすることはできません。変更は破棄されます。
dlgSgStashOnDemandProceedWithoutStashing.hdl=変更を保存せずに続行しますか?
dlgSgStashOnDemandProceedWithoutStashing.tle=リセット
dlgSgStashRename.btn"Rename"=リネーム
dlgSgStashRename.edt"Message"=メッセージ
dlgSgStashRename.hdl=リネーム
dlgSgStashRename.inf=スタッシュの新しいメッセージを入力してください
dlgSgStashRename.tle=リネーム
dlgSgStashesDropConfirm.btn"Drop Stash"=スタッシュを削除
dlgSgStashesDropConfirm.btn"Drop Stashes"=スタッシュを削除
dlgSgStashesDropConfirm.fur=スタッシュに保存された変更内容は失われます。
dlgSgStashesDropConfirm.hdl=選択したスタッシュを削除しますか？
dlgSgStashesDropConfirm.tle=スタッシュを削除
dlgSgSubmoduleAdd.chk"Map SVN trunk, tags and branches to Git"=\
 SVNのトランク、タグ、ブランチをGitにマップする
dlgSgSubmoduleAdd.edt"Branch"=ブランチ
dlgSgSubmoduleAdd.edt"Local Directory"=ローカルディレクトリ
dlgSgSubmoduleAdd.edt"Local Path"=ローカルパス
dlgSgSubmoduleAdd.edt"Relative Path"=相対パス
#                                  !=Relative Path
dlgSgSubmoduleAdd.edt"Repository URL"=リポジトリ URL
dlgSgSubmoduleAdd.edt"URL"==URL
dlgSgSubmoduleAdd.inf"Provide the path where the submodule should be added relative to the outer repository root directory."=\
 サブモジュールを追加するパスを、外部リポジトリのルート ディレクトリからの相対パスで指定します。
dlgSgSubmoduleAdd.inf"Specify the repository to clone as submodule."=\
 サブモジュールとしてクローンするリポジトリを指定します。
dlgSgSubmoduleAdd.lbl"Please wait ..."=しばらくお待ちください...
#                                    !=Please wait ...
dlgSgSubmoduleAdd.lbl"Steps"=ステップ
#                          !=Steps
dlgSgSubmoduleAdd.lbl"e.g. https://user@server:port/path/to/repository"=例: https://user@server:port/path/to/repository
dlgSgSubmoduleAdd.mni"Add Hosting Provider"=ホスティングプロバイダーを追加
dlgSgSubmoduleAdd.rbt"Local repository"=ローカルリポジトリ
dlgSgSubmoduleAdd.rbt"Remote repository"=リモートリポジトリ
dlgSgSubmoduleAdd.tle=サブモジュールを追加
dlgSgSubmoduleDeinitConfirm.btn"Deinit"=削除\(Deinit\)
dlgSgSubmoduleDeinitConfirm.fur=サブモジュールは作業ツリーからスキップされます。 \(リモート\) リポジトリから削除するには、代わりに 「登録を解除」 を使用する必要があります。
dlgSgSubmoduleDeinitConfirm.hdl%1=サブモジュール'$1'をdeinitしますか？
dlgSgSubmoduleDeinitConfirm.tle=サブモジュールの削除
dlgSgSubmoduleInitGit.btn"Initialize && Pull"=
#                                           !=Initialize && Pull
dlgSgSubmoduleInitGit.btn"Initialize"=初期化
#                                   !=Initialize
dlgSgSubmoduleInitGit.edt"URL"==URL
#                            !=URL
dlgSgSubmoduleInitGit.hdl=
#                       !=Set submodule URL
dlgSgSubmoduleInitGit.inf=
#                       !=You can customize the submodule's clone URL used in .git/config for your local setup.
dlgSgSubmoduleInitGit.tle=
#                       !=Initialize Submodule
dlgSgSubmoduleResetConfirm.btn"Reset"=リセット
dlgSgSubmoduleResetConfirm.fur=対応するコミットがチェックアウトされるため、サブモジュールの内容は登録されたコミットの内容と一致します。
dlgSgSubmoduleResetConfirm.hdl%1=サブモジュール '$1' をリポジトリに登録されているコミットの状態にリセットしますか？
dlgSgSubmoduleResetConfirm.tle=サブモジュールのリセット
dlgSgSubmoduleResetHeadNotAccessibleAnymore.btn"Reset"=リセット
#                                                    !=Reset
dlgSgSubmoduleResetHeadNotAccessibleAnymore.fur=
#                                             !=The submodule HEAD is not reachable from any ref. After resetting, it will be hard to access this commit.
dlgSgSubmoduleResetHeadNotAccessibleAnymore.hdl=
#                                             !=Do you want to perform the reset even though you will loose access to the current HEAD commit?
dlgSgSubmoduleResetHeadNotAccessibleAnymore.tle=サブモジュールのリセット
#                                             !=Reset Submodule
dlgSgSubmoduleSync.btn"Synchronize"=同期
dlgSgSubmoduleSync.chk"Pull submodule repositories"=サブモジュールレポジトリをプル
dlgSgSubmoduleSync.hdl=すべてのサブモジュールを同期する
dlgSgSubmoduleSync.inf=サブモジュールのエントリは .git/config で更新されます。後で URL をカスタマイズするか、すぐにプルすることができます。
dlgSgSubmoduleSync.tle=サブモジュールの同期
dlgSgSubtreeAdd.chk"Create local branch \(for advanced operations\)"=\
 ローカルブランチの作成 \(高度な操作用\)
dlgSgSubtreeAdd.chk"Squash subtree into single commit"=サブツリーを 1 つのコミットにスカッシュする
dlgSgSubtreeAdd.edt"Branch"=ブランチ
dlgSgSubtreeAdd.edt"Local Directory"=ローカルディレクトリ
dlgSgSubtreeAdd.edt"Local Path"=ローカルパス
dlgSgSubtreeAdd.edt"Remote"=リモート
dlgSgSubtreeAdd.edt"Repository URL"=リポジトリ URL
dlgSgSubtreeAdd.inf"Provide the path where the subtree should be added relative to the outer repository root directory."=\
 サブツリーを追加するパスを、外部リポジトリ ルート ディレクトリからの相対パスで指定します。
dlgSgSubtreeAdd.inf"Specify the repository to clone as subtree."=\
 サブツリーとしてクローンするリポジトリを指定します。
dlgSgSubtreeAdd.lbl"Local branches for subtrees will only be useful if you plan to use Subtree-Split and Subtree-Reset operations."=\
 サブツリーのローカル ブランチは、Subtree-Split および Subtree-Reset を使用する予定がある場合にのみ役立ちます。
dlgSgSubtreeAdd.lbl"e.g. https://user@server:port/path/to/repository"=例: https://user@server:port/path/to/repository
dlgSgSubtreeAdd.rbt"Local repository"=ローカルリポジトリ
dlgSgSubtreeAdd.rbt"Remote repository"=リモートリポジトリ
dlgSgSubtreeAdd.tle=サブツリーを追加
dlgSgSvnClientCertificate.btn"Login"=ログイン
dlgSgSvnClientCertificate.chk"Store passphrase"=パスフレーズを保存する
dlgSgSvnClientCertificate.edt"Certificate"=証明書
dlgSgSvnClientCertificate.edt"Passphrase"=パスフレーズ
dlgSgSvnClientCertificate.hdl=クライアント証明書
dlgSgSvnClientCertificate.inf%1=SVNリポジトリ'$1'への認証用クライアント証明書を提供します。
dlgSgSvnClientCertificate.tle=SVN認証
dlgSgSvnClientCertificate.wrn"Authentication to the SVN repository '$1' failed with error: $2"=\
 SVN リポジトリ '$1' への認証に失敗し、次のエラーが発生しました: '$2'
dlgSgSvnSslFingerprintChanged.btn"Accept"=承認
dlgSgSvnSslFingerprintChanged.btn"Reject"=却下
dlgSgSvnSslFingerprintChanged.edt"MD5 fingerprint"=MD5 フィンガープリント
dlgSgSvnSslFingerprintChanged.edt"SHA fingerprint"=SHA フィンガープリント
dlgSgSvnSslFingerprintChanged.edt"Server"=サーバ
dlgSgSvnSslFingerprintChanged.lbl"The server fingerprint has changed! Is the change correct?"=\
 サーバーのフィンガープリントが変更されました!この変更は正しいですか？
dlgSgSvnSslFingerprintChanged.lbl"This might indicate a security problem! When in doubt, contact your server administrator."=\
 これは、セキュリティ上の問題を示している可能性があります。疑わしい場合は、サーバー管理者に連絡してください。
dlgSgSvnSslFingerprintChanged.tle=SVN認証
dlgSgSyncConfirm.btn"Synchronize"=同期
dlgSgSyncConfirm.chk=次回から表示しない
dlgSgSyncConfirm.fur=まず、ローカルの変更がプッシュされ、次に可能性のあるリモートの変更がプルされます。\r通常のプッシュに比べて優れているのは、リモートの変更が原因で失敗した場合、それらが自動的にプルされることです。
dlgSgSyncConfirm.hdl=同期を実行しますか？
dlgSgSyncConfirm.tle=同期
dlgSgTagAdd.btn"Add Tag && Push"=タグを追加してプッシュ
dlgSgTagAdd.btn"Add Tag"=タグを追加
dlgSgTagAdd.chk"GPG-sign tag"=GPG 署名タグ
dlgSgTagAdd.edt"Annotated Tag Message"=注釈付きタグメッセージ
dlgSgTagAdd.edt"Tag"=タグ
dlgSgTagAdd.err"The name must not end with a slash or dot."=\
 名前の末尾にスラッシュまたはドットを使用することはできません。
dlgSgTagAdd.hdl=現在のHEADコミットにタグを追加
#             !=Add tag to selected commit
dlgSgTagAdd.inf=作成するタグの名前を入力します。メッセージを入力した場合は、注釈付きタグが作成されます。
dlgSgTagAdd.tle=タグを追加
dlgSgTagAddOverwrite.btn"Overwrite"=上書き
dlgSgTagAddOverwrite.fur='キャンセル'をクリックすると、別のタグ名を選択できます。
dlgSgTagAddOverwrite.hdl%1=タグ '$1' はすでに存在しています。上書きしますか？
dlgSgTagAddOverwrite.tle=タグを追加
dlgSgTagDeleteConfirmSingle.btn"Delete"=削除
dlgSgTagDeleteConfirmSingle.chk%1=リモート '$1' から削除
dlgSgTagDeleteConfirmSingle.fur=復元できなくなります。
dlgSgTagDeleteConfirmSingle.hdl%1=タグ'$1'を削除しますか？
dlgSgTagDeleteConfirmSingle.tle=削除
dlgSgToolAdd.edt"Keyboard Shortcut"=キーボード ショートカット
dlgSgToolAdd.err"Please enter a confirmation message."=確認メッセージを入力してください。
dlgSgToolAdd.err"Please enter the name for this command."=\
 このコマンドの名前を入力してください。
dlgSgToolAdd.err"Select the command which should be invoked."=\
 起動するコマンドを選択します。
dlgSgToolAdd.err"The options 'Can be used by the Open command' and 'Show output and wait until finished' cannot both be set."=\
 「開くコマンドで使用可能」と「出力を表示して終了まで待つ」のオプションは、同時に設定することができません。
dlgSgToolAdd.hdl=外部ツールの追加
dlgSgToolAdd.tle=追加
dlgSgToolEdit.edt"Keyboard Shortcut"=キーボード ショートカット
dlgSgToolEdit.err"Please enter the name for this command."=\
 このコマンドの名前を入力してください。
dlgSgToolEdit.hdl=外部ツールの編集
dlgSgToolEdit.tle=編集
dlgSgTool(Add|Edit).btn"Clear"=クリア
dlgSgTool(Add|Edit).chk"Can be used by the Open command"=\
 「開く」コマンドで使用可能
dlgSgTool(Add|Edit).chk"Request confirmation before invoking:"=起動する前に確認を求める
dlgSgTool(Add|Edit).chk"Show output and wait until finished"=\
 出力を表示し、終了するまで待機する
dlgSgTool(Add|Edit).edt"Accelerator"=ショートカット
dlgSgTool(Add|Edit).edt"Applies To"=適用対象
dlgSgTool(Add|Edit).edt"Arguments"=引数
dlgSgTool(Add|Edit).edt"Command"=コマンド
dlgSgTool(Add|Edit).edt"Handles"=対象
dlgSgTool(Add|Edit).edt"Menu Item Name"=メニュー項目名
dlgSgTool(Add|Edit).inf=ツールメニューの項目名、実行するコマンド、その引数を定義します。\r引数は、そのツールをどの選択項目に対して使用するかを定義します。
dlgSgTool(Add|Edit).lbl"Valid wildcards are ?\u00a0\(one arbitrary character\) and \*\u00a0\(any number of arbitrary characters\). Separate multiple patterns by comma. Example:\u00a0\*.txt,\u00a0\*.html"=\
 有効なワイルドカードは下記のとおりです。複数のパターンはコンマで区切ります。\r例：*.txt,*.html \r ? (任意の1文字) \r * (任意の数の任意の文字)
dlgSgTool(Add|Edit).mni"2nd Commit ID or Ref \(optional\)"=\
 2番目のコミットIDまたはRef \(オプション\)
dlgSgTool(Add|Edit).mni"2nd Commit ID or Ref"=2番目のコミットIDまたはRef
dlgSgTool(Add|Edit).mni"Commit ID or Ref"=コミットIDまたはRef
dlgSgTool(Add|Edit).mni"Configured Text File Encoding"=設定されたテキストファイルのエンコーディング
dlgSgTool(Add|Edit).mni"File or Directory Name"=ファイル名またはディレクトリ名
dlgSgTool(Add|Edit).mni"File or Directory Path"=ファイルまたはディレクトリのパス
dlgSgTool(Add|Edit).mni"File or Directory URI"=ファイルまたはディレクトリのURI
dlgSgTool(Add|Edit).mni"Git Executable"=Git 実行ファイル
dlgSgTool(Add|Edit).mni"Git Installation"=Git のインストール先
dlgSgTool(Add|Edit).mni"Remote \(Push\) URL"=リモート \(Push\) URL
dlgSgTool(Add|Edit).mni"Repository Root Path"=リポジトリルートパス
dlgSgTool(Add|Edit).mni"Selection File"=選択されたファイル
dlgSgTool(Add|Edit).mni"Show Directory Selection Dialog"=ディレクトリ選択ダイアログを表示する
dlgSgTool(Add|Edit).mni"Show Open File Dialog"=ファイルを開くダイアログを表示する
dlgSgTool(Add|Edit).mni"Show Save File Dialog"=ファイル保存ダイアログを表示する
dlgSgTool(Add|Edit).mni"SmartGit Installation"=SmartGitのインストール先
dlgSgTool(Add|Edit).rbt"Both"=両方
dlgSgTool(Add|Edit).rbt"Commits"=コミット
dlgSgTool(Add|Edit).rbt"Directories"=ディレクトリ
dlgSgTool(Add|Edit).rbt"Files"=ファイル
dlgSgTool(Add|Edit).rbt"Refs"==Refs
dlgSgUndoLastCommitConfirm.btn"Undo"=元に戻す
dlgSgUndoLastCommitConfirm.fur"Message: $1"=メッセージ: $1
dlgSgUndoLastCommitConfirm.fur"Undoing an already pushed commit might cause serious problems!\n\nMessage: $1"=\
 既にプッシュされたコミットを元に戻すと、深刻な問題が発生する可能性があります！\n\nメッセージ: $1
dlgSgUndoLastCommitConfirm.hdl=最後のローカルコミットを元に戻しますか？
dlgSgUndoLastCommitConfirm.tle=直前のコミットを元に戻す
dlgSgUnstageNoFilesFound.fur=ステージングされた変更を含むファイルが見つかりませんでした。
dlgSgUnstageNoFilesFound.hdl=アンステージできるファイルが見つかりませんでした。
dlgSgUnstageNoFilesFound.tle=アンステージ
dlgSgWelcome.chk"Show this dialog if no repository was opened"=\
 リポジトリが開かれていない場合にこのダイアログを表示する
dlgSgWelcome.hdl=何をしますか？
dlgSgWelcome.inf=新規のローカルリポジトリを開くか、リモートリポジトリをクローンするか、既存のリポジトリを開くかを選択します。
dlgSgWelcome.rbt"Add an existing local or create a new repository"=\
 既存のローカルリポジトリの追加又は新しいリポジトリを作成する
dlgSgWelcome.rbt"Clone existing repository"=既存のリポジトリをクローンする
dlgSgWelcome.rbt"Reopen previously used repository:"=以前使用していたリポジトリを開く
dlgSgWelcome.tle=SmartGitへようこそ
dlgSgWorktreeAdd.edt"Branch"=ブランチ
dlgSgWorktreeAdd.edt"Directory"=ディレクトリ
dlgSgWorktreeAdd.hdl=このリポジトリから別のワークツリーを作成する
dlgSgWorktreeAdd.inf=新しいワークツリーで使用するブランチとディレクトリを選択します。
dlgSgWorktreeAdd.tle=ワークツリーを追加
dlgSgWorktreeAddNoMoreLocalBranches.fur=ワークツリーが関連付けられていない既存のローカル ブランチに対してのみ、ワークツリーを作成できます。
dlgSgWorktreeAddNoMoreLocalBranches.hdl=\(これ以上\) ローカル ブランチはありません。
dlgSgWorktreeAddNoMoreLocalBranches.tle=ワークツリーを追加
dlgSgWorktreePruneNoWorktree.fur=すべてのワークツリーは引き続き使用できます。
dlgSgWorktreePruneNoWorktree.hdl=プルーニング\(剪定\)するワークツリーがありません。
dlgSgWorktreePruneNoWorktree.tle=廃止されたワークツリーを整理する
dlgSgWorktreePruneWorktrees.btn"Prune Worktrees"=ワークツリーを整理する
#                                              !=Prune Worktrees
dlgSgWorktreePruneWorktrees.fur=Git は次のワークツリーが廃止されたと報告しました:
#                             !=Git reported following worktrees as obsolete:
dlgSgWorktreePruneWorktrees.hdl=以下の作業ツリーをプルーン\(prune\)しますか？
#                             !=Do you want to prune following worktrees?
dlgSgWorktreePruneWorktrees.tle=廃止されたワークツリーを整理する
#                             !=Prune Obsolete Worktrees
dlgSg(Preferences|Pull|RepositorySettings).rbt"Merge fetched remote changes"=取得したリモートの変更をマージ
dlgSg(Preferences|Pull|RepositorySettings).rbt"Rebase local branch onto fetched changes"=\
 取得した変更点に合わせてローカルブランチをリベース
dlgShPushTrackingLocalSvnBranches.btn"Push as New"=新規としてプッシュ
dlgShPushTrackingLocalSvnBranches.btn"Push onto Existing"=既存のものにプッシュ
dlgShPushTrackingLocalSvnBranches.fur=ローカル ブランチを SVN リポジトリにプッシュします。これらのブランチは、新しいブランチとしてプッシュするか、既存の SVN 対応するブランチにプッシュすることができます \(ほとんどの場合に推奨\)。
dlgShPushTrackingLocalSvnBranches.hdl=ローカルブランチを新しいSVNブランチとしてプッシュしますか？
dlgShPushTrackingLocalSvnBranches.tle=プッシュ
dlgTxtEditor.fileModified.btn"Keep Content"=コンテンツを保持
dlgTxtEditor.fileModified.btn"Reload"=再読込
dlgTxtEditor.fileModified.fur=古いファイルの状態を見たいのでなければ、再読み込みすることをお勧めします。
dlgTxtEditor.fileModified.hdl=ファイル構成が変更されました。再読み込みしますか？
dlgTxtEditor.fileModified.tle=エディタ
dlg(DgRefMapperGroupConfig|SgPreferences|SgRepositorySettings).edt"Group Patterns"=グループパターン
dlg(DgRefMapperGroupConfig|SgPreferences|SgRepositorySettings).edt"Single Patterns"=シングルパターン
dlg(DgRefMapperGroupConfig|SgPreferences|SgRepositorySettings).lbl"Tags, branches and other refs matched by this configuration will be grouped in the File Log and show up in the Commit details. It will also be used for grouping the 'Tags'-category of the Branches view."=\
 この設定で一致したタグ、ブランチ、その他の参照は、ファイルログにまとめられ、コミットの詳細に表示されます。この設定は、ブランチ ビューの"Tags"カテゴリのグループ化にも使用されます。
dlg(DgRefMapperGroupConfig|SgPreferences|SgRepositorySettings).tab"Tag-Grouping"=タグ-グルーピング
dlg(ScConflictSolverAdd|ScConflictSolverEdit|ScFileComparatorAdd|ScFileComparatorEdit).err"Please enter a file pattern \(e.g. \*.txt, \*.java\)."=\
 ファイル パターンを入力してください。 \(例: \*.txt、\*.java \)
dlg(ScConflictSolverAdd|ScConflictSolverEdit|ScFileComparatorAdd|ScFileComparatorEdit).err"Select the command which should be invoked."=\
 起動するコマンドを選択します。
dlg(ScConflictSolverAdd|ScConflictSolverEdit|ScFileComparatorAdd|ScFileComparatorEdit).err"Specify the necessary arguments for the command, especially the required variable."=\
 コマンドに必要な引数、特に必要な変数を指定します。
dlg(ScConflictSolverAdd|ScConflictSolverEdit|ScFileComparatorAdd|ScFileComparatorEdit).err"Specify the necessary arguments for the command, especially the required variables."=\
 コマンドに必要な引数、特に必要な変数を指定します。
dlg(ScConflictSolverAdd|ScConflictSolverEdit|ScFileComparatorAdd|ScFileComparatorEdit).err"The Arguments require the variable \$\{file\}."=\
 引数には、変数 \$\{file\} が必要です。
dlg(ScConflictSolverAdd|ScConflictSolverEdit|ScFileComparatorAdd|ScFileComparatorEdit).err"The Arguments require the variables \$\{leftFile\} and \$\{rightFile\}."=\
 引数には変数 \${leftFile}, \${rightFile} が必要です。
dlg(ScConflictSolverAdd|ScConflictSolverEdit|ScFileComparatorAdd|ScFileComparatorEdit).err"The Arguments require the variables \$\{leftFile\}, \$\{rightFile\} and \$\{mergedFile\}."=\
 引数には変数 \${leftFile}, \${rightFile}, \${mergedFile} が必要です。
dlg(ScConflictSolverAdd|ScConflictSolverEdit|ScFileComparatorAdd|ScFileComparatorEdit).lbl"You must use the variable \$\{file\}."=\
 変数 \$\{file\} を使用する必要があります。
dlg(ScConflictSolverAdd|ScConflictSolverEdit|ScFileComparatorAdd|ScFileComparatorEdit).lbl"You must use the variables \$\{leftFile\} and \$\{rightFile\}."=\
 変数 \$\{leftFile\}, \$\{rightFile\} を使用する必要があります。
dlg(SgDeleteFileTrash|SgDeleteFilesTrash).btn"Delete"=削除
dlg(SgDeleteFileTrash|SgDeleteFilesTrash).btn"Move to Trash"=ゴミ箱へ移動
dlg(SgDeleteFileTrash|SgDeleteFilesTrash).fur=「削除」をクリックすると、削除されたファイルを復元するためにファイル復元ツールが必要になる場合があります。
dlg(SgDeleteFileTrash|SgDeleteFilesTrash).tle=削除
dlg(SgRepositoryRemoveMultiGroup|SgRepositoryRemoveMultiRepo|SgRepositoryRemoveMultiRepoMultiGroup|SgRepositoryRemoveMultiRepoSingleGroup|SgRepositoryRemoveSingleGroup|SgRepositoryRemoveSingleRepo|SgRepositoryRemoveSingleRepoMultiGroup|SgRepositoryRemoveSingleRepoSingleGroup).btn"Remove"=除去
dlg(SgRepositoryRemoveMultiGroup|SgRepositoryRemoveMultiRepo|SgRepositoryRemoveMultiRepoMultiGroup|SgRepositoryRemoveMultiRepoSingleGroup|SgRepositoryRemoveSingleGroup|SgRepositoryRemoveSingleRepo|SgRepositoryRemoveSingleRepoMultiGroup|SgRepositoryRemoveSingleRepoSingleGroup).chk=次回から表示しない
dlg(SgRepositoryRemoveMultiGroup|SgRepositoryRemoveMultiRepo|SgRepositoryRemoveMultiRepoMultiGroup|SgRepositoryRemoveMultiRepoSingleGroup|SgRepositoryRemoveSingleGroup|SgRepositoryRemoveSingleRepo|SgRepositoryRemoveSingleRepoMultiGroup|SgRepositoryRemoveSingleRepoSingleGroup).tle=除去
edt"Search For"=検索対象
ntmCredentialHelper"$1 and <b>prepend</b> following lines:"=$1 と、以下の行を<b>先頭に追加</b>してください。:
#                                                         !=$1 and <b>prepend</b> following lines:
ntmCredentialHelper"<b>  helper\=</b>"==<b>  helper\=</b>
#                                    !=<b>  helper\=</b>
ntmCredentialHelper"<b>\[credential\]</b>"==<b>\[credential\]</b>
#                                        !=<b>\[credential\]</b>
ntmCredentialHelper"In case you are encountering strange errors or unexpected dialog popups, try to disable this configuration and let SmartGit handle the authentication itself."=\
 奇妙なエラーや予期せぬダイアログのポップアップが表示される場合は、この設定を無効にして、SmartGitに認証処理を任せてみてください。
ntmCredentialHelper"In general this should be fine and is the recommended configuration when working with multiple Git clients. In case you are encountering strange errors or unexpected dialog popups, try to disable this configuration and let SmartGit handle the authentication itself."=一般的にはこれで問題ありません。複数のGitクライアントを使用する場合には推奨される構成です。ただし、不明なエラーや予期しないダイアログのポップアップが表示される場合は、この構成を無効にして、SmartGitに認証を任せるようにしてみてください。
#                                                                                                                                                                                                                                                                                            !=In general this should be fine and is the recommended configuration when working with multiple Git clients. In case you are encountering strange errors or unexpected dialog popups, try to disable this configuration and let SmartGit handle the authentication itself.
ntmCredentialHelper"In general this should be fine and is the recommended configuration when working with multiple Git clients."=\
 一般的にはこれで問題ありません。複数のGitクライアントを使用する場合はこの設定を推奨します。
ntmCredentialHelper"SmartGit has detected that <b>credential.helper</b> is configured in config file $1."=\
 SmartGit は、設定ファイル $1 で<b>credential.helper</b>が設定されていることを検出しました。
ntmCredentialHelper"To disable this configuration, open the above config file, locate the <b>\[credential\]</b>-section and comment out the <b>helper\=</b> line using <b>#</b>"=\
 この設定を無効にするには、上記の設定ファイルを開き、 <b>\[credential\]</b>セクションの<b>helper\=</b>の行頭に<b>#</b>を付加してコメントアウトしてください。
ntmFollowUsOnTwitter"<link1>Facebook</link1>: news"=<link1>Facebook</link1>: ニュース
#                                                 !=<link1>Facebook</link1>: news
ntmFollowUsOnTwitter"<link1>Mastodon</link1>: news, polls, discussions"=<link1>Mastodon</link1>: ニュース、投票、ディスカッション
#                                                                     !=<link1>Mastodon</link1>: news, polls, discussions
ntmFollowUsOnTwitter"<link1>Twitter</link1>: news, polls, discussions"=<link1>Twitter</link1>: ニュース、投票、ディスカッション
#                                                                    !=<link1>Twitter</link1>: news, polls, discussions
ntmFollowUsOnTwitter"<link1>UserEcho</link1>: improvement ideas, discussions"=<link1>UserEcho</link1>：改善のアイデア、ディスカッション
#                                                                           !=<link1>UserEcho</link1>: improvement ideas, discussions
ntmFollowUsOnTwitter"<link1>YouTube</link1>: tutorial and expert videos"=<link1>YouTube</link1>:  チュートリアルと専門家の動画
#                                                                      !=<link1>YouTube</link1>: tutorial and expert videos
ntmFollowUsOnTwitter"Follow us on your favorite social media platforms to receive news, learn about features or influence future versions of SmartGit with your requests and feedback!"=お好きなソーシャル・メディア・プラットフォームで私たちをフォローして、ニュースを受け取ったり、機能について学んだり、 要望やフィードバックでSmartGitの将来のバージョンに影響を与えたりしてください！
#                                                                                                                                                                                     !=Follow us on your favorite social media platforms to receive news, learn about features or influence future versions of SmartGit with your requests and feedback!
ntmFollowUsOnTwitter"It's a great way to help shaping future versions of SmartGit!"=\
 これは、SmartGit の将来のバージョンの形成を助ける素晴らしい方法です!
ntmFollowUsOnTwitter"We are using Twitter to:"=私たちは Twitter を使用して次のことを行います。
ntmFollowUsOnTwitter"announce new versions, including previews"=プレビューを含む新バージョンの発表
ntmFollowUsOnTwitter"inform about new features"=新機能についてのお知らせ
ntmFollowUsOnTwitter"poll for opinions on how to implement new or change existing features"=\
 機能追加・変更に関する意見募集
ntmHighMemoryUsage"If you are working with huge repositories, this may be OK. In this case, edit $1, increase the value of the -Xmx option, for example to -Xmx1024m \(or add it if not yet existing\) for better performance."=\
 巨大なリポジトリで作業している場合は、これで問題ないかもしれません。この場合、$1を編集し、-Xmxオプションの値を、例えば-Xmx1024mに増やす\(まだ存在しない場合は追加する\)ことで、より良いパフォーマンスを得ることができます。
ntmHighMemoryUsage"If you think that the configured memory limit is already quite high or you are not working with huge repositories, this may indicate a problem. Please let us know about it."=\
 構成されたメモリ制限がすでに非常に多いと思われる場合、または巨大なリポジトリで作業していない場合、これは問題を示している可能性があります。その場合は、私たちにお知らせください。
ntmHighMemoryUsage"SmartGit is close to the configured memory limit."=\
 SmartGit に対して設定されたメモリ制限に近づいています。
ntmHostingProviderIntegrationNotYetConfigured"SmartGit provides special support for $1. The integration can be configured in the Preferences."=\
 SmartGit は、$1 との連携に対応しています。連携機能は「環境設定」で設定することができます。
ntmMarkRepositoriesAsFavorite"Git repositories marked as 'favorites' will be refreshed and fetched automatically in the background."=\
 「お気に入り」としてマークされた Git リポジトリは、バックグラウンドで自動的に更新およびフェッチされます。
ntmMarkRepositoriesAsFavorite"To mark a repository as 'favorite', right-click on it in the 'Repositories' view and select 'Mark as Favorite'."=\
 リポジトリを「お気に入り」としてマークするには、[リポジトリ] ビューでリポジトリを右クリックし、[お気に入りとしてマーク] を選択します。
ntmPreferencesChangesRestartRequired"Some preferences options have been changed which will only be applied after restarting SmartGit."=\
 SmartGit の再起動後にのみ適用される一部の設定オプションが変更されました。
ntmProblematicGcConfiguration"Git's garbage collection is \(by default\) configured to run in background \(gc.autoDetach\) in your .gitconfig. This configuration is appropriate for command line client, but may cause troubles in combinations with GUI clients like SmartGit."=\
 Gitのガベージコレクションは、\(デフォルトでは\) バックグラウンドで実行するように設定されています \(.gitconfig 内の gc.autoDetach\)。この設定はコマンドラインクライアントには適していますが、SmartGitのようなGUIクライアントとの組み合わせでは問題が発生する可能性があります。
ntmRepositoryGitCleanup"The repository '$1' contains a significant amount of loose or even unused 'objects'. Running a cleanup will reduce disk space and increase performance. SmartGit will try to do so, when it is idle."=リポジトリ '$1' には、多数の loose objects や使用されていないオブジェクトが含まれています。クリーンアップを実行すると、ディスクスペースが節約され、パフォーマンスが向上します。SmartGitは、アイドル状態のときにこれを試みます。
#                                                                                                                                                                                                                           !=The repository '$1' contains a significant amount of loose or even unused 'objects'. Running a cleanup will reduce disk space and increase performance. SmartGit will try to do so, when it is idle.
ntmSupportExpired"To extend your support, please purchase an update license and upgrade to the latest SmartGit version."=\
 サポートを延長するには、更新ライセンスを購入し、SmartGit の最新バージョンにアップグレードしてください。
ntmSupportExpired"You may continue to use SmartGit, just your support period expired."=\
 サポート期間が終了しましたが、引き続きSmartGitを使用することができます。
ntmUpdateCheckFetchVersionStart"After the new version has been downloaded successfully, you will be notified again."=\
 新しいバージョンが正常にダウンロードされると、再度通知されます。
ntmUpdateCheckFetchVersionSuccess"SmartGit needs to be restarted now for the changes to take effect."=\
 変更を有効にするには、SmartGit を再起動する必要があります。
ntmUpdateCheckFetchVersionSuccess"Your SmartGit installation needs to be upgraded now."=\
 SmartGit インストールを今すぐアップグレードする必要があります。
ntmVoteForUs"Let us and other users know why you prefer SmartGit over other Git clients or what parts of SmartGit still need work!"=\
 他のGitクライアントよりSmartGitを好む理由や、SmartGitのどの部分にまだ改善が必要なのかを、私たちや他のユーザに教えてください。
ntmVoteForUs"share the pros and cons at <link1>slant.co</link1>"=\
 <link1>slant.co</link1>で長所と短所を共有
ntmVoteForUs"vote at <link1>alternativeto.net</link1>"=<link1>alternativeto.net</link1>で投票
nttCredentialHelper"External Credentials Helper detected"=外部の認証情報ヘルパーが検出されました
nttFollowUsOnTwitter"Follow SmartGit on Twitter!"=Twitter で SmartGit をフォローしてください !
nttFollowUsOnTwitter"Follow on Twitter"=Twitterでフォロー
nttFollowUsOnTwitter"Follow us!"=私たちをフォローしてください！
#                              !=Follow us!
nttGeneral"Don't show again"=次回から表示しない
nttGeneral"Remind me later"=後で通知する
nttHighMemoryUsage"Contact Support"=サポートに連絡
nttHighMemoryUsage"High memory usage"=高メモリ使用量
nttHostingProviderIntegrationNotYetConfigured"$1-integration is not yet configured."=$1との連携はまだ設定されていません。
nttHostingProviderIntegrationNotYetConfigured"Configure Now"=今すぐ設定する
nttMarkRepositoriesAsFavorite"Mark repositories as 'favorite' for automatic background refresh."=\
 リポジトリを「お気に入り」としてマークし、自動的にバックグラウンドで更新します。
nttPreferencesChangesRestartRequired"Exit SmartGit"=SmartGit を終了する
nttPreferencesChangesRestartRequired"Restart Required"=再起動が必要
nttPreferencesChangesRestartRequired"Restart SmartGit"=SmartGitを再起動する
nttProblematicGcConfiguration"Disable Background GC"=バックグラウンドでのGCを無効にする
nttProblematicGcConfiguration"Possibly problematic Git GC configuration"=Git GC の設定に問題がある可能性があります。
nttRepositoryGitCleanup"Repository needs cleanup."=リポジトリのクリーンアップが必要です。
#                                                !=Repository needs cleanup.
nttRepositoryGitCleanup"Run Garbage Collector Now"=今すぐガベージコレクタを実行
#                                                !=Run Garbage Collector Now
nttSupportExpired"Purchase Update"=アップデートを購入
nttSupportExpired"Your support period has expired on $1."=\
 $1 にサポート期間が終了しました。
nttUpdateCheckFetchVersionStart"Started downloading version $1 \($2\)."=バージョン $1 \($2\) のダウンロードを開始しました。
nttUpdateCheckFetchVersionSuccess"Restart SmartGit"=SmartGitを再起動する
nttUpdateCheckFetchVersionSuccess"Show Changelog"=変更履歴を表示
nttUpdateCheckFetchVersionSuccess"Successfully downloaded version $1."=バージョン $1 が正常にダウンロードされました。
nttUpdateCheckFetchVersionSuccess"Upgrade SmartGit"=SmartGit のアップグレード
nttVoteForUs"What do you like in SmartGit?"=\
 SmartGitのどこが好きですか？
pop"$1 succeeded."=$1 が成功しました。
pop"Command $1 has been aborted."=コマンド$1が中止されました。
pop"Modify the previous commit and commit."=\
 前回のコミットを修正し、コミットする。
pop"No more change."=これ以上の変更はありません。
pop"No more changes."=これ以上の変更はありません。
pop"Please review the files to commit."=\
 コミットするファイルを確認してください。
pop"Select the branch for which to stop tracking."=\
 追跡を停止するブランチを選択します。
pop"Select the remote to fetch from."=\
 取得するリモートを選択します。
pop"Select the remote to rename."=名前を変更するリモートを選択します。
pop"Select the stash to drop."=ドロップするスタッシュを選択します。
pop"Select the stash to rename."=名前を変更するスタッシュを選択します。
pop"There are no obsolete repositories."=廃止されたリポジトリはありません。
pop"There is no action available for this drop operation."=\
 このドロップ操作に使用できるアクションはありません。
pop"Unstage unwanted changes for the 1st commit, and commit."=\
 1回目のコミットで不要な変更をアンステージし、コミットします。
ttpBranches"<b>$1</b> <col1>approved</col1> on <b>$2</b>:"=
#                                                        !=<b>$1</b> <col1>approved</col1> on <b>$2</b>:
ttpBranches"<b>Author:\t</b>$1"=<b>作者:\t</b>$1
#                             !=<b>Author:\t</b>$1
ttpBranches"<b>Commit Date:\t</b>$1"=<b>コミット日時:\t</b>$1
#                                  !=<b>Commit Date:\t</b>$1
ttpBranches"<b>Commit Message:\t</b>$1"=<b>コミットメッセージ:\t</b>$1
#                                     !=<b>Commit Message:\t</b>$1
ttpBranches"<b>Committer:\t</b>$1"=<b>コミッター:\t</b>$1
#                                !=<b>Committer:\t</b>$1
ttpBranches"<b>Date:\t</b>$1"=<b>日付: </b>$1
#                           !=<b>Date:\t</b>$1
ttpBranches"<b>ID:\t</b>$1"==<b>ID:\t</b>$1
#                         !=<b>ID:\t</b>$1
ttpBranches"<b>Last Updated By:\t</b>$1"=<b>最終更新者: </b>$1
#                                      !=<b>Last Updated By: </b>$1
ttpBranches"<b>Local Branch:\t</b>$1"=<b>ローカルブランチ:\t</b>$1
#                                   !=<b>Local Branch:\t</b>$1
ttpBranches"<b>On:\t</b>$1"==<b>On: </b>$1
#                         !=<b>On: </b>$1
ttpBranches"<b>Outgoing</b> from branch <b>main</b> to repository <b>$1</b> branch <b>$2</b>"=ブランチ <b>$1</b> からリポジトリ <b>$2</b> の<b>main</b>ブランチへ<b>送信</b>
#                                                                                           !=<b>Outgoing</b> from branch <b>$1</b> to repository <b>$2</b> branch <b>main</b>
ttpBranches"<b>Push Target:\t</b>$1<col1>$2</col1>"=<b>プッシュターゲット:\t</b>$1<col1>$2</col1>
#                                                 !=<b>Push Target:\t</b>$1<col1>$2</col1>
ttpBranches"<b>Remote Branch:\t</b>$1"=<b>リモートブランチ:\t</b>$1
#                                    !=<b>Remote Branch:\t</b>$1
ttpBranches"<b>Repository-internal</b> from branch <b>$1</b> to branch <b>$2</b>"=<b>リポジトリ内</b>の<b>$1</b> ブランチから <b>$2</b> ブランチへ
#                                                                               !=<b>Repository-internal</b> from branch <b>$1</b> to branch <b>$2</b>
ttpBranches"<b>SVN Revision:\t</b>$1"=<b>SVN リビジョン:\t</b>$1
#                                   !=<b>SVN Revision:\t</b>$1
ttpBranches"<b>Tracked Branch:\t</b>$1"=
#                                     !=<b>Tracked Branch:\t</b>$1
ttpBranches"<b>Tracked Branch:\t</b>$1<col1>$2</col1>"=<b>追跡対象のブランチ:\t</b>$1<col1>$2</col1>
#                                                    !=<b>Tracked Branch:\t</b>$1<col1>$2</col1>
ttpBranches"<b>Tracked Branch:\t</b><s>$1</s><col1> \(just configured\)</col1>"=<b>追跡されたブランチ:\t</b><s>$1</s><col1> \(設定済み\)</col1>
#                                                                             !=<b>Tracked Branch:\t</b><s>$1</s><col1> \(just configured\)</col1>
ttpBranches"<b>Tracking State:\t</b>$1 commit behind"=<b>追跡状態:\t</b>$1 コミット プッシュ可能
#                                                   !=<b>Tracking State:\t</b>$1 commit behind
ttpBranches"<b>Tracking State:\t</b>$1 commit pushable, $2 commit behind"=<b>追跡状態:\t</b>$1 コミット プッシュ可能、$2 コミット 後方にあり
#                                                                       !=<b>Tracking State:\t</b>$1 commit pushable, $2 commit behind
ttpBranches"<b>Tracking State:\t</b>$1 commits pushable"=<b>追跡状態:\t</b>$1 コミット プッシュ可能
#                                                      !=<b>Tracking State:\t</b>$1 commits pushable
ttpBranches"<b>Tracking State:\t</b>$1 commits pushable, $2 commits behind"=<b>追跡状態:\t</b>$1 コミット プッシュ可能、$2 コミット 後方にあり
#                                                                         !=<b>Tracking State:\t</b>$1 commits pushable, $2 commits behind
ttpBranches"<b>Tracking State:\t</b>identical"=<b>追跡状態:\t</b>同一
#                                            !=<b>Tracking State:\t</b>identical
ttpBranches"<b>\t</b><col1>Tracking is configured in .git/config but the tracked branch is not present \(any more\)."=<b>\t</b><col1>.git/config でトラッキングが設定されていますが、トラッキングされていたブランチはもうありません。
#                                                                                                                   !=<b>\t</b><col1>Tracking is configured in .git/config but the tracked branch is not present \(any more\).
ttpBranches"<col1>The pull requests is conflicting; changes won't be displayed. First, the pull request has to be fixed to become mergable. After that, you can refetch the pull request.</col1>"=<col1>プルリクエストの変更内容に競合が発生しているため、変更が表示されません。まず、プルリクエストを修正してマージ可能にする必要があります。その後、プルリクエストを再取得できます。</col1>
#                                                                                                                                                                                               !=<col1>The pull requests is conflicting; changes won't be displayed. First, the pull request has to be fixed to become mergable. After that, you can refetch the pull request.</col1>
ttpBranches"Not yet loaded or not present on the Provider server anymore."=まだロードされていないか、プロバイダー サーバーに存在しません。
#                                                                        !=Not yet loaded or not present on the Provider server anymore.
ttpBranches"Pull from <b>$1</b> to <b>$2</b>"=<b>$1<\/b> から <b>$2<\/b> にプル
#                                           !=Pull from <b>$1</b> to <b>$2</b>
ttpClonePartialWarning"<b>Warning!</b>"=<b>警告！</b>
#                                     !=<b>Warning!</b>
ttpClonePartialWarning"<b>Warning!</b>\n\nThis functionality depends on the capabilities of your server.\nOnce the clone has finished, check the Output view for possible warnings."=\
 <b>警告!</b>\n\nこの機能は、お使いのサーバーの機能に依存しています。\nクローンが完了したら、出力ビューに警告が出力されていないか確認してください。
#!=<REMOVED>
ttpClonePartialWarning"Once the clone has finished, check the Output view for possible warnings."=クローンが完了したら、「出力」ビューで警告が表示されていないか確認してください。
#                                                                                               !=Once the clone has finished, check the Output view for possible warnings.
ttpClonePartialWarning"This functionality depends on the capabilities of your server."=この機能はサーバーの機能に依存します。
#                                                                                    !=This functionality depends on the capabilities of your server.
ttpRepositories"<b> with Refs:\t</b>$1"==<b> with Refs:\t</b>$1
#                                     !=<b> with Refs:\t</b>$1
ttpRepositories"<b>Branch:\t</b>$1"=<b>ブランチ:\t</b>$1
#                                 !=<b>Branch:\t</b>$1
ttpRepositories"<b>Changed locally</b>, open repository for details"=<b>ローカルで変更されました</b> 詳細についてはリポジトリを開いてください
#                                                                  !=<b>Changed locally</b>, open repository for details
ttpRepositories"<b>Commit:\t</b>$1"=<b>コミット:\t</b>$1
#                                 !=<b>Commit:\t</b>$1
ttpRepositories"<b>Git Repository:\t</b>$1"=<b>Git リポジトリ:\t$1
#                                         !=<b>Git Repository:\t</b>$1
ttpRepositories"<b>Incoming Changes:\t</b>$1 commit to merge/rebase"=
#                                                                  !=<b>Incoming Changes:\t</b>$1 commit to merge/rebase
ttpRepositories"<b>Incoming Changes:\t</b>$1 commits to merge/rebase"=<b>受信した変更:\t</b>$1個のコミットをマージ/リベースします
#                                                                   !=<b>Incoming Changes:\t</b>$1 commits to merge/rebase
ttpRepositories"<b>Local Branch:\t</b>$1"=<b>ローカルブランチ:\t</b>$1
#                                       !=<b>Local Branch:\t</b>$1
ttpRepositories"<b>Location:\t</b>$1"=<b>場所:\t</b>$1
#                                   !=<b>Location:\t</b>$1
ttpRepositories"<b>Modified files or subdirectories</b>"=<b>変更されたファイルまたはサブディレクトリ</b>
#                                                      !=<b>Modified files or subdirectories</b>
ttpRepositories"<b>Outgoing Changes:\t</b>$1 commit to push"=<b>送信する変更:</b>\t$1 コミットをプッシュ
#                                                          !=<b>Outgoing Changes:\t</b>$1 commit to push
ttpRepositories"<b>Outgoing Changes:\t</b>$1 commits to push"=<b>送信する変更:</b>\t$1 コミットをプッシュ
#                                                           !=<b>Outgoing Changes:\t</b>$1 commits to push
ttpRepositories"<b>Push Target:\t</b>$1<col1>$2</col1>"=<b>プッシュターゲット:\t</b>$1<col1>$2</col1>
#                                                     !=<b>Push Target:\t</b>$1<col1>$2</col1>
ttpRepositories"<b>Remote:\t</b>$1"=<b>リモート:\t</b>$1
#                                 !=<b>Remote:\t</b>$1
ttpRepositories"<b>Remotes:\t</b>"=<b>リモート:\t</b>
#                                !=<b>Remotes:\t</b>
ttpRepositories"<b>Tracked Branch:\t</b>$1<col1>$2</col1>"=<b>追跡対象のブランチ:\t</b>$1<col1>$2</col1>
#                                                        !=<b>Tracked Branch:\t</b>$1<col1>$2</col1>
ttpRepositories"<b>Tracking State:\t</b>$1 commit behind"=<b>追跡状態:\t</b>$1 コミット プッシュ可能
#                                                       !=<b>Tracking State:\t</b>$1 commit behind
ttpRepositories"<b>Tracking State:\t</b>$1 commits behind"=
#                                                        !=<b>Tracking State:\t</b>$1 commits behind
ttpRepositories"<b>Tracking State:\t</b>$1 commits pushable"=<b>追跡状態:\t</b>$1 コミット プッシュ可能
#                                                          !=<b>Tracking State:\t</b>$1 commits pushable
ttpRepositories"<b>Tracking State:\t</b>$1 commits pushable, $2 commits behind"=<b>追跡状態:\t</b>$1 コミット プッシュ可能、$2 コミット 後方にあり
#                                                                             !=<b>Tracking State:\t</b>$1 commits pushable, $2 commits behind
ttpRepositories"<b>Tracking State:\t</b>identical"=<b>追跡状態:\t</b>同一
#                                                !=<b>Tracking State:\t</b>identical
ttpRepositories"<b>Unchanged</b>"=<b>変更なし</b>
#                               !=<b>Unchanged</b>
ttpRepositories"<col1>Remote </col1>$1<b>\t</b>$2"=<col1>リモート </col1>$1<b>\t</b>$2
#                                                !=<col1>Remote </col1>$1<b>\t</b>$2
ttpRepositories"Bisecting"==Bisecting
#                        !=Bisecting
ttpRepositories"Merging $1 and $2"=
#                                !=Merging $1 and $2
ttpRepositories"Repository at $1 is <b>missing</b>"=$1 のリポジトリが<b>見つかりません</b>
#                                                 !=Repository at $1 is <b>missing</b>
ttpRepositories"The remote repository contains new commits."=リモートリポジトリには新しいコミットが含まれています。
#                                                          !=The remote repository contains new commits.
ttpTagGroupingGroupPatterns"Refs will be categorized into groups: when traversing the repository root log, refs will first be assigned to matching groups. Every group will store only the most recently encountered ref, i.e. if a new ref is encountered, it will replace all existing refs in the current group.\n\nNext, the refs remaining in the group will be passed on from child to parent commit. Now, once again they will be assigned to matching groups, possibly replacing other refs or possibly becoming replaced by more recent refs.\n\nPatterns will be matched against the full ref-name, including the <tt>refs</tt>-prefix. For a matching ref, its name will be shortened to the last path-segment \('\\/'\). For example, <tt>refs/tags/build-.\*</tt> will match a tag <tt>refs/tags/build-123</tt> and its name will be shortened to <tt>build-123</tt>. You may add a <i>named regex capturing group</i> called <tt>name</tt> to further customize the name extraction. For example, <tt>refs/tags/build-\(?&lt;name&gt;.\*\)</tt> will match <tt>refs/tags/build-123</tt> and its name will be shortened to <tt>123</tt>.\n\nYou can assign a title to a pattern by prefixing it by <tt>title:</tt>; the title may only contain letters, digits and '_'.\n\nYou can specify multiple groups patterns, separated by comma \(<tt>,</tt>\), which will be processed in the specified order: if you define two groups which both match a set of refs, such refs will be assigned to the first group.\n\nExample: <tt>build:refs/tags/build\(?&lt;name&gt;.\*\),version:refs/tags/\\d+\\.\\d+\\..\*</tt>"=\
 参照(Refs)はグループに分類されます。リポジトリのルートログを走査するとき、参照は最初にマッチするグループに割り当てられます。つまり、新しい参照が発生すると、現在のグループ内の既存の参照をすべて置き換えます。\n\n次に、グループ内に残っている参照は、子から親へのコミットメントに渡されます。ここで再び、それらはマッチするグループに割り当てられ、他の参照を置き換えたり、より新しい参照に置き換わったりする可能性があります。\n\nパターンは <tt>refs</tt>接頭辞を含む完全な参照名に対してマッチングされます。マッチした参照の名前は最後のパスセグメント \('\\/'\) に短縮されます。例えば、 <tt>refs/tags/build-.\*</tt> は <tt>refs/tags/build-123</tt> というタグにマッチし、その名前は <tt>build-123</tt> に短縮されます。<tt>name</tt> という<i>名前付き正規表現捕捉グループ</i>を追加して、名前の抽出をさらにカスタマイズすることができます。例えば、 <tt>refs/tags/build-\(?&lt;name&gt;.\*\)</tt> は <tt>refs/tags/build-123</tt> にマッチし、その名前は <tt>123</tt> に短縮されます。\n\n<tt>title:</tt> を前につけることで、パターンにタイトルを割り当てることができます。このタイトルには、文字、数字、'_' のみを含めることができます。\n\nカンマ\(<tt>,</tt>\)で区切って複数のグループパターンを指定することができ、指定した順番で処理されます。もし、あるrefのセットにマッチする2つのグループを定義した場合、そのrefは最初のグループに割り当てられます。\n\n例: <tt>build:refs/tags/build\(?&lt;name&gt;.\*\),version:refs/tags/\\d+\\.\\d+\\..\*</tt>
#!=<REMOVED>
ttpTagGroupingSinglePattern"In addition to the grouping logic, a ref matching the <b>Single Patterns</b> will be assigned to a group on its own. This is a shortcut for enumerating each of these refs as explicit pattern in <b>Group Patterns</b>.\n\nFor example, you want to make sure that each of your release branches is considered as group on its own and thus show up in the log graph or will be treated separately by the 'on-refs' calculation.\n\nExample: <tt>refs\\/remotes\\/origin\\/release-.\\\*</tt>"=\
 グループ化ロジックに加えて、<b>シングルパターン</b>に一致する参照が単独でグループに割り当てられます。これは、これらの各参照を<b>グループパターン</b>で明示的なパターンとして列挙するためのショートカットです。\n\nたとえば、リリース ブランチのそれぞれが独自のグループと見なされ、ログ グラフに表示されるか、'on-refs' の計算によって個別に処理されるようにする必要があります。\n\n例: <tt>refs\\/remotes\\/origin\\/release-.\\\*</tt>
#!=<REMOVED>
wndAnnotate.cmb"Age"=
#                  !=Age
wndAnnotate.cmb"Author"=作者
#                     !=Author
wndAnnotate.cmb"Changes Since"=
#                            !=Changes Since
wndAnnotate.edt"By"==By
wndAnnotate.edt"Commit"=コミット
wndAnnotate.edt"Highlight"=ハイライト
wndAnnotate.edt"View Commit"=コミットを表示
wndAnnotate.mni"Copy Details"=詳細をコピー
wndAnnotate.mni"Copy ID"=IDをコピー
wndAnnotate.mni"Copy Selection"=選択範囲をコピー
wndAnnotate.mni"Open Log"=ログを開く
wndAnnotate.mni"Show Changes"=比較する
wndAnnotate.mniCommit-first=最初のコミットに移動
wndAnnotate.mniCommit-last=最後のコミットに移動
wndAnnotate.mniCommit-next=次のコミットに移動
wndAnnotate.mniCommit-preceding-line=前のコミットに移動
wndAnnotate.mniCommit-previous=前のコミットに移動
wndAnnotate.mniCompare=比較する
wndAnnotate.mniCustomize=カスタマイズ
wndAnnotate.mniEdit-copy=コピー
wndAnnotate.mniFile-close=閉じる
wndAnnotate.mniGoto-line=指定の行へ移動
wndAnnotate.mniLog=ログを開く
#                !=Log
wndAnnotate.mniSearch-find=検索
wndAnnotate.mniSearch-next=次を検索
wndAnnotate.mniSearch-previous=前を検索
wndAnnotate.mniSet-syntax=シンタックスハイライトの言語選択
wndAnnotate.mniShowChanges=比較する
wndAnnotate.mniUndo-goto=移動前のコミットに戻る
wndAnnotate.mniView-settings=設定
wndAnnotate.mniWindowHideView=ビューを隠す
wndAnnotate.mniWindowLineHistory=行の履歴
wndAnnotate.mnu"Edit"=編集
wndAnnotate.mnu"File"=ファイル
wndAnnotate.mnu"Go To"=移動
wndAnnotate.mnu"View"=表示
wndAnnotate.rbt"Commit Index"=コミット Index
wndAnnotate.rbt"Time"=時間
wndAnnotate.tab"Document"=ドキュメント
wndAnnotate.tab"History of current line"=現在の行の履歴
wndAnnotate.tle"$1 - Blame"=
#                         !=$1 - Blame
wndCompare.lbl"Force Compare"=強制的に比較
#                           !=Force Compare
wndCompare.mniRefresh=再読込
wndCompare.mniView-layout-left-beside-right=左右に並べて表示
wndCompare.mniView-layout-left-over-right=上下に並べて表示\(上にLeft,下にRight\)
wndCompare.tbtEdit-take-left=左のブロックを右に持っていきます。左側のブロックに応じて、右側で挿入、置換、削除を行います。
wndCompare.tbtEdit-take-right=右のブロックを左に持っていきます。右側のブロックに応じて、左側で挿入、置換、削除を行います。
wndCompare.tbtFile-save=ファイルの変更を保存します。
wndCompare.tbtGoto-next-diff=次の変更点に移動します。
wndCompare.tbtGoto-previous-diff=前の変更点に移動します。
wndCompare.tbtRefresh=ファイル システムからコンテンツを再読み込みし、再比較します。
wndCompare.tle"$1 - File Compare"=$1 - ファイル比較
#                               !=$1 - File Compare
wndConflictSolver.mni"Apply Inner-line Difference to Working Tree"=\
 作業ツリーに行内の差分を適用する
wndConflictSolver.mni"Apply Line to Working Tree"=作業ツリーに行を適用
wndConflictSolver.mni"Apply Selection to Working Tree"=選択範囲を作業ツリーに適用する
wndConflictSolver.mniView-layout-all=全て
wndConflictSolver.mniView-layout-left-merge=左とマージ
wndConflictSolver.mniView-layout-left-right-above-merge=左と右,下にマージ
wndConflictSolver.mniView-layout-right-merge=マージと右
wndConflictSolver.tbr"All"=全て
wndConflictSolver.tbr"Base + Right"=ベース+Right
wndConflictSolver.tbr"Base Below"=下にベース
wndConflictSolver.tbr"Base Changes"=ベースの変更
wndConflictSolver.tbr"Left + Base"=左+ベース
wndConflictSolver.tbr"Left + Merge"=左+マージ
wndConflictSolver.tbr"Merge + Right"=マージ+右
wndConflictSolver.tbr"Merge Below"=下にマージ
wndConflictSolver.tbr"Next Conflict"=次の競合
wndConflictSolver.tbr"Prev. Conflict"=前の競合
wndConflictSolver.tbr"Take Left, Right"=左、右の順に取込
wndConflictSolver.tbr"Take Right, Left"=右、左の順に取込
wndConflictSolver.tbtEdit-take-left=左のブロックをマージ結果に持っていきます。左のブロックに応じて、マージ結果で挿入、置換、削除を行います。
wndConflictSolver.tbtEdit-take-left-right=左のブロックを取り込み、次に右のブロックを取り込みます。
wndConflictSolver.tbtEdit-take-right=右のブロックをマージ結果に持っていきます。右のブロックに応じて、マージ結果で挿入、置換、削除を行います。
wndConflictSolver.tbtEdit-take-right-left=右のブロックを取り込み、次に左のブロックを取り込みます。
wndConflictSolver.tbtFile-open-base=共通のベースファイルから左右の変更点を開く。
wndConflictSolver.tbtFile-save=ファイルの変更を保存します。
wndConflictSolver.tbtGoto-next-conflict=次の競合に移動
wndConflictSolver.tbtGoto-next-diff=次の変更点に移動します。
wndConflictSolver.tbtGoto-previous-conflict=前の競合に移動
wndConflictSolver.tbtGoto-previous-diff=前の変更点に移動します。
wndConflictSolver.tbtView-layout-all=左のファイル、マージファイル、右のファイルを表示します。
wndConflictSolver.tbtView-layout-left-merge=左のファイルとマージファイルを表示します。
wndConflictSolver.tbtView-layout-left-right-above-merge=マージ ファイルの上に左右のファイルを表示します。
wndConflictSolver.tbtView-layout-right-merge=マージファイルと右のファイルを表示します。
wndConflictSolver.tle"$1 - Conflict Solver"=$1 - コンフリクトソルバー
#                                         !=$1 - Conflict Solver
wndDeepgit.btn"Go Deeper"=さらに深く
wndDeepgit.btn"Investigate"==Investigate
#                         !=Investigate
wndDeepgit.col"File"=ファイル
wndDeepgit.col"Modifications"=変更点
wndDeepgit.ihp"The \*Origin View\*: it highlights the selected origin candidate. By invoking \*Blame \(go deeper\)\* DeepGit will move its /focus/ onto the shown file\\/commit and select the corresponding commit in the \*Navigation\* view."=\
 \*Origin ビュー\*: 選択されたOrigin候補を強調表示します。 \*Blame \(go deeper\)\* を呼び出すと、DeepGit はその /フォーカス/ を表示されているファイル\\/コミット に移動し、\*ナビゲーション\* ビューで対応するコミットを選択します。
wndDeepgit.ihp"This view displays all /origin candidates/ for the selected line from the \*Blame\* view: If the selected line has not been modified\\/added in the \*Blame\* view commit itself, the \*Appeared here\* origin takes you to this commit. Otherwise, the \*Changed in-place\* entry shows the actual change. \*Moved\* entries denote possible moves. The selected origin candidate will be highlighted in the \*Blame\* view as well as the \*Origin\* view. To inspect changes of the origin candidate in greater detail, switch to the \*Origins\* perspective."=\
 このビューには、\*ブレーム\* ビューで選択された行のすべての/Origin候補/が表示されます。選択した行が\*ブレーム\*ビューのコミットで変更\\/追加されていない場合、\*ここで登場\* はこのコミットに移動します。 そうでない場合は、\*その場で変更された\*に実際の変更が表示されます。\*移動された\*は、移動の可能性を示します。選択されたOrigin候補は、\*Origin\*ビューと同様に\*ブレーム\*ビューでもハイライト表示されます。Origin候補の変更をより詳細に調べるには、\*Origin\*パースペクティブに切り替えてください。
wndDeepgit.ihp"This view displays all changes for the selected commit from the \*Navigation\* view. The selected file will be compared in the below view."=\
 このビューは、\*ナビゲーション\* ビューから選択したコミットのすべての変更点を表示します。選択されたファイルは、下のビューで比較されます。
wndDeepgit.ihp"This view displays all files which have changed as part of the selected \*Blame\* line's commit. The selected file will be compared in the below view."=\
 このビューには、選択した \*ブレーム\* 行のコミットの一部として変更されたすべてのファイルが表示されます。選択したファイルが下のビューで比較されます。
wndDeepgit.ihp"This view shows how the selected line from the \*Blame\* view has changed in the past."=\
 このビューは、\*ブレーム\* ビューで選択された行が、過去にどのように変更されたかを表示します。
wndDeepgit.ihp"This view shows the Log for the investigated file and for all previous files you have navigated to. For the selected commit, more details will be displayed which depend on the current perspective: \n# in the \*Blame\* perspective the file's content will be displayed in the \*Blame\* view, \n# in the \*Diff\* perspective the file's modifications will be displayed, \n# in the \*Log\* perspective a summary of all modified files will be displayed in the \*Files\* view."=\
 このビューには、調査対象のファイルと、そこに至るまでの全てのファイルのログが表示されます。選択したコミットについて、現在のパースペクティブに応じて詳細が表示されます。\n # \*ブレーム\* パースペクティブでは、ファイルの内容は \*ブレーム\* ビューに表示されます。\n # \*差分\* パースペクティブでは、ファイルの変更が表示されます。\n # \*ログ\* パースペクティブでは、変更されたすべてのファイルの概要が \*Files\* ビューに表示されます。
wndDeepgit.ihp"This view shows the blame for the selected file\\/commit from the \*Navigation\* tree. When selecting a line DeepGit will start searching for the origin of this line and show results in the \*Origin Candidates\* view \(only available in the \*Blame+Origins\* perspective\). The best origin candidate will be selected and highlighted. DeepGit will follow across line moves and file renames and taking into account the line's vicinity, so origin candidates will usually be blocks, not just single lines."=\
 このビューには、\*ナビゲーション\* ツリーから選択したファイル\\/コミットに対するブレーム結果が表示されます。行を選択すると、DeepGit はこの行の起源の検索を開始し、\*Origin候補\* ビューに結果を表示します \(\*ブレーム+Origins\* パースペクティブでのみ使用できます\)。最適なOrigin候補が選択され、ハイライトされます。DeepGit は、行の移動とファイル名の変更を追跡し、行の周辺を考慮するため、Origin候補は通常、1 行だけでなくブロックになります。
wndDeepgit.ihp"This view shows the diff for the selected file from the above \*Files\* view."=\
 このビュー\(差分ビュー\)は、上記の \*Files\* ビューから選択したファイルの差分を表示します。
wndDeepgit.ihp"This view shows the diff for the selected origin candidate\\/file from the above \*Origin Candidates\*\\/\*Files\* view."=\
 このビューは、上の \*Origin候補\*\\/\*ファイル\* ビューから選択されたOrigin候補\\/ファイルの差分を表示します。
wndDeepgit.lbl"Preview of $1 \(\u00b7Go Deeper will take you there\)"=$1 のプレビュー \(\u00b7Go Deeper でそこへ移動します。\)
#                                                                   !=Preview of $1 \(\u00b7Go Deeper will take you there\)
wndDeepgit.lbl"Similarity detection was only performed for single lines, some results may be omitted \(View\|Extend Lines to Blocks\)"=\
 類似性検出は単一行に対してのみ実行されました。一部の結果は省略される場合があります \(表示\|行をブロックに拡張\)
wndDeepgit.lblBlameHeader"Blame \(in progress...\)"=ブレーム\(処理中…\)
wndDeepgit.lblBlameHeader"Blame for"=ブレーム
wndDeepgit.lblBlameMatchPopup"Appeared here"=ここで登場
wndDeepgit.lblBlameMatchPopup"Changed in-place"=その場で変更された
wndDeepgit.lblBlameMatchPopup"Lines first appeared at this position"=\
 行はこの位置で初めて現れました
wndDeepgit.lblBlameMatchPopup"Lines have possibly been changed in-place"=\
 行がその場で変更された可能性があります
wndDeepgit.lblBlameMatchPopup"Lines have possibly been moved over from somewhere else"=\
 行が別の場所から移動された可能性があります
wndDeepgit.lblBlameMatchPopup"Moved"=移動された
wndDeepgit.lblBlameMatchPopup"other possible origins"=複数のOriginの可能性
wndDeepgit.lblBlameMatchPopup"single origin, high likelihood"=単一Origin,可能性が高い
wndDeepgit.lblCompareHeader"New contents"=新しいコンテンツ
wndDeepgit.lblCompareHeader"Old contents"=古いコンテンツ
wndDeepgit.lblOriginCandidate"Appeared here"=ここで登場
wndDeepgit.lblOriginCandidate"Changed in-place"=その場で変更された
wndDeepgit.lblOriginCandidate"Line has been introduced in this commit"=\
 このコミットで行が追加されました
wndDeepgit.lblOriginCandidate"Lines have been added"=行が追加されました
wndDeepgit.lblOriginCandidate"Lines have been introduced in this commit"=\
 このコミットで行が追加されました
wndDeepgit.lblOriginCandidate"Lines have been modified"=行が変更されました
wndDeepgit.lblOriginCandidate"Moved"=移動された
wndDeepgit.lblOriginCandidate"Origins from '$1' omitted: file is binary"=\
 '$1' からのOriginは省略されました: ファイルはバイナリです。
wndDeepgit.lblOriginCandidate"Similarity detection was only performed for single lines, some results may be omitted \(View\|Extend Lines to Blocks\)"=\
 類似性検出は単一行に対してのみ実行されました。一部の結果は省略される場合があります \(表示\|行をブロックに拡張\)
wndDeepgit.lblOriginCandidate"as 'git diff' sees it"=\(git diff が見ているように\)
wndDeepgit.lblOriginCandidate"for the first time"=(初めて)
wndDeepgit.lblOriginCandidate"from $1 previous line"=以前の $1 行から
wndDeepgit.lblOriginCandidate"from $1 previous lines"=以前の $1 行から
wndDeepgit.lblOriginCandidate"of"==of
wndDeepgit.lblOriginCandidate"over from somewhere else"=\(別の場所から\)
wndDeepgit.lblOriginCandidate"similarity for $1 origin line"=の類似度,$1行のOrigin
wndDeepgit.lblOriginCandidate"similarity for $1 origin lines"=の類似度,$1行のOrigin
wndDeepgit.lblOriginHeader"No file to compare"=比較するファイルがありません
wndDeepgit.lblOriginHeader"Possibly modified \(or added\) as part of <b>surrounding block</b> in old contents"=\
 古いコンテンツの<b>周囲のブロック</b>の一部として変更 \(または追加\) された可能性があります
wndDeepgit.lblOriginHeader"Possibly moved from <b>similar lines</b> from old contents"=\
 古いコンテンツの<b>類似の行</b>から移動された可能性があります。
wndDeepgit.lblOriginHeader"Possibly originates from <b>in-place change</b> since old contents"=\
 古いコンテンツからの<b>その場での変更</b>に起因する可能性があります
wndDeepgit.lblTextHeader"Commit"=コミット
wndDeepgit.lblTextHeader"File"=ファイル
wndDeepgit.lblTextHeader"Msg"=メッセージ
wndDeepgit.lblTextHeader"at"==at
wndDeepgit.lblTextHeader"by"==by
wndDeepgit.lblTextHeader"file didn't exist before commit"=コミット前にファイルは存在していませんでした。
#                                                       !=file didn't exist before commit
wndDeepgit.lblTextHeader"file doesn't exist after commit"=コミット後にファイルは存在しません。
#                                                       !=file doesn't exist after commit
wndDeepgit.lblTextHeader"no file selected"=ファイルが選択されていません
#                                        !=no file selected
wndDeepgit.lblTextHeader"on"==on
wndDeepgit.mni"Copy Details"=詳細をコピー
wndDeepgit.mni"Copy ID"=IDをコピー
wndDeepgit.mni"Copy Selection in Column"=この列の選択範囲をコピーする
wndDeepgit.mni"Copy Selection"=選択範囲をコピー
wndDeepgit.mni"Copy"=コピー
wndDeepgit.mni"File"=ファイル
wndDeepgit.mni"Modifications"=変更点
wndDeepgit.mni"Open File Log"=ファイルログを開く
wndDeepgit.mni"Open Repository Log"=リポジトリログを開く
wndDeepgit.mniDbBack=戻る
#                  !=Go Back
wndDeepgit.mniDgAbout=DeepGitについて
wndDeepgit.mniDgBack=戻る
wndDeepgit.mniDgConfigureRefGroups=タグ-グルーピング
wndDeepgit.mniDgExtendLineToBlock=
#                               !=Extend Lines to Blocks
wndDeepgit.mniDgFilterAddSelection=選択フィルタを追加
wndDeepgit.mniDgFilterReset=フィルターをリセット
wndDeepgit.mniDgFilterSetSelection=選択範囲をフィルターとして設定
wndDeepgit.mniDgFollowRenames=リネームを追跡
wndDeepgit.mniDgForward=進む
wndDeepgit.mniDgHighlightBlameChanges=現在のBlameコミットの変更をハイライト
wndDeepgit.mniDgHighlightOriginChanges=現在のOriginコミットの変更をハイライト
wndDeepgit.mniDgIgnoreWhitespaceOnlyChanges=空白の変更を無視
wndDeepgit.mniDgLicenseAgreement=ライセンス規約
wndDeepgit.mniDgOptimizeCreationOrigins==Optimize 'Appeared Here' Origins
wndDeepgit.mniDgPerspectiveBlameOrigin=ブレーム+Origins パースペクティブ
wndDeepgit.mniDgPerspectiveBlameSimple=ブレームパースペクティブ
wndDeepgit.mniDgPerspectiveCommit=ログパースペクティブ
wndDeepgit.mniDgPerspectiveHistory=差分パースペクティブ
wndDeepgit.mniDgPerspectiveOrigins=Origins パースペクティブ
wndDeepgit.mniDgResetInlineHelp=すべてのインラインヘルプを再表示する
wndDeepgit.mniDgSetEncoding=エンコーディング
wndDeepgit.mniDgShowAtRefs==Show At Refs
wndDeepgit.mniDgShowLinePrefixes=行頭に追加の情報を表示
wndDeepgit.mniDgShowOnRefs==Show On Refs
wndDeepgit.mniDgToggleLineHistory=行の履歴
wndDeepgit.mniDgViewToolbar=ツールバーを表示
wndDeepgit.mniDgWindowHorizontalLayout=左右にブレームとOriginsを並べる
wndDeepgit.mniDgWindowVerticalLayout=上下にブレームとOriginsを並べる
wndDeepgit.mniEdit-copy=コピー
wndDeepgit.mniExtendLineToBlock=行をブロックに拡張
#                             !=<REMOVED>
wndDeepgit.mniFile-close=閉じる
wndDeepgit.mniGoto-line=指定の行へ移動
wndDeepgit.mniGoto-next-diff=次の変更
wndDeepgit.mniGoto-previous-diff=前の変更
wndDeepgit.mniNextChange=次の変更
wndDeepgit.mniOpenFileLog=ファイルログを開く
wndDeepgit.mniOpenRepositoryLog=リポジトリログを開く
wndDeepgit.mniPreviousChange=前の変更
wndDeepgit.mniSearch-find=検索
wndDeepgit.mniSearch-next=次を検索
wndDeepgit.mniSearch-previous=前を検索
wndDeepgit.mnu"Edit"=編集
wndDeepgit.mnu"File"=ファイル
wndDeepgit.mnu"Go To"=移動
wndDeepgit.mnu"Help"=ヘルプ
wndDeepgit.mnu"View"=表示
wndDeepgit.tab"Files \(in progress\)"=ファイル\(処理中\)
wndDeepgit.tab"Files changed in commit $1"=コミット $1 で変更されたファイル
wndDeepgit.tab"Navigation \(initializing...\)"=ナビゲーション \(初期化中...\)
wndDeepgit.tab"Navigation"=ナビゲーション
wndDeepgit.tab"Origin Candidates \($1 hunks processed...\)"=Origin候補\($1 のハンクを処理...\)
wndDeepgit.tab"Origin Candidates \(in progress\)"=Origin候補 \(処理中\)
wndDeepgit.tab"Origin Candidates for line $1 of commit $2"=\
 コミット$2 , 行番号$1 のOrigin候補
wndDeepgit.tab"Origin Candidates"=Origin候補
wndDeepgit.tbr"Back"=戻る
wndDeepgit.tbr"Blame"=ブレーム
wndDeepgit.tbr"Blame+Origins"=ブレーム+Origins
wndDeepgit.tbr"Diff"=差分
wndDeepgit.tbr"Forward"=進む
wndDeepgit.tbr"Log"=ログ
wndDeepgit.tbr"Origins"==Origins
wndDeepgit.tbt"Go to next change."=次の変更点に移動します。
wndDeepgit.tbt"Go to previous change."=前の変更点に移動します。
wndDeepgit.tbtBack=前のブレームに戻る...
wndDeepgit.tbtForward=次のブレームに進む...
wndDeepgit.tbtPerspectiveBlameOrigin=行のOriginを探すには、考えられる候補から一つを選ぶ必要があります。
wndDeepgit.tbtPerspectiveBlameSimple=他のOriginがない単純なケースでは、その行のOriginを見つけることができます。
wndDeepgit.tbtPerspectiveCommit=ログを調査します。
wndDeepgit.tbtPerspectiveHistory=ファイルのリビジョン間の差分を調査します。
wndDeepgit.tbtPerspectiveOrigins=その行が発生した場所で他に何が起こったのかを調査します。\n\n候補となるOriginを調べるには、まずそれらを評価する必要があります。まず、\[ファイル\]→\[開く\] で調査対象のファイルを選択し、その中の行を選択します。そして、可能性のあるOriginの計算が完了するまで待ちます。
wndDeepgit.tle"$1 - Investigate"==$1 - Investigate
#                              !=$1 - Investigate
wndDeepgit.tle"Investigate"==Investigate
#                         !=Investigate
wndEditor.mni"CR \(classic macOS\)"=CR \(クラシック macOS\)
wndEditor.mni"CR+LF \(Windows\)"==CR+LF \(Windows\)
wndEditor.mni"LF \(Unix, macOS\)"==LF \(Unix, macOS\)
wndEditor.mniEdit-undo=元に戻す
wndEditor.mniEofEnforceLineEnding=ファイル終端での改行を強制する
wndEditor.mniReplaceTabsWithSpaces=タブをスペースに置き換える
wndEditor.mniView-remember-as-default=デフォルトとして記憶する
wndEditor.mniView-settings=設定
wndEditor.tbtFile-save=ファイルの変更を保存します。
wndEditor.tle"$1 - Editor"=$1 - エディタ
#                        !=$1 - Editor
wndGit.indexEditor.mni"Discard Inner-line Change"=行内の変更を破棄
wndGit.indexEditor.mni"Discard Line"=行の変更を破棄
wndGit.indexEditor.mni"Discard Selection"=選択範囲の変更を破棄
wndGit.indexEditor.mni"Stage Inner-line Change"=行内の変更をステージ
wndGit.indexEditor.mni"Stage Line"=行をステージ
wndGit.indexEditor.mni"Stage Selection"=選択範囲をステージ
wndGit.indexEditor.mni"Unstage Inner-line Change"=行内の変更をアンステージ
wndGit.indexEditor.mni"Unstage Line"=行をアンステージ
wndGit.indexEditor.mni"Unstage Selection"=選択範囲をアンステージ
wndGit.indexEditor.mniView-layout-all=全て
wndGit.indexEditor.mniView-layout-head-index=HEAD と Index
wndGit.indexEditor.mniView-layout-head-index-wt=全て
wndGit.indexEditor.mniView-layout-head-wt-above-index=Indexの上にHEADと作業ツリー
wndGit.indexEditor.mniView-layout-index-wt=Index と Working Tree
wndGit.indexEditor.mniView-layout-left-merge=HEAD と Index
wndGit.indexEditor.mniView-layout-left-right-above-merge=Indexの上にHEADと作業ツリー
wndGit.indexEditor.mniView-layout-right-merge=Index と Working Tree
wndGit.indexEditor.tbtEdit-take-left=左のブロックをマージ結果に持っていきます。左のブロックに応じて、マージ結果で挿入、置換、削除を行います。
wndGit.indexEditor.tbtEdit-take-right=右のブロックをマージ結果に持っていきます。右のブロックに応じて、マージ結果で挿入、置換、削除を行います。
wndGit.indexEditor.tbtFile-save=ファイルの変更を保存します。
wndGit.indexEditor.tbtGoto-next-diff=次の変更点に移動します。
wndGit.indexEditor.tbtGoto-previous-diff=前の変更点に移動します。
wndGit.indexEditor.tle"$1 - Index Editor"=$1 - index エディタ
#                                       !=$1 - Index Editor
wndLog.col"LFS"==LFS
wndLog.hnt"Commit files: select 1 commit\nDiff between commits: select 2 commits"=ファイルのコミット: コミットを1つ選択\nコミット間の差分: コミットを2つ選択
#                                                                               !=Commit files: select 1 commit\nDiff between commits: select 2 commits
wndLog.hnt"No file matches the filter."=フィルターに一致するファイルはありません。
#                                     !=No file matches the filter.
wndLog.hnt"No repository selected."=リポジトリが選択されていません。
#                                 !=No repository selected.
wndLog.hnt"The repository is empty."=リポジトリが空です。
#                                  !=The repository is empty.
wndLog.hnt"Working Tree & Index files: select Working Tree\nCommit files: select commit\nDiff between Commits: select 2 commits\nDiff Commit & Index: select commit & Working Tree"=Working Tree & Index ファイル：Working Tree を選択 \nCommit ファイル：コミット を選択 \nコミット間の差分: 2 つのコミットを選択 \nCommit & Index の差分：commit & Working Tree を選択
#                                                                                                                                                                                 !=Working Tree & Index files: select Working Tree\nCommit files: select commit\nDiff between Commits: select 2 commits\nDiff Commit & Index: select commit & Working Tree
wndLog.mni"Cherry-Pick $1 to '$2'"='$1' から '$2' へチェリーピック
wndLog.mni"Committer Abbreviated"=コミッターの略称
wndLog.mni"Committer Avatar"=コミッターのアバター
wndLog.mni"Committer with Full Name and Email"=\
 コミッター \(フルネームと電子メール\)
wndLog.mni"Committer with Full Name"=コミッター \(フルネーム\)
wndLog.mni"Copy Branch"=ブランチをコピー
wndLog.mni"Copy Email Address"=メールアドレスをコピー
wndLog.mni"Drop Local"=ローカルを削除
#                    !=Drop Local
wndLog.mni"Fetch"=フェッチ
#               !=Fetch
wndLog.mni"Modification"=変更
wndLog.mni"No pull request data available."=プルリクエストのデータはありません。
#                                         !=No pull request data available.
wndLog.mni"Reject"=却下
#                !=Reject
wndLog.mni"Select Branch"=ブランチを選択
wndLog.mni"Select Commit"=コミットを選択
wndLog.mni"Send Mail"=メールを送る
wndLog.mni"Unstage Hunk"=ハンクをアンステージ
wndLog.mni"Unstage Innerline Change"=行内の変更をアンステージ
wndLog.mni"Unstage Line"=行をアンステージ
wndLog.mni"Unstage Selection"=選択範囲をアンステージ
wndLog.mniFlowConfigure=設定
#                     !=Configure
wndLog.mniOpen=ワーキングツリーから開く
#            !=Open from Working Tree
wndLog.mniWindowLayoutReset=作業環境をリセット
#                         !=Reset Perspective
wndLog.tab"Changes \(EOL: Windows\)"=変更点 \(EOL: Windows\)
#                                  !=<REMOVED>
wndLog.tbr"Add Branch"=ブランチを追加
#                    !=Add Branch
wndLog.tbt"If selected and Index as well as Working Tree changes are available, show them separately."=\
 選択され、インデックスと作業ツリーの変更がある場合、それらを個別に表示します。
wndLog.tbt"Reading incoming pull requests from '$1'."=\
 "$1" から受け取ったプルリクエストを読み込んでいます。
wndLog.tbt"Reading outgoing pull requests from '$1'."='$1' から送信されたプル リクエストを読み取っています。
#                                                   !=Reading outgoing pull requests from '$1'.
wndLog.tbt"Refresh information from Bitbucket."=Bitbucket からの情報を更新します。
wndLog.tle"$1 - Log"=$1 - ログ
#                  !=$1 - Log
wndLog.tle"$1 \[$2\] - Log for $3"=
#                                !=$1 \[$2\] - Log for $3
wndProject.col"LFS"==LFS
#                 !=LFS
wndProject.mni"Log Selection"=選択項目の履歴
wnd(Annotate|Compare|ConflictSolver|Deepgit|Git.indexEditor|Editor|Log|Project|Std|).lblStatusBarMessage"Ready"=準備完了
wnd(Annotate|Compare|ConflictSolver|Deepgit|Git.indexEditor|Editor|Log|Project|Std|).mniWindow-fullScreen=フルスクリーン
wnd(Annotate|Compare|ConflictSolver|Deepgit|Git.indexEditor|Editor|Log|Project|Std|).mniWindow-maximizeMaximize=最大化
wnd(Annotate|Compare|ConflictSolver|Deepgit|Git.indexEditor|Editor|Log|Project|Std|).mniWindow-maximizeRestore=最大化を解除する
wnd(Annotate|Compare|ConflictSolver|Deepgit|Git.indexEditor|Editor|Log|Project|Std|).mniWindow-minimize=最小化
wnd(Annotate|Compare|ConflictSolver|Deepgit|Git.indexEditor|Editor|Log|Project|Std|).mniWindowMaximizeRestore"Maximize View"=ビューを最大化
wnd(Annotate|Compare|ConflictSolver|Deepgit|Git.indexEditor|Editor|Log|Project|Std|).mniWindowMaximizeRestore"Restore Maximized View"=最大化したビューを元に戻す
wnd(Annotate|Compare|ConflictSolver|Deepgit|Git.indexEditor|Editor|Log|Project|Std|).mnu"< No Windows >"==< No Windows >
wnd(Annotate|Compare|ConflictSolver|Deepgit|Git.indexEditor|Editor|Log|Project|Std|).mnu"Window"=ウィンドウ
wnd(Compare|ConflictSolver|Git.indexEditor).mniEdit-take-left=左ブロックを採用
wnd(Compare|ConflictSolver|Git.indexEditor).mniEdit-take-left-right=左ブロック、右ブロックの順に取り込む
wnd(Compare|ConflictSolver|Git.indexEditor).mniEdit-take-right=右ブロックを採用
wnd(Compare|ConflictSolver|Git.indexEditor).mniEdit-take-right-left=右ブロック、左ブロックの順に取り込む
wnd(Compare|ConflictSolver|Git.indexEditor).mniEdit-undo=元に戻す
wnd(Compare|ConflictSolver|Git.indexEditor).mniFile-export-html=HTMLファイルとしてエクスポート
wnd(Compare|ConflictSolver|Git.indexEditor).mniFile-open-base=ベースファイルの変更を開く
wnd(Compare|ConflictSolver|Git.indexEditor).mniGoto-next-conflict=次の競合
wnd(Compare|ConflictSolver|Git.indexEditor).mniGoto-next-diff=次の変更
wnd(Compare|ConflictSolver|Git.indexEditor).mniGoto-previous-conflict=前の競合
wnd(Compare|ConflictSolver|Git.indexEditor).mniGoto-previous-diff=前の変更
wnd(Compare|ConflictSolver|Git.indexEditor).mniShow-line-numbers=行番号の表示
wnd(Compare|ConflictSolver|Git.indexEditor).mniView-ignore-whitespaces-all=行比較で空白をすべて無視する
wnd(Compare|ConflictSolver|Git.indexEditor).mniView-ignore-whitespaces-leading-trailing=行比較で先頭と行末の空白を無視する
wnd(Compare|ConflictSolver|Git.indexEditor).mniView-ignore-whitespaces-none=行比較で空白を無視しない
wnd(Compare|ConflictSolver|Git.indexEditor).mniView-refresh=再読込
wnd(Compare|ConflictSolver|Git.indexEditor).mniView-remember-as-default=デフォルトとして記憶する
wnd(Compare|ConflictSolver|Git.indexEditor).mniView-settings=設定
wnd(Compare|ConflictSolver|Git.indexEditor).mniView-show-current-line-control=現在の行を長いテキストボックスで表示
wnd(Compare|ConflictSolver|Git.indexEditor).mniView-synchronize-scrolling=スクロールを同期する
wnd(Compare|ConflictSolver|Git.indexEditor).tbr"Next Change"=次の変更
wnd(Compare|ConflictSolver|Git.indexEditor).tbr"Prev. Change"=前の変更
wnd(Compare|ConflictSolver|Git.indexEditor).tbr"Reload"=再読込
wnd(Compare|ConflictSolver|Git.indexEditor).tbr"Take Left"=左を採用
wnd(Compare|ConflictSolver|Git.indexEditor).tbr"Take Right"=右を採用
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mni"Copy Selection"=選択範囲をコピー
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniCustomize=カスタマイズ
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniEdit-copy=コピー
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniEdit-cut=切り取り
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniEdit-ignore-case-changes=行比較で大文字小文字を区別しない
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniEdit-paste=貼り付け
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniEdit-redo=やり直し
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniFile-close=閉じる
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniFile-save=保存
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniGoto-line=指定の行へ移動
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniSearch-find=検索
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniSearch-next=次を検索
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniSearch-previous=前を検索
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniSearch-replace=検索と置換
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniSet-syntax=シンタックスハイライトの言語選択
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mnu"Edit"=編集
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mnu"File"=ファイル
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mnu"Go To"=移動
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mnu"View"=表示
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).tbr"Save"=保存
wnd(Log|Project|).tbtFlowFeatureFinish=Git-Flow feature を完了
#                                    !=Finish a Git-Flow feature.
wnd(Log|Project|).tbtFlowFeatureStart=新しい Git-Flow の feature を開始します。
#                                   !=Start a new Git-Flow feature.
wnd(Log|Project|Std|)."Abort"=中止
wnd(Log|Project|Std|)."Commit"=コミット
wnd(Log|Project|Std|)."Conflict Solver"=コンフリクトソルバー
wnd(Log|Project|Std|)."Continue"=続ける
wnd(Log|Project|Std|)."Mark HEAD as Bad"=HEAD を Badとしてマークする
wnd(Log|Project|Std|)."Mark HEAD as Good"=HEAD を Good としてマークする
wnd(Log|Project|Std|)."Mark Resolved"=解決済みとしてマーク
wnd(Log|Project|Std|)."Recreate Conflict"=競合した状態に戻す
wnd(Log|Project|Std|)."Rerun Thoroughly"=徹底的な再実行
wnd(Log|Project|Std|)."Reset"=リセット
wnd(Log|Project|Std|)."Reveal"=表示する
wnd(Log|Project|Std|)."Show Local Changes"=ローカルの変更を表示
wnd(Log|Project|Std|)."Step"=ステップ
wnd(Log|Project|Std|)."Swap"=入れ替え
wnd(Log|Project|Std|)."Take Ours"=Ours を採用
wnd(Log|Project|Std|)."Take Theirs"=Theirs を採用
wnd(Log|Project|Std|).btn"Abort"=中止
wnd(Log|Project|Std|).btn"Commit"=コミット
wnd(Log|Project|Std|).btn"Conflict Solver"=コンフリクトソルバー
wnd(Log|Project|Std|).btn"Continue"=続ける
wnd(Log|Project|Std|).btn"Mark HEAD as Bad"=HEAD を Badとしてマークする
wnd(Log|Project|Std|).btn"Mark HEAD as Good"=HEAD を Good としてマークする
wnd(Log|Project|Std|).btn"Mark Resolved"=解決済みとしてマーク
wnd(Log|Project|Std|).btn"Recreate Conflict"=競合した状態に戻す
wnd(Log|Project|Std|).btn"Rerun Thoroughly"=徹底的な再実行
wnd(Log|Project|Std|).btn"Reset"=リセット
wnd(Log|Project|Std|).btn"Reveal"=表示する
wnd(Log|Project|Std|).btn"Show Local Changes"=ローカルの変更を表示
wnd(Log|Project|Std|).btn"Stage"=ステージ
wnd(Log|Project|Std|).btn"Step"=ステップ
wnd(Log|Project|Std|).btn"Swap"=入れ替え
wnd(Log|Project|Std|).btn"Take Ours"=Ours を採用
wnd(Log|Project|Std|).btn"Take Theirs"=Theirs を採用
wnd(Log|Project|Std|).chk"Add 'Signed-off-by' signature"=コミットメッセージにSigned-off-by 署名を追加する
wnd(Log|Project|Std|).chk"Amend last commit instead of creating new one"=\
 新規にコミットせず、前回のコミットを修正する
wnd(Log|Project|Std|).chk"Amend last commit"=前回のコミットを修正
wnd(Log|Project|Std|).chk"Bypass commit hook"=コミットフックをバイパスする
wnd(Log|Project|Std|).chk"Create simple commit \('squash'\)"=シンプルなコミットを作成する \('squash'\)
wnd(Log|Project|Std|).chk"Push"=プッシュ
wnd(Log|Project|Std|).col"Assignee"=担当者
wnd(Log|Project|Std|).col"Author"=作者
wnd(Log|Project|Std|).col"Branch"=ブランチ
wnd(Log|Project|Std|).col"Copied From"=コピー元
wnd(Log|Project|Std|).col"Copied from"=コピー元
wnd(Log|Project|Std|).col"Date"=日付
wnd(Log|Project|Std|).col"Entry"=エントリ
wnd(Log|Project|Std|).col"Ext."=拡張子
wnd(Log|Project|Std|).col"Index State"=インデックスの状態
wnd(Log|Project|Std|).col"Last Changed On"=最終変更日
wnd(Log|Project|Std|).col"Modification"=変更
wnd(Log|Project|Std|).col"Name"=名前
wnd(Log|Project|Std|).col"Path"=パス
wnd(Log|Project|Std|).col"Relative Directory"=相対ディレクトリ
wnd(Log|Project|Std|).col"Relative Path"=相対パス
wnd(Log|Project|Std|).col"Renamed Path"=名前変更したパス
wnd(Log|Project|Std|).col"Size"=サイズ
wnd(Log|Project|Std|).col"State"=状態
wnd(Log|Project|Std|).col"Submodule"=サブモジュール
wnd(Log|Project|Std|).col"Text"=テキスト
wnd(Log|Project|Std|).col"Working Tree State"=作業ツリーの状態
wnd(Log|Project|Std|).edt"Commit to"=コミット先
wnd(Log|Project|Std|).hnt"File Filter"=ファイルフィルタ
wnd(Log|Project|Std|).hnt"Filter or Tag Search"=フィルターまたはタグ検索
wnd(Log|Project|Std|).lbl"$1 files hidden"=$1 ファイルの非表示
wnd(Log|Project|Std|).lbl"Directories"=ディレクトリ
wnd(Log|Project|Std|).lbl"Directory"=ディレクトリ
wnd(Log|Project|Std|).lbl"File"=ファイル
wnd(Log|Project|Std|).lbl"Files"=ファイル
wnd(Log|Project|Std|).mni"  Show Rewritten Behind Commits"=\
 コミット後に書き換えられたものを表示
wnd(Log|Project|Std|).mni"<no entry>"==<no entry>
wnd(Log|Project|Std|).mni"<none>"==<none>
wnd(Log|Project|Std|).mni"Abbreviated"=略称
wnd(Log|Project|Std|).mni"Add GitHub Comment"=GitHubコメントの追加
wnd(Log|Project|Std|).mni"Add GitLab Comment"=GitLabコメントの追加
wnd(Log|Project|Std|).mni"Add Review Comment"=レビューコメントを追加
wnd(Log|Project|Std|).mni"All"=全て
wnd(Log|Project|Std|).mni"Apply Patch"=パッチを適用
wnd(Log|Project|Std|).mni"Assign"=割り当て
wnd(Log|Project|Std|).mni"Assignee"=担当者
wnd(Log|Project|Std|).mni"Author Abbreviated"=作者の略称
wnd(Log|Project|Std|).mni"Author Avatar"=作者のアバター
wnd(Log|Project|Std|).mni"Author with Full Name and Email"=\
 作者\(フルネーム\)とEメール
wnd(Log|Project|Std|).mni"Author with Full Name"=作者\(フルネーム\)
wnd(Log|Project|Std|).mni"Author"=作者
wnd(Log|Project|Std|).mni"Branch Coloring"=ブランチカラーリング
wnd(Log|Project|Std|).mni"Branches and Tags"=ブランチとタグ
wnd(Log|Project|Std|).mni"Branching:"=分岐:
wnd(Log|Project|Std|).mni"Cancel"=キャンセル
wnd(Log|Project|Std|).mni"Check Out"=チェックアウト
wnd(Log|Project|Std|).mni"Checkout"=チェックアウト
wnd(Log|Project|Std|).mni"Cherry-Pick Commits to $1"='$1' にチェリーピックコミット
wnd(Log|Project|Std|).mni"Clear History"=履歴をクリア
wnd(Log|Project|Std|).mni"Close"=閉じる
wnd(Log|Project|Std|).mni"Coloring:"=カラーリング:
wnd(Log|Project|Std|).mni"Columns"=列
wnd(Log|Project|Std|).mni"Columns:"=列:
wnd(Log|Project|Std|).mni"Comment $1"=コメント $1
wnd(Log|Project|Std|).mni"Commit"=コミット
wnd(Log|Project|Std|).mni"Committer"=コミッタ
wnd(Log|Project|Std|).mni"Compact Author"=コンパクトな著者
wnd(Log|Project|Std|).mni"Copy Full ID"=フルIDをコピー
wnd(Log|Project|Std|).mni"Copy ID"=IDをコピー
wnd(Log|Project|Std|).mni"Copy Name"=名前をコピー
wnd(Log|Project|Std|).mni"Copy Selection in Column"=この列の選択範囲をコピーする
wnd(Log|Project|Std|).mni"Copy Selection"=選択範囲をコピー
wnd(Log|Project|Std|).mni"Copy URL"=URL をコピー
wnd(Log|Project|Std|).mni"Copy"=コピー
wnd(Log|Project|Std|).mni"Create Merge Request"=マージリクエストを作成
wnd(Log|Project|Std|).mni"Create Pull Request"=プルリクエストを作成
wnd(Log|Project|Std|).mni"Cut"=切り取り
wnd(Log|Project|Std|).mni"Date"=日付
wnd(Log|Project|Std|).mni"Default Coloring"=デフォルトカラーリング
wnd(Log|Project|Std|).mni"Delete 'Comment $1'"=コメント '$1' を削除
wnd(Log|Project|Std|).mni"Delete"=削除
wnd(Log|Project|Std|).mni"Diff Tool"=比較ツール
wnd(Log|Project|Std|).mni"Discard Hunk"=ハンクを破棄する
wnd(Log|Project|Std|).mni"Discard Inner-line Change"=行内の変更を破棄
wnd(Log|Project|Std|).mni"Discard Line"=行の変更を破棄
wnd(Log|Project|Std|).mni"Discard Selection"=選択範囲の変更を破棄
wnd(Log|Project|Std|).mni"Drop Local Data"=ローカルデータの削除
wnd(Log|Project|Std|).mni"Edit 'Comment $1'"=コミット '$1' を編集
wnd(Log|Project|Std|).mni"Edit in Index Editor"=indexエディタで編集する
wnd(Log|Project|Std|).mni"Edit"=編集
wnd(Log|Project|Std|).mni"Ext."=拡張子
wnd(Log|Project|Std|).mni"Fast-Forward Merge"=ファストフォワードマージ
wnd(Log|Project|Std|).mni"Fetch Merge Request"=マージリクエストの取得
wnd(Log|Project|Std|).mni"Fetch Pull Request"=プルリクエストをフェッチする
wnd(Log|Project|Std|).mni"File Content \(very expensive\)"=ファイルの内容\(非常に高コストな処理\)
wnd(Log|Project|Std|).mni"File \(expensive\)"=ファイル\(高コスト\)
wnd(Log|Project|Std|).mni"Files from Subdirectories"=サブディレクトリのファイル
wnd(Log|Project|Std|).mni"Follow All Parents"=すべての親をフォロー
wnd(Log|Project|Std|).mni"Follow Only First Parent"=最初の親のみフォロー
wnd(Log|Project|Std|).mni"Forget Pattern"=パターンを忘れる
wnd(Log|Project|Std|).mni"Forget"=忘れる
wnd(Log|Project|Std|).mni"Format Patch"=パッチを作成
wnd(Log|Project|Std|).mni"Full Author With Email"=作者(フルネーム)とメール
wnd(Log|Project|Std|).mni"Full Author"=作者(フルネーム)
wnd(Log|Project|Std|).mni"Full Name With Email"=フルネームとメール
wnd(Log|Project|Std|).mni"Full Name"=フルネーム
wnd(Log|Project|Std|).mni"Git Config"==Git Config
wnd(Log|Project|Std|).mni"Git-LFS Version"=Git-LFS バージョン
wnd(Log|Project|Std|).mni"ID"==ID
wnd(Log|Project|Std|).mni"Include Merge Only if File was Changed"=\
 ファイルが変更された場合のみマージを含める
wnd(Log|Project|Std|).mni"Integrate"=統合
wnd(Log|Project|Std|).mni"Jump To"=ジャンプ先
wnd(Log|Project|Std|).mni"LFS"==LFS
wnd(Log|Project|Std|).mni"Last Changed On"=最終変更日
wnd(Log|Project|Std|).mni"Mark as Bad"=Bad マークを付ける
wnd(Log|Project|Std|).mni"Mark as Good"=Good マークを付ける
wnd(Log|Project|Std|).mni"Merge '$1'"='$1' をマージ
wnd(Log|Project|Std|).mni"Merge Directly To"=直接マージ
wnd(Log|Project|Std|).mni"Merge Merge Request"=マージリクエストを結合
wnd(Log|Project|Std|).mni"Merge Pull Request"=プルリクエストのマージ
wnd(Log|Project|Std|).mni"Merge"=マージ
wnd(Log|Project|Std|).mni"Message"=メッセージ
wnd(Log|Project|Std|).mni"More options"=追加のオプション
wnd(Log|Project|Std|).mni"Move Commit"=コミットを移動
wnd(Log|Project|Std|).mni"Move To"=移動先
wnd(Log|Project|Std|).mni"Move and Squash Commit"=移動してスカッシュコミット
wnd(Log|Project|Std|).mni"Name"=名前
wnd(Log|Project|Std|).mni"Neither"=どちらも表示しない
wnd(Log|Project|Std|).mni"New Group"=新しいグループ
wnd(Log|Project|Std|).mni"No Group"=グループなし
wnd(Log|Project|Std|).mni"Only If Changed"=変更された場合のみ
wnd(Log|Project|Std|).mni"Only Selected"=選択項目のみ
wnd(Log|Project|Std|).mni"Open in Browser"=ブラウザで開く
wnd(Log|Project|Std|).mni"Open in Web Browser"=ウェブブラウザで開く
wnd(Log|Project|Std|).mni"Other Branch"=他のブランチ
wnd(Log|Project|Std|).mni"Paste"=貼り付け
wnd(Log|Project|Std|).mni"Path"=パス
wnd(Log|Project|Std|).mni"Please select Index or Working Tree."=\
 インデックスまたはワーキングツリーを選択してください。
wnd(Log|Project|Std|).mni"Print Git Version"=Git バージョンを出力
wnd(Log|Project|Std|).mni"Pull, then Push"=プル→プッシュ
wnd(Log|Project|Std|).mni"Push To"=プッシュ先
wnd(Log|Project|Std|).mni"Push"=プッシュ
wnd(Log|Project|Std|).mni"Push, then Pull"=プッシュ→プル
wnd(Log|Project|Std|).mni"Quick Stash All"=クイックスタッシュ\(全て\)
wnd(Log|Project|Std|).mni"Quick Stash Selection"=クイックスタッシュ\(選択項目\)
wnd(Log|Project|Std|).mni"Rebase $1 commit from $2 to $3"=\
 $1のコミットを$2から$3にリベースする。
wnd(Log|Project|Std|).mni"Rebase $1 commits from $2 to $3"=\
 $1 のコミットを $2 から $3 にリベースする
wnd(Log|Project|Std|).mni"Rebase HEAD to '$1'"=HEAD を $1 にリベース
wnd(Log|Project|Std|).mni"Regular Expressions"=正規表現
wnd(Log|Project|Std|).mni"Reject Pull Request"=プルリクエストを却下
wnd(Log|Project|Std|).mni"Relative Directory"=相対ディレクトリ
wnd(Log|Project|Std|).mni"Relative Path"=相対パス
wnd(Log|Project|Std|).mni"Remember Pattern"=パターンを記憶
wnd(Log|Project|Std|).mni"Rename"=リネーム
wnd(Log|Project|Std|).mni"Renamed Path"=名前変更したパス
wnd(Log|Project|Std|).mni"Reorder Commits"=コミットの並べ替え
wnd(Log|Project|Std|).mni"Reply '$1'"=返信 '$1'
wnd(Log|Project|Std|).mni"Reply"=返信
wnd(Log|Project|Std|).mni"Reset HEAD to $1"=HEAD を $1 にリセット
wnd(Log|Project|Std|).mni"Reset to Default"=デフォルトにリセット
wnd(Log|Project|Std|).mni"Resolve"=解決
wnd(Log|Project|Std|).mni"Retract Merge Request"=マージリクエストの取り消し
wnd(Log|Project|Std|).mni"Retract Pull Request"=プルリクエストの取り消し
wnd(Log|Project|Std|).mni"Revert $1"=リバート $1
wnd(Log|Project|Std|).mni"Review"=レビュー
wnd(Log|Project|Std|).mni"Rewrap"=ワードラップ
wnd(Log|Project|Std|).mni"Select from JIRA"=JIRAから選択
wnd(Log|Project|Std|).mni"Select from Log"=ログから選択
wnd(Log|Project|Std|).mni"Set '$1' to $2"='$1' を $2 に設定
wnd(Log|Project|Std|).mni"Show All Refs"=すべての参照\(Refs\)を表示
wnd(Log|Project|Std|).mni"Show Auxiliary Branch"=補助ブランチを表示
wnd(Log|Project|Std|).mni"Show Branch Labels"=ブランチラベルを表示する
wnd(Log|Project|Std|).mni"Show Common Commits"=共通のコミットを表示する
wnd(Log|Project|Std|).mni"Show Incoming Commits"=受信コミットを表示
wnd(Log|Project|Std|).mni"Show More Commits \(Temporarily\)"=コミットをさらに表示する\(一時的\)
wnd(Log|Project|Std|).mni"Show Only Selected Branches and Tags"=\
 選択されたブランチとタグのみ表示
wnd(Log|Project|Std|).mni"Show Only Selected Refs"=選択されたRefのみ表示
wnd(Log|Project|Std|).mni"Show Unchanged Directories"=変更されていないディレクトリを表示
wnd(Log|Project|Std|).mni"Show Working Tree On Demand"=作業ツリーをオンデマンドで表示
wnd(Log|Project|Std|).mni"Show Working Tree Permanently"=作業ツリーを永続的に表示
wnd(Log|Project|Std|).mni"Size"=サイズ
wnd(Log|Project|Std|).mni"Sort By Time"=時間順でソート
wnd(Log|Project|Std|).mni"Sort First Parents before Merge Parents"=\
 最初の親、マージの親の順にソートする
wnd(Log|Project|Std|).mni"Sort Merge Parents before First Parents"=\
 マージの親、最初の親の順にソートする
wnd(Log|Project|Std|).mni"Squash"=スカッシュ
wnd(Log|Project|Std|).mni"Stage Hunk"=Hunkをステージ
wnd(Log|Project|Std|).mni"Stage Inner-line Change"=行内の変更をステージ
wnd(Log|Project|Std|).mni"Stage Innerline Change"=行内の変更をステージ
wnd(Log|Project|Std|).mni"Stage Line"=行をステージ
wnd(Log|Project|Std|).mni"Stage Lines"=行をステージ
wnd(Log|Project|Std|).mni"Stage Selection"=選択範囲をステージ
wnd(Log|Project|Std|).mni"Stash Selection"=選択した変更を隠す
wnd(Log|Project|Std|).mni"State"=状態
wnd(Log|Project|Std|).mni"Subtree"=サブツリー
wnd(Log|Project|Std|).mni"Template!"=テンプレート!
wnd(Log|Project|Std|).mni"Test"=テスト
wnd(Log|Project|Std|).mni"Text"=テキスト
wnd(Log|Project|Std|).mni"Toggle Hosting Provider Integration"=ホスティングプロバイダーの統合を切り替える
wnd(Log|Project|Std|).mni"Toggle"=トグル
wnd(Log|Project|Std|).mni"Varying Coloring"=さまざまな色
wnd(Log|Project|Std|).mniAbout=SmartGitについて
wnd(Log|Project|Std|).mniAdd=追加
wnd(Log|Project|Std|).mniAnnotate=ブレーム
wnd(Log|Project|Std|).mniAssume-unchanged-toggle='Assume Unchanged' フラグを切り替え
wnd(Log|Project|Std|).mniBisectBad=HEAD を Badとしてマークする
wnd(Log|Project|Std|).mniBisectExit=リセット
wnd(Log|Project|Std|).mniBisectGood=HEAD を Good としてマークする
wnd(Log|Project|Std|).mniBisectStart=開始
wnd(Log|Project|Std|).mniBranchAbort=中止
wnd(Log|Project|Std|).mniBranchAdd=ブランチを追加
wnd(Log|Project|Std|).mniBranchAddTag=タグを追加
wnd(Log|Project|Std|).mniBranchClose=閉じる
wnd(Log|Project|Std|).mniBranchContinue=続ける
wnd(Log|Project|Std|).mniBranchDelete=削除
wnd(Log|Project|Std|).mniBranchRename=リネーム
wnd(Log|Project|Std|).mniBranchResetTracking=追跡を停止
wnd(Log|Project|Std|).mniBranchSetTracking=追跡ブランチの設定
wnd(Log|Project|Std|).mniBranchSplit=コミットの変更または分割
wnd(Log|Project|Std|).mniBranchSplitFiles=ファイルを分割
wnd(Log|Project|Std|).mniBranchesGitFlowRemoteOnly=Git-Flow セクションにリモート ブランチを表示する
wnd(Log|Project|Std|).mniBranchesGitFlowTracked=リモートの追跡されたブランチを表示
wnd(Log|Project|Std|).mniBranchesSectionize=タグやブランチをパスのような名前でグループ化 \(foo/bar\)
wnd(Log|Project|Std|).mniBranchesSectionizeAfterLastSlash=最後のスラッシュの後
wnd(Log|Project|Std|).mniBranchesSectionizeCompact=単一項目は階層化しない
#                                                !=Except for single refs
wnd(Log|Project|Std|).mniBranchesSectionsBeforeRefs=グループを最初に表示する
wnd(Log|Project|Std|).mniBranchesSelectObsolete=廃止されたローカルブランチを選択
wnd(Log|Project|Std|).mniBranchesSortByName=名前でソート
wnd(Log|Project|Std|).mniBranchesSortByNameReversed=名前でソート \(番号は降順\)
wnd(Log|Project|Std|).mniBranchesSortByTime=コミットされた時間で並べ替え
wnd(Log|Project|Std|).mniChangesView.compact=コンパクト
wnd(Log|Project|Std|).mniChangesView.ignoreLineSeparators=改行コードの変更を無視する
wnd(Log|Project|Std|).mniChangesView.sideBySide=並べて表示
wnd(Log|Project|Std|).mniChangesView.unified=単独表示
wnd(Log|Project|Std|).mniCheckForLatestBuild=最新ビルドの確認
wnd(Log|Project|Std|).mniCheckForNewVersion=新しいバージョンの確認
wnd(Log|Project|Std|).mniCheckout=チェックアウト
wnd(Log|Project|Std|).mniCherryPick=チェリーピック
wnd(Log|Project|Std|).mniClean=作業ツリーのクリーンアップ
wnd(Log|Project|Std|).mniClearOutput=出力をクリア
wnd(Log|Project|Std|).mniCommit=コミット
wnd(Log|Project|Std|).mniCompact-display=コンパクトな変更表示
wnd(Log|Project|Std|).mniCompareWithWorkingTree=作業ツリーとの比較
wnd(Log|Project|Std|).mniConfigureTagGrouping=タグ-グルーピング
wnd(Log|Project|Std|).mniConfigureToolbar=ツールバーの設定
wnd(Log|Project|Std|).mniConflictSolver=コンフリクトソルバー
wnd(Log|Project|Std|).mniContactSupport=サポートに連絡
wnd(Log|Project|Std|).mniCopyCommitId=IDをコピー
wnd(Log|Project|Std|).mniCopyCommitMessage=メッセージをコピー
wnd(Log|Project|Std|).mniCopyName=名前をコピー
wnd(Log|Project|Std|).mniCopyPath=パスをコピー
wnd(Log|Project|Std|).mniCopyRelativePath=相対パスをコピー
wnd(Log|Project|Std|).mniCustomize=カスタマイズ
wnd(Log|Project|Std|).mniDebugCreateHeapDump==Create Heap Dump
wnd(Log|Project|Std|).mniDebugCreateThreadDumps==Create Periodical Thread Dumps
wnd(Log|Project|Std|).mniDebugEnableRefreshTraceLogging==Starting Tracing Refreshing
wnd(Log|Project|Std|).mniDebugLogFileMonitorEvents==Log File Monitor Events
wnd(Log|Project|Std|).mniDebugLogFileMonitorState==Log File Monitor State
wnd(Log|Project|Std|).mniDebugLogOpenRepositories==Log Open Repositories
wnd(Log|Project|Std|).mniDebugRestart=再起動
wnd(Log|Project|Std|).mniDebugRunGc==Run GC
wnd(Log|Project|Std|).mniDelete=削除
wnd(Log|Project|Std|).mniDiscard=破棄
wnd(Log|Project|Std|).mniEdit-ignore-case-changes=行比較で大文字小文字を区別しない
wnd(Log|Project|Std|).mniEditCommitAuthor=作者を編集
wnd(Log|Project|Std|).mniEditCommitMessage=メッセージの編集
#                                        !=Edit Message
wnd(Log|Project|Std|).mniEditFile=ファイルを編集
wnd(Log|Project|Std|).mniExit=終了
wnd(Log|Project|Std|).mniFastForward=ファストフォワードマージ
wnd(Log|Project|Std|).mniFetch=プル
wnd(Log|Project|Std|).mniFile-close=閉じる
wnd(Log|Project|Std|).mniFilterCommits=コミットフィルタ
wnd(Log|Project|Std|).mniFilterFiles=ファイルフィルタ
wnd(Log|Project|Std|).mniFindAction=コマンドを検索
wnd(Log|Project|Std|).mniFindObject=オブジェクトを検索
wnd(Log|Project|Std|).mniFixup=コミットにメッセージを使用
#                            !=Use Message for Commit
wnd(Log|Project|Std|).mniFlowConfigure=設定
#                                    !=<REMOVED>
wnd(Log|Project|Std|).mniFlowConfigure"Configure Features"=Feature の設定
#                                                        !=Configure Features
wnd(Log|Project|Std|).mniFlowConfigure"Configure"=設定
#                                               !=Configure
wnd(Log|Project|Std|).mniFlowContext==Git-Flow
wnd(Log|Project|Std|).mniFlowFeatureFinish=Featureを完了
wnd(Log|Project|Std|).mniFlowFeatureStart=Featureを開始
wnd(Log|Project|Std|).mniFlowHotfixFinish=Hotfixを完了
wnd(Log|Project|Std|).mniFlowHotfixStart=Hotfixの開始
wnd(Log|Project|Std|).mniFlowIntegrateDevelop=Develop を統合
wnd(Log|Project|Std|).mniFlowReleaseFinish=Releaseを完了
wnd(Log|Project|Std|).mniFlowReleaseStart=Releaseを開始
wnd(Log|Project|Std|).mniFlowSupportStart=Support ブランチを開始
wnd(Log|Project|Std|).mniForgetCommit=コミットを忘れる
wnd(Log|Project|Std|).mniGoto-next-diff=次の変更
wnd(Log|Project|Std|).mniGoto-previous-diff=前の変更
wnd(Log|Project|Std|).mniGotoChildrenCommit=子コミットを選択
wnd(Log|Project|Std|).mniGotoParentsCommit=親コミットを選択
wnd(Log|Project|Std|).mniIgnore=無視
wnd(Log|Project|Std|).mniIgnore-line-separators=改行コードの変更を無視する
wnd(Log|Project|Std|).mniIgnoreReveal=無視リストを編集
wnd(Log|Project|Std|).mniIncludeTrackedRemoteBranches=追跡されたリモート ブランチを含める
wnd(Log|Project|Std|).mniIndexEditor=indexエディタ
wnd(Log|Project|Std|).mniInvestigate==Investigate
wnd(Log|Project|Std|).mniLfsInstall=インストール
wnd(Log|Project|Std|).mniLfsLock=ロック
wnd(Log|Project|Std|).mniLfsPrune=プルーン\(Prune\)
wnd(Log|Project|Std|).mniLfsTrack=追跡
wnd(Log|Project|Std|).mniLfsUnlock=アンロック
wnd(Log|Project|Std|).mniLicenseAgreement=ライセンス規約
wnd(Log|Project|Std|).mniLocalGc=ガベージコレクタ
wnd(Log|Project|Std|).mniLog=ログ
wnd(Log|Project|Std|).mniLogCommitsColoringBranch=ブランチカラーリング
wnd(Log|Project|Std|).mniLogCommitsColoringDefault=デフォルトカラーリング
wnd(Log|Project|Std|).mniLogCommitsColoringLegacy=さまざまな色
wnd(Log|Project|Std|).mniLogCommitsColoringMerge=マージ可能なカラーリング
wnd(Log|Project|Std|).mniLogRepository=ログウィンドウを表示
wnd(Log|Project|Std|).mniLogShowAllParents=すべての親をフォロー
wnd(Log|Project|Std|).mniLogShowOnlyFirstParents=最初の親のみを表示
#                                              !=Follow Only First Parent
wnd(Log|Project|Std|).mniLogTopoFiltering=フィルタリング中にグラフを表示
wnd(Log|Project|Std|).mniLogWorkingTreeIndexOnDemand=作業ツリー インデックスをオンデマンドで表示
wnd(Log|Project|Std|).mniLogWorkingTreeIndexPermanent=Working Tree \/ Index を常に表示する
#                                                   !=Show Working Tree Permanently
wnd(Log|Project|Std|).mniMailingList=SmartGitウェブサイト
wnd(Log|Project|Std|).mniMerge=マージ
wnd(Log|Project|Std|).mniModifyCommit=変更
wnd(Log|Project|Std|).mniNewStandardWindow=スタンダードウィンドウを表示
wnd(Log|Project|Std|).mniNewWindow=新しいウィンドウ
wnd(Log|Project|Std|).mniOpen=ワーキングツリーから開く
#                           !=<REMOVED>
wnd(Log|Project|Std|).mniOpen"Open from Working Tree"=ワーキングツリーから開く
#                                                   !=Open from Working Tree
wnd(Log|Project|Std|).mniOpen"Open"=開く
#                                 !=Open
wnd(Log|Project|Std|).mniOpenDocumentation=オンラインドキュメント
wnd(Log|Project|Std|).mniOpenRootLog=ルートログを開く
wnd(Log|Project|Std|).mniOpenUserEcho=機能の要望を送る
wnd(Log|Project|Std|).mniOpenWorkingTree=作業ツリーを開く
wnd(Log|Project|Std|).mniPreferences=環境設定
wnd(Log|Project|Std|).mniPreviewCommentNext=次のコメント
wnd(Log|Project|Std|).mniPreviewCommentPrevious=前のコメント
wnd(Log|Project|Std|).mniPreviewCompareAutomatic=自動
wnd(Log|Project|Std|).mniPreviewCompareHeadVsIndex=HEAD 対 Index
wnd(Log|Project|Std|).mniPreviewCompareIndexVsWT=インデックスと作業ツリー
wnd(Log|Project|Std|).mniPreviewRefresh=再読込
wnd(Log|Project|Std|).mniPreviewShowCurrentLines=現在の行を長いテキストボックスで表示
wnd(Log|Project|Std|).mniPreviewUndo=元に戻す
wnd(Log|Project|Std|).mniPush=プッシュ
wnd(Log|Project|Std|).mniPushCommits=プッシュアップ
wnd(Log|Project|Std|).mniPushTo=プッシュ先
wnd(Log|Project|Std|).mniPushToGerrit=Gerritにプッシュ
wnd(Log|Project|Std|).mniRebaseAbort=中止
wnd(Log|Project|Std|).mniRebaseContinue=続ける
wnd(Log|Project|Std|).mniRebaseHeadTo=リベース
#                                   !=Rebase
wnd(Log|Project|Std|).mniRebaseInteractive=対話的なリベース
wnd(Log|Project|Std|).mniRebaseSkip=スキップ
wnd(Log|Project|Std|).mniRebaseStep=ステップ
wnd(Log|Project|Std|).mniRebaseToHead=HEAD にリベース
wnd(Log|Project|Std|).mniRebaseToHead"Rebase to HEAD \($1\)"=HEAD \($1\) にリベース
wnd(Log|Project|Std|).mniRebaseToHead"Rebase to HEAD"=HEAD にリベース
wnd(Log|Project|Std|).mniRefresh=更新
wnd(Log|Project|Std|).mniRegister=登録
wnd(Log|Project|Std|).mniRemoteAdd=追加
wnd(Log|Project|Std|).mniRemoteCopyUrl=URL をコピー
wnd(Log|Project|Std|).mniRemoteDelete=削除
wnd(Log|Project|Std|).mniRemoteFetch=フェッチ
wnd(Log|Project|Std|).mniRemoteFetchAll=全てフェッチ
wnd(Log|Project|Std|).mniRemoteFetchMore=追加のフェッチ
wnd(Log|Project|Std|).mniRemoteProperties=プロパティ
wnd(Log|Project|Std|).mniRemoteRename=リネーム
wnd(Log|Project|Std|).mniRemove=除去
wnd(Log|Project|Std|).mniRename=移動または名前を変更
#                             !=Move or Rename
wnd(Log|Project|Std|).mniRepositoryAdd=追加 or 作成
wnd(Log|Project|Std|).mniRepositoryAddGroup=グループを作成
wnd(Log|Project|Std|).mniRepositoryClone=クローン
wnd(Log|Project|Std|).mniRepositoryClose=閉じる
#                                      !=Close Repository
wnd(Log|Project|Std|).mniRepositoryEditConfig=リポジトリ
wnd(Log|Project|Std|).mniRepositoryEditConfigUser=ユーザー
wnd(Log|Project|Std|).mniRepositoryFavorite=お気に入り
#                                         !=<REMOVED>
wnd(Log|Project|Std|).mniRepositoryFavorite"Mark as Favorite"=お気に入りとしてマーク
wnd(Log|Project|Std|).mniRepositoryFavorite"Toggle Favorite"=お気に入りを切り替え
#                                                          !=Toggle Favorite
wnd(Log|Project|Std|).mniRepositoryFavorite"Unmark as Favorite"=お気に入りのマークを外す
wnd(Log|Project|Std|).mniRepositoryOpen=リポジトリを開く
wnd(Log|Project|Std|).mniRepositoryOpenInNewWindow=リポジトリを新しいウィンドウで開く
wnd(Log|Project|Std|).mniRepositoryRemove=除去
wnd(Log|Project|Std|).mniRepositoryRename=リネーム
wnd(Log|Project|Std|).mniRepositorySearch=リポジトリの検索
wnd(Log|Project|Std|).mniRepositorySelectObsolete=廃止されたリポジトリを選択する
wnd(Log|Project|Std|).mniRepositorySettings=設定
wnd(Log|Project|Std|).mniReset=リセット
wnd(Log|Project|Std|).mniResetAdvanced=高度なリセット
wnd(Log|Project|Std|).mniResolve=解決
wnd(Log|Project|Std|).mniResolveOurs=Ours を採用
wnd(Log|Project|Std|).mniResolveRecreateConflict=競合した状態に戻す
wnd(Log|Project|Std|).mniResolveTheirs=Theirs を採用
wnd(Log|Project|Std|).mniRevealCommit=コミットを表示する
wnd(Log|Project|Std|).mniRevealCommitExtend=選択されたコミットと比較
wnd(Log|Project|Std|).mniRevealCommitWithHead=HEAD と比較
wnd(Log|Project|Std|).mniRevealPrevCommit=前のコミットを表示する
wnd(Log|Project|Std|).mniRevealWorkingTree=作業ツリーを表示
wnd(Log|Project|Std|).mniRevert=リバート
wnd(Log|Project|Std|).mniReviewCommentCreate=コメントを追加
wnd(Log|Project|Std|).mniReviewConfigure=設定
wnd(Log|Project|Std|).mniReviewDumpDatabase=データベースのダンプ
wnd(Log|Project|Std|).mniReviewPullRequestCreate=プルリクエストを作成
wnd(Log|Project|Std|).mniReviewPullRequestCreate"Create Merge Request"=マージリクエストを作成
wnd(Log|Project|Std|).mniReviewPullRequestCreate"Create Pull Request"=プルリクエストを作成
wnd(Log|Project|Std|).mniReviewShowClosedPullRequests=終了したプルリクエストを表示する
wnd(Log|Project|Std|).mniReviewSync=同期
wnd(Log|Project|Std|).mniRewriteTextFile=改行コードを修正
wnd(Log|Project|Std|).mniSaveAs=名前を付けて保存
wnd(Log|Project|Std|).mniSearch-find=検索
wnd(Log|Project|Std|).mniSearch-next=次を検索
wnd(Log|Project|Std|).mniSearch-previous=前を検索
wnd(Log|Project|Std|).mniSelectCommittableFiles=コミット可能なファイルを選択
wnd(Log|Project|Std|).mniSelectDirectory=ディレクトリを選択
wnd(Log|Project|Std|).mniSelectRoot=リポジトリルートを選択
wnd(Log|Project|Std|).mniSet-syntax=シンタックスハイライトの言語選択
wnd(Log|Project|Std|).mniSetDepth=深さの設定
wnd(Log|Project|Std|).mniShow-line-numbers=行番号の表示
wnd(Log|Project|Std|).mniShowChanges=比較する
wnd(Log|Project|Std|).mniSkipWorkTree='Skip Worktree' フラグを切り替え
wnd(Log|Project|Std|).mniSortCommitsAsIs=時間順でソート
#                                      !=Sort By Time
wnd(Log|Project|Std|).mniSortCommitsFirstParentsBeforeMergeParents=最初の親、マージの親の順にソートする
wnd(Log|Project|Std|).mniSortCommitsMergeParentsBeforeFirstParents=マージの親、最初の親の順にソートする
wnd(Log|Project|Std|).mniSplitCommit=分割
wnd(Log|Project|Std|).mniSquashCommits=スカッシュ
#                                    !=Squash
wnd(Log|Project|Std|).mniStage=ステージ
wnd(Log|Project|Std|).mniStashApply=スタッシュを適用
wnd(Log|Project|Std|).mniStashDrop=スタッシュを削除
wnd(Log|Project|Std|).mniStashRename=リネーム
wnd(Log|Project|Std|).mniStashSave=すべての変更を隠す
wnd(Log|Project|Std|).mniStashSaveSelection=選択した変更を隠す
wnd(Log|Project|Std|).mniSubmoduleDeactivate=無効にする
wnd(Log|Project|Std|).mniSubmoduleDeinit=削除\(Deinit\)
wnd(Log|Project|Std|).mniSubmoduleInit=初期化
wnd(Log|Project|Std|).mniSubmoduleRegister=追加
wnd(Log|Project|Std|).mniSubmoduleReset=リセット
wnd(Log|Project|Std|).mniSubmoduleSync=同期
wnd(Log|Project|Std|).mniSubmoduleUnregister=登録を解除
wnd(Log|Project|Std|).mniSubtreeAdd=追加
wnd(Log|Project|Std|).mniSubtreeMerge=マージ
wnd(Log|Project|Std|).mniSubtreePush=プッシュ
wnd(Log|Project|Std|).mniSubtreeReset=リセット
wnd(Log|Project|Std|).mniSubtreeSplit=分割
wnd(Log|Project|Std|).mniSync=同期
wnd(Log|Project|Std|).mniUndoLastCommit=直前のコミットを元に戻す
wnd(Log|Project|Std|).mniUnstage=アンステージ
wnd(Log|Project|Std|).mniView-ignore-whitespaces-all=行比較で空白をすべて無視する
wnd(Log|Project|Std|).mniView-ignore-whitespaces-leading-trailing=行比較で先頭と行末の空白を無視する
wnd(Log|Project|Std|).mniView-ignore-whitespaces-none=行比較で空白を無視しない
wnd(Log|Project|Std|).mniView-remember-as-default=デフォルトとして記憶する
wnd(Log|Project|Std|).mniView-settings=設定
wnd(Log|Project|Std|).mniView-show-current-line-control=現在の行を長いテキストボックスで表示
wnd(Log|Project|Std|).mniViewFromSubmodules=サブモジュールのファイルを表示する
wnd(Log|Project|Std|).mniViewIgnored=無視されたファイルを表示する
wnd(Log|Project|Std|).mniViewRecursive=サブディレクトリのファイル
wnd(Log|Project|Std|).mniViewRenameSource=名前変更元のファイルを表示
wnd(Log|Project|Std|).mniViewSeparateWtAndIndex=作業ツリーとインデックスを分離
wnd(Log|Project|Std|).mniViewSetAnchorCommit=アンカーコミットを設定
wnd(Log|Project|Std|).mniViewSkipped=スキップされたファイルを表示
wnd(Log|Project|Std|).mniViewStaged=ステージングされたファイルを表示
wnd(Log|Project|Std|).mniViewStyleIndex=Indexのみ
wnd(Log|Project|Std|).mniViewStyleMixed==Mixed
wnd(Log|Project|Std|).mniViewStyleWorkingTree=作業ツリーのみ
wnd(Log|Project|Std|).mniViewToolBar=ツールバーを表示
wnd(Log|Project|Std|).mniViewUnchanged=未変更ファイルの表示
wnd(Log|Project|Std|).mniViewUnchangedAssumed=変更すべきでない\(assume-unchanged\)ファイルを表示
wnd(Log|Project|Std|).mniViewUnversioned=バージョン管理されていないファイルを表示
wnd(Log|Project|Std|).mniWindowBranches=ブランチ
wnd(Log|Project|Std|).mniWindowChanges=変更点
wnd(Log|Project|Std|).mniWindowClose=閉じる
wnd(Log|Project|Std|).mniWindowComments=コメント
wnd(Log|Project|Std|).mniWindowCommit=コミット
wnd(Log|Project|Std|).mniWindowDebugLog=デバッグログ
wnd(Log|Project|Std|).mniWindowDirectories=リポジトリ
wnd(Log|Project|Std|).mniWindowFiles=ファイル
wnd(Log|Project|Std|).mniWindowGraph=グラフ
wnd(Log|Project|Std|).mniWindowHideView=ビューを隠す
wnd(Log|Project|Std|).mniWindowJournal=ジャーナル
wnd(Log|Project|Std|).mniWindowLayoutSetMain=メインの作業環境
wnd(Log|Project|Std|).mniWindowLayoutSetReview=レビュー用の作業環境
wnd(Log|Project|Std|).mniWindowOutput=出力
wnd(Log|Project|Std|).mniWindowWorkingTree=ワーキングツリーウィンドウを表示する
wnd(Log|Project|Std|).mniWorktreeAdd=ワークツリーを追加
wnd(Log|Project|Std|).mniWorktreePrune=廃止されたワークツリーを整理する
wnd(Log|Project|Std|).mniWorktreeRemove=ワークツリーを削除する
wnd(Log|Project|Std|).mnu"Bisect"=問題箇所の特定\(Bisect\)
wnd(Log|Project|Std|).mnu"Branch"=ブランチ
wnd(Log|Project|Std|).mnu"Branches"=ブランチ
wnd(Log|Project|Std|).mnu"Changes"=変更点
wnd(Log|Project|Std|).mnu"Commits"=コミット
wnd(Log|Project|Std|).mnu"Debug"=デバッグ
wnd(Log|Project|Std|).mnu"Edit Git Config"=Git Config を編集
wnd(Log|Project|Std|).mnu"Edit"=編集
wnd(Log|Project|Std|).mnu"Git-Flow"==Git-Flow
wnd(Log|Project|Std|).mnu"Help"=ヘルプ
wnd(Log|Project|Std|).mnu"LFS"==LFS
wnd(Log|Project|Std|).mnu"Local"=ローカル
wnd(Log|Project|Std|).mnu"Query"=クエリ
wnd(Log|Project|Std|).mnu"Rebase"=リベース
wnd(Log|Project|Std|).mnu"Remote"=リモート
wnd(Log|Project|Std|).mnu"Repositories"=リポジトリ
wnd(Log|Project|Std|).mnu"Repository"=リポジトリ
wnd(Log|Project|Std|).mnu"Resolve"=競合の解決
wnd(Log|Project|Std|).mnu"Review"=レビュー
wnd(Log|Project|Std|).mnu"Submodule"=サブモジュール
wnd(Log|Project|Std|).mnu"Subtree"=サブツリー
wnd(Log|Project|Std|).mnu"Tools"=ツール
wnd(Log|Project|Std|).mnu"View"=表示
wnd(Log|Project|Std|).tab"Branches"=ブランチ
wnd(Log|Project|Std|).tab"Changes \(EOL: Unix - expected Windows\)"=変更点 \(EOL: Unix - expected Windows\)
#                                                                 !=Changes \(EOL: Unix - expected Windows\)
wnd(Log|Project|Std|).tab"Changes \(EOL: Windows\)"=変更点 \(EOL: Windows\)
#                                                 !=Changes \(EOL: Windows\)
wnd(Log|Project|Std|).tab"Changes of $1 - $2 \($3\)"=\
 変更点 $1 - $2 \($3\)
wnd(Log|Project|Std|).tab"Changes of $1 - $2"=変更点 $1 - $2
wnd(Log|Project|Std|).tab"Changes of $1 \($2\) - $3"=\
 変更点 $1 \($2\) - $3
wnd(Log|Project|Std|).tab"Changes of $1 \($2\)"=変更点 $1 \($2\)
wnd(Log|Project|Std|).tab"Changes"=変更点
wnd(Log|Project|Std|).tab"Comments \($1\)"=コメント \($1\)
wnd(Log|Project|Std|).tab"Comments"=コメント
wnd(Log|Project|Std|).tab"Commit Message"=コミットメッセージ
wnd(Log|Project|Std|).tab"Commit"=コミット
wnd(Log|Project|Std|).tab"Debug Log"=デバッグログ
wnd(Log|Project|Std|).tab"Files \(Working Tree\)"=ファイル \(作業ツリー\)
wnd(Log|Project|Std|).tab"Files"=ファイル
wnd(Log|Project|Std|).tab"Graph \(Initializing Log-Cache...\)"=グラフ \(ログキャッシュを初期化しています...\)
wnd(Log|Project|Std|).tab"Graph \(Initializing Subtree-Cache...\)"=グラフ \(サブツリー キャッシュを初期化しています...\)
wnd(Log|Project|Std|).tab"Graph \(Initializing...\)"=グラフ \(初期化中...\)
wnd(Log|Project|Std|).tab"Graph \(Loading...\)"=グラフ \(読み込み中...\)
wnd(Log|Project|Std|).tab"Graph \(Running log...\)"=グラフ \(実行ログ...\)
wnd(Log|Project|Std|).tab"Graph \(Scanning WT...\)"=グラフ \(作業ツリーのスキャン...\)
wnd(Log|Project|Std|).tab"Graph"=グラフ
wnd(Log|Project|Std|).tab"Journal"=ジャーナル
wnd(Log|Project|Std|).tab"Output"=出力
wnd(Log|Project|Std|).tab"Repositories"=リポジトリ
wnd(Log|Project|Std|).tbr"  History  "=履歴
wnd(Log|Project|Std|).tbr"Add Tag"=タグを追加
wnd(Log|Project|Std|).tbr"Add or Create"=追加または作成
wnd(Log|Project|Std|).tbr"Add"=追加
wnd(Log|Project|Std|).tbr"Apply Stash"=スタッシュを適用
wnd(Log|Project|Std|).tbr"Blame"=ブレーム
wnd(Log|Project|Std|).tbr"Branch"=ブランチ
wnd(Log|Project|Std|).tbr"Changes"=変更点
wnd(Log|Project|Std|).tbr"Check Out"=チェックアウト
wnd(Log|Project|Std|).tbr"Cherry-Pick"=チェリーピック
wnd(Log|Project|Std|).tbr"Clone"=クローン
wnd(Log|Project|Std|).tbr"Commit"=コミット
wnd(Log|Project|Std|).tbr"Compact"=コンパクト
wnd(Log|Project|Std|).tbr"Conflict Solver"=コンフリクトソルバー
wnd(Log|Project|Std|).tbr"Delete"=削除
wnd(Log|Project|Std|).tbr"Discard"=破棄
wnd(Log|Project|Std|).tbr"Drop Stash"=スタッシュを削除
wnd(Log|Project|Std|).tbr"Fetch"=フェッチ
wnd(Log|Project|Std|).tbr"Finish"=完了
wnd(Log|Project|Std|).tbr"Git-Flow"==Git-Flow
wnd(Log|Project|Std|).tbr"Ignore"=無視
wnd(Log|Project|Std|).tbr"Index Editor"=indexエディタ
wnd(Log|Project|Std|).tbr"Integrate"=統合
wnd(Log|Project|Std|).tbr"Investigate"==Investigate
wnd(Log|Project|Std|).tbr"Local Files"=ローカルファイル
wnd(Log|Project|Std|).tbr"Log Selection"=選択項目の履歴
wnd(Log|Project|Std|).tbr"Log"=ログ
wnd(Log|Project|Std|).tbr"Main"=メイン
wnd(Log|Project|Std|).tbr"Merge"=マージ
wnd(Log|Project|Std|).tbr"Pull"=プル
wnd(Log|Project|Std|).tbr"Push To"=プッシュ先
wnd(Log|Project|Std|).tbr"Push"=プッシュ
wnd(Log|Project|Std|).tbr"Rebase"=リベース
wnd(Log|Project|Std|).tbr"Refresh"=更新
wnd(Log|Project|Std|).tbr"Remove"=除去
wnd(Log|Project|Std|).tbr"Reset Adv."=高度なリセット
wnd(Log|Project|Std|).tbr"Reset"=リセット
wnd(Log|Project|Std|).tbr"Revert"=リバート
wnd(Log|Project|Std|).tbr"Review"=レビュー
wnd(Log|Project|Std|).tbr"Save Stash"=スタッシュに保存
wnd(Log|Project|Std|).tbr"Search"=検索
wnd(Log|Project|Std|).tbr"Side by Side"=並べて表示
wnd(Log|Project|Std|).tbr"Stage"=ステージ
wnd(Log|Project|Std|).tbr"Start"=開始
wnd(Log|Project|Std|).tbr"Sync"=同期
wnd(Log|Project|Std|).tbr"Unified"=単独表示
wnd(Log|Project|Std|).tbr"Unstage"=アンステージ
wnd(Log|Project|Std|).tbt"Clear logging."=ログをクリア
wnd(Log|Project|Std|).tbt"Commit Message History"=コミットメッセージの履歴
wnd(Log|Project|Std|).tbt"Hosting provider is not configured for the current repository. Go to the Preferences to add a configuration."=\
 現在のリポジトリにホスティングプロバイダーが設定されていません。環境設定から、設定を追加してください。
wnd(Log|Project|Std|).tbt"If selected, files from subdirectories are shown."=\
 選択した場合、サブディレクトリにあるファイルも表示されます。
wnd(Log|Project|Std|).tbt"If selected, the directories will be shown."=\
 ディレクトリが表示されます。
wnd(Log|Project|Std|).tbt"Indicates how many files or directories are selected."=\
 選択されているファイルまたはディレクトリの数を示します。
wnd(Log|Project|Std|).tbt"Interpret the search pattern as regular expression."=\
 検索パターンを正規表現として解釈します。
wnd(Log|Project|Std|).tbt"Options"=オプション
wnd(Log|Project|Std|).tbt"Reading incoming merge requests from '$1'."=\
 $1 から受信したマージ要求を読み取る
wnd(Log|Project|Std|).tbt"Reading repository info from '$1'."=$1'からリポジトリ情報を読み込んでいます。
wnd(Log|Project|Std|).tbt"Refresh information from GitLab."=GitLab からの情報を更新します。
wnd(Log|Project|Std|).tbt"Show directories tree"=ディレクトリツリーを表示
wnd(Log|Project|Std|).tbtAnnotate=選択したファイルのブレーム \(注釈付き\) ビューを表示します。
wnd(Log|Project|Std|).tbtBranchAdd=現在のコミットに対して新しいブランチを追加します。
wnd(Log|Project|Std|).tbtBranchAddTag=現在のコミットに対して新しいタグを追加します。
wnd(Log|Project|Std|).tbtCheckout=既存のコミットをチェックアウトします。
wnd(Log|Project|Std|).tbtCherryPick=他のブランチからの変更をマージします。
wnd(Log|Project|Std|).tbtClearOutput=「出力」ペーンをクリアします。
wnd(Log|Project|Std|).tbtCommit=ローカルの変更をコミットします。
wnd(Log|Project|Std|).tbtConflictSolver=競合解決ツール\(または設定された外部のマージツール\)を開き、競合を解決します。
wnd(Log|Project|Std|).tbtDelete=選択したローカルファイルまたはディレクトリを削除します。
wnd(Log|Project|Std|).tbtDiscard=ローカルの変更を破棄します
wnd(Log|Project|Std|).tbtFetch=リモートリポジトリからコミットを取得し、（オプションで）ローカルの可能なコミットと統合します。
wnd(Log|Project|Std|).tbtFlowContext=Git-Flow feature を完了
wnd(Log|Project|Std|).tbtFlowFeatureFinish=Git-Flow feature を完了
#                                        !=<REMOVED>
wnd(Log|Project|Std|).tbtFlowFeatureStart=新しい Git-Flow の feature を開始します。
#                                       !=<REMOVED>
wnd(Log|Project|Std|).tbtFlowHotfixFinish=Git-Flow hotfix を完了
wnd(Log|Project|Std|).tbtFlowHotfixStart=新しい Git-Flow の hotfix を開始します。
wnd(Log|Project|Std|).tbtFlowIntegrateDevelop=新しいベースコミットをGit-Flowのfeatureに統合する。
wnd(Log|Project|Std|).tbtGoto-next-diff=次の変更点に移動します。
wnd(Log|Project|Std|).tbtGoto-previous-diff=前の変更点に移動します。
wnd(Log|Project|Std|).tbtIgnore=バージョン管理されていないローカル ファイル/ディレクトリを無視するようにマークします。
wnd(Log|Project|Std|).tbtIndexEditor=行単位のステージングなど、選択したファイルのインデックスの状態を編集することができます。
wnd(Log|Project|Std|).tbtInvestigate=DeepGit を使用して行ごとに履歴を調査します。
wnd(Log|Project|Std|).tbtLog=選択したファイルやディレクトリの履歴を表示します。
wnd(Log|Project|Std|).tbtLogRepository=リポジトリ全体の履歴を表示します。
wnd(Log|Project|Std|).tbtMerge=他のブランチからの変更をマージします。
wnd(Log|Project|Std|).tbtPreviewRefresh=プレビューしたファイルの内容を再読み込みします。
wnd(Log|Project|Std|).tbtPush=ローカルのコミットをリモートの origin リポジトリにプッシュします。
wnd(Log|Project|Std|).tbtPushTo=ローカルコミットをリモートリポジトリにプッシュし、ターゲットリポジトリを選択できるようにします。
wnd(Log|Project|Std|).tbtRebaseHeadTo=選択したコミットに対して、HEADコミットを適用します。
#                                   !=Apply commits from your current branch to the selected commit.
wnd(Log|Project|Std|).tbtRefresh=ログ ビューを更新します。
wnd(Log|Project|Std|).tbtRemoteFetch=すべてのリモート リポジトリからコミットをフェッチします。
#                                  !=<REMOVED>
wnd(Log|Project|Std|).tbtRemoteFetch"Fetch commits from all remote repositories."=すべてのリモートリポジトリからコミットを取得します。
#                                                                               !=Fetch commits from all remote repositories.
wnd(Log|Project|Std|).tbtRemoteFetch"Fetch commits from current remote repository."=現在のリモートリポジトリからコミットを取得します。
#                                                                                 !=Fetch commits from current remote repository.
wnd(Log|Project|Std|).tbtRemove=選択したファイルやディレクトリをリポジトリから削除します。
wnd(Log|Project|Std|).tbtRepositoryAdd=リポジトリを追加または新規作成します。
wnd(Log|Project|Std|).tbtRepositoryClone=新しいリポジトリのクローンを作成します。
wnd(Log|Project|Std|).tbtRepositorySearch=既存のリポジトリを検索します。
wnd(Log|Project|Std|).tbtReset=現在のHEADを別のコミットにリセットします。
wnd(Log|Project|Std|).tbtResetAdvanced=現在の HEAD を別のコミットにリセットし、差分を Index または 作業ツリーに保持します。
wnd(Log|Project|Std|).tbtRevealHomeCommit=HEAD/作業ツリーをグラフで表示します。
wnd(Log|Project|Std|).tbtRevealPrevCommit=作業ツリーの表示を呼び出す前に、選択したコミットを表示します。
wnd(Log|Project|Std|).tbtRevealWorkingTree=作業ツリーノードをグラフに表示します。
wnd(Log|Project|Std|).tbtRevert=既存のコミットの変更を"リバース"マージして元に戻します。
wnd(Log|Project|Std|).tbtShowChanges=選択したファイルのファイル比較を開きます。
wnd(Log|Project|Std|).tbtStage=作業中のツリーファイルをインデックスに格納し、次のコミットに備えます。
wnd(Log|Project|Std|).tbtStashApply=スタッシュからローカルに変更を再適用します。
wnd(Log|Project|Std|).tbtStashDrop=リポジトリから1つまたは複数のスタッシュを削除します。
wnd(Log|Project|Std|).tbtStashSave=現在のローカルの変更をスタッシュに退避します。
wnd(Log|Project|Std|).tbtStdSetModeHistory=ヒストリービューを表示する。
wnd(Log|Project|Std|).tbtStdSetModeWt=リポジトリのローカルファイル（作業ツリー）を表示します。
wnd(Log|Project|Std|).tbtSync=現在のブランチのローカルコミットをプッシュし、リモートの変更をプルします。
wnd(Log|Project|Std|).tbtUnstage=インデックスからステージングされた変更を削除します。
wnd(Log|Project|Std|).tbtViewFromSubmodules=サブモジュールのファイルが表示されます。
wnd(Log|Project|Std|).tbtViewIgnored=無視されたファイルが表示されます。
wnd(Log|Project|Std|).tbtViewRenameSource=名前の変更として認識されたファイルの削除/紛失を表示します。
wnd(Log|Project|Std|).tbtViewSkipped=スキップされたファイルが表示されます。
wnd(Log|Project|Std|).tbtViewStaged=選択すると、ステージングされた（インデックス）変更があるファイルと、作業ツリーの変更がないファイルが表示されます。
wnd(Log|Project|Std|).tbtViewUnchanged=選択すると、変更されていないファイルが表示されます。
wnd(Log|Project|Std|).tbtViewUnchangedAssumed=変更すべきでない\(assume-unchanged\)フラグが設定されたファイルが表示されます。
wnd(Log|Project|Std|).tbtViewUnversioned=選択すると、まだバージョン管理されていないファイルが表示されます。
wnd(Log|Project|Std|).tbtWindowLayoutSetMain=メイン の表示に切り替えます。
wnd(Log|Project|Std|).tbtWindowLayoutSetReview=レビュー向けの表示に切り替えます。
