*.btn"Cancel"=Cancel
*.btn"Close"=Close
*.btn"OK"=OK
*.hnt"Filter"=Filter
dlgDgAbout.edt"Build Date"=Build Date
dlgDgAbout.edt"Email"=Email
dlgDgAbout.edt"Java Version"=Java Version
dlgDgAbout.edt"Name"=Name
dlgDgAbout.edt"Settings Path"=Settings Path
dlgDgAbout.edt"Version"=Version
dlgDgAbout.tab"Credits"=Credits
dlgDgAbout.tab"Information"=Information
dlgDgAbout.tab"Licensee"=Licensee
dlgDgAbout.tle=About DeepGit
dlgDgSetEncoding.edt"Text File Encoding"=Text File Encoding
dlgDgSetEncoding.hdl=Configure Encoding
dlgDgSetEncoding.inf=Specify the encoding which should be used for processing and viewing files. Note, that UTF-8 encoding will be auto-detected, regardless of the configuration here.
dlgDgSetEncoding.tle=Set Encoding
dlgInfo.tle=Discard
dlgProgress.btn"Stop"=Stop
dlgProgress.tle"Checking connectivity"=Checking connectivity
dlgProgress.tle"Checking push conditions"=Checking push conditions
dlgProgress.tle"JIRA"=JIRA
dlgProgress.tle"Jump To"=Jump To
dlgProgress.tle"Layouting Graph"=Layouting Graph
dlgProgress.tle"Refresh"=Refresh
dlgProgress.tle"Reveal Commit"=Reveal Commit
dlgProgress.tle"SmartGit Installation Update"=SmartGit Installation Update
dlgProgress.tle"Upgrade"=Upgrade
dlgQBugFileSendingFailed.fur%1=Maybe you need to configure a proxy or our server is temporarily down.\nDetails: $1
dlgQBugFileSendingFailed.hdl%1=Could not send the crash logs to $1
dlgQBugFileSendingFailed.tle=Native Crash Logs
dlgQBugReportSend.btn"Force Exit"=Force Exit
dlgQBugReportSend.btn"Report Bug"=Report Bug
dlgQBugReportSend.edt"Comments or Steps to Reproduce"=Comments or Steps to Reproduce
dlgQBugReportSend.edt"Email"=Email
dlgQBugReportSend.tle=Internal Error
dlgQDockManagerClosedView.chk=Don't show again
dlgQDockManagerClosedView.fur=To reopen it again, use the corresponding menu item from the Window menu.
dlgQDockManagerClosedView.hdl%1=You've closed the view '$1'.
dlgQDockManagerClosedView.tle=Closed View
dlgQFileSaveAcceptFilterOverwrite.btn"Overwrite"=Overwrite
dlgQFileSaveAcceptFilterOverwrite.fur=To save to a different file, click 'Cancel'.
dlgQFileSaveAcceptFilterOverwrite.hdl%1=The file $1 already exists. Do you want to overwrite it?
dlgQFileSaveAcceptFilterOverwrite.tle=Overwrite File
dlgQFrameManagerExit.btn"Discard Changes && Exit"=Discard Changes && Exit
dlgQFrameManagerExit.fur=There are unsaved changes which would be lost when exiting now!
dlgQFrameManagerExit.hdl=Do you really want to exit SmartGit?
dlgQFrameManagerExit.tle=Exit
dlgQIntegerInputProviderInvalidValue.fur%2=Port must be in the range from $1 to $2.
dlgQIntegerInputProviderInvalidValue.hdl%1=The text in field '$1' is not valid.
dlgQIntegerInputProviderInvalidValue.tle=Input Validation
dlgQProxyConfigure.chk"Proxy requires authentication"=Proxy requires authentication
dlgQProxyConfigure.edt"Host"=Host
dlgQProxyConfigure.edt"Password"=Password
dlgQProxyConfigure.edt"Port"=Port
dlgQProxyConfigure.edt"Username"=Username
dlgQProxyConfigure.lbl"Note: The password will be stored in plain text in SmartGit's configuration area!"=\
 Note: The password will be stored in plain text in SmartGit's configuration area!
dlgQProxyConfigure.rbt"Auto-detect the system proxy"=Auto-detect the system proxy
dlgQProxyConfigure.rbt"Don't use a proxy"=Don't use a proxy
dlgQProxyConfigure.rbt"Use following proxy"=Use following proxy
dlgQProxyConfigure.tle=Configure Proxy
dlgQProxyConnectionFailed.btn"Configure Proxy"=Configure Proxy
dlgQProxyConnectionFailed.btn"Retry"=Retry
dlgQProxyConnectionFailed.fur=Details: syntevo.com
dlgQProxyConnectionFailed.hdl%1=Could not connect to $1.
dlgQProxyConnectionFailed.tle=Connection Failed
dlgQUpdateCheckForNewVersion.btn"Configure Proxy"=Configure Proxy
dlgQUpdateCheckForNewVersion.btn"Exit"=Exit
dlgQUpdateCheckForNewVersion.btn"Retry"=Retry
dlgQUpdateCheckForNewVersion.btn"Skip"=Skip
dlgQUpdateCheckForNewVersion.hdl=SmartGit needs to check for updates
dlgQUpdateCheckForNewVersion.inf=If necessary, please configure the proxy and retry.
dlgQUpdateCheckForNewVersion.tle=Check for New Version
dlgQUpdateCheckForNewVersionFailed.fur%1=Details: Failed to connect to '$1'.
dlgQUpdateCheckForNewVersionFailed.hdl=Checking for new versions has failed.
dlgQUpdateCheckForNewVersionFailed.tle=Check for New Version
dlgQUpdateCheckLatestBuild.btn"Get Latest Build"=Get Latest Build
dlgQUpdateCheckLatestBuild.fur=Only use the latest build if requested by the support team.
dlgQUpdateCheckLatestBuild.hdl=Are you sure to download the latest build?
dlgQUpdateCheckLatestBuild.tle=Check for Latest Build
dlgQUpdateCheckLatestBuildFetchFailed.fur%1=Details: $1
dlgQUpdateCheckLatestBuildFetchFailed.hdl=Initializing upgrade failed.
dlgQUpdateCheckLatestBuildFetchFailed.tle=Check for Latest Build
dlgQUpdateCheckNoNewerLatestBuild.fur=You are already using the latest build.
dlgQUpdateCheckNoNewerLatestBuild.hdl=No newer build found.
dlgQUpdateCheckNoNewerLatestBuild.tle=Check for Latest Build
dlgQUpdateCheckNowNewerVersion.fur=You are already using the latest version.
dlgQUpdateCheckNowNewerVersion.hdl=No newer version found.
dlgQUpdateCheckNowNewerVersion.tle=Check for New Version
dlgScAboutUpdateInstallation.btn"Upgrade Installation"=Upgrade Installation
dlgScAboutUpdateInstallation.fur=This will take a few moments and has to restart SmartGit.
dlgScAboutUpdateInstallation.hdl%1=Do you want to upgrade the installation directory to version $1?
dlgScAboutUpdateInstallation.tle=Upgrade Installation
dlgScApplicationStarterRestart.btn"Exit"=Exit
dlgScApplicationStarterRestart.btn"Remind Later"=Remind Later
dlgScApplicationStarterRestart.btn"Restart"=Restart
dlgScApplicationStarterRestart.fur=The downloaded program update should be applied now.
dlgScApplicationStarterRestart.hdl=SmartGit requires a restart.
dlgScApplicationStarterRestart.tle=Restart
dlgScBugtrackerCredentials.btn"Login"=Login
dlgScBugtrackerCredentials.chk"Store password"=Store password
dlgScBugtrackerCredentials.edt"Password"=Password
dlgScBugtrackerCredentials.edt"User Name"=User Name
dlgScBugtrackerCredentials.hdl%1=Login to '$1'
dlgScBugtrackerCredentials.inf=Provide the user name and password for authenticating to JIRA.
dlgScBugtrackerCredentials.tle=Login to JIRA
dlgScBugtrackerCredentials.wrn"HTTP response code $1"=HTTP response code $1
dlgScBugtrackerSslClientCertificate.btn"Login"=Login
dlgScBugtrackerSslClientCertificate.chk"Store passphrase"=Store passphrase
dlgScBugtrackerSslClientCertificate.edt"Certificate"=Certificate
dlgScBugtrackerSslClientCertificate.edt"Passphrase"=Passphrase
dlgScBugtrackerSslClientCertificate.hdl%1=Select the client certificate for $1
dlgScBugtrackerSslClientCertificate.inf=Select the client certificate file for authenticating to JIRA.
dlgScBugtrackerSslClientCertificate.tle=JIRA Client Certificate
dlgScBugtrackerSslClientCertificate.wrn"$1"=$1
dlgScBugtrackerSslFingerprintNew.btn"Accept"=Accept
dlgScBugtrackerSslFingerprintNew.btn"Reject"=Reject
dlgScBugtrackerSslFingerprintNew.edt"MD5 fingerprint"=MD5 fingerprint
dlgScBugtrackerSslFingerprintNew.edt"SHA fingerprint"=SHA fingerprint
dlgScBugtrackerSslFingerprintNew.edt"Server"=Server
dlgScBugtrackerSslFingerprintNew.lbl"Is the following server fingerprint correct?"=\
 Is the following server fingerprint correct?
dlgScBugtrackerSslFingerprintNew.lbl"When in doubt, contact your server administrator."=\
 When in doubt, contact your server administrator.
dlgScBugtrackerSslFingerprintNew.tle=SSL Authentication
dlgScConflictSolverAdd.edt"Arguments"=Arguments
dlgScConflictSolverAdd.edt"Command"=Command
dlgScConflictSolverAdd.edt"File Pattern"=File Pattern
dlgScConflictSolverAdd.hdl=Add conflict solver
dlgScConflictSolverAdd.inf"Define the file pattern \(e.g. \*.txt\) and select the merge tool which should be used to resolve conflicting files matching this pattern."=\
 Define the file pattern \(e.g. \*.txt\) and select the merge tool which should be used to resolve conflicting files matching this pattern.
dlgScConflictSolverAdd.lbl"Valid wildcards are ?\u00a0\(one arbitrary character\) and \*\u00a0\(any number of arbitrary characters\). Separate multiple patterns by comma. Example:\u00a0\*.txt,\u00a0\*.html"=\
 Valid wildcards are ?\u00a0\(one arbitrary character\) and \*\u00a0\(any number of arbitrary characters\). Separate multiple patterns by comma. Example:\u00a0\*.txt,\u00a0\*.html
dlgScConflictSolverAdd.rbt"Built-in Conflict Solver"=Built-in Conflict Solver
dlgScConflictSolverAdd.rbt"External Conflict Solver"=External Conflict Solver
dlgScConflictSolverAdd.tle=Add
dlgScConflictSolverEdit.edt"Arguments"=Arguments
dlgScConflictSolverEdit.edt"Command"=Command
dlgScConflictSolverEdit.edt"File Pattern"=File Pattern
dlgScConflictSolverEdit.hdl=Edit conflict solver
dlgScConflictSolverEdit.inf"Define the file pattern \(e.g. \*.txt\) and select the merge tool which should be used to resolve conflicting files matching this pattern."=\
 Define the file pattern \(e.g. \*.txt\) and select the merge tool which should be used to resolve conflicting files matching this pattern.
dlgScConflictSolverEdit.lbl"Valid wildcards are ?\u00a0\(one arbitrary character\) and \*\u00a0\(any number of arbitrary characters\). Separate multiple patterns by comma. Example:\u00a0\*.txt,\u00a0\*.html"=\
 Valid wildcards are ?\u00a0\(one arbitrary character\) and \*\u00a0\(any number of arbitrary characters\). Separate multiple patterns by comma. Example:\u00a0\*.txt,\u00a0\*.html
dlgScConflictSolverEdit.rbt"Built-in Conflict Solver"=Built-in Conflict Solver
dlgScConflictSolverEdit.rbt"External Conflict Solver"=External Conflict Solver
dlgScConflictSolverEdit.tle=Edit
dlgScConflictSolverUnresolvedConflicts.chk=Don't warn me again
dlgScConflictSolverUnresolvedConflicts.fur=Not all conflicts have been resolved.
dlgScConflictSolverUnresolvedConflicts.hdl=Do you want to close the Conflict Solver?
dlgScConflictSolverUnresolvedConflicts.tle=Unresolved Conflicts
dlgScCustomizeAccelerators.btn"Assign"=Assign
dlgScCustomizeAccelerators.btn"Clear"=Clear
dlgScCustomizeAccelerators.btn"Reset"=Reset
dlgScCustomizeAccelerators.col"Accelerator"=Accelerator
dlgScCustomizeAccelerators.col"Default"=Default
dlgScCustomizeAccelerators.col"Menu Item"=Menu Item
dlgScCustomizeAccelerators.edt"Accelerator"=Accelerator
dlgScCustomizeAccelerators.hdl=Customize Accelerators
dlgScCustomizeAccelerators.inf=Double click on the menu item for which the accelerator should be changed, then press the accelerator keys and click the Assign button.
dlgScCustomizeAccelerators.tle=Customize
dlgScDialogAssertionHandler.btn"Send Logs"=Send Logs
dlgScDialogAssertionHandler.edt"Email"=Email
dlgScDialogAssertionHandler.edt"Optional comments or steps to reproduce \(in case you still recall\)"=\
 Optional comments or steps to reproduce \(in case you still recall\)
dlgScDialogAssertionHandler.tle=Native Crash Logs
dlgScDialogAssertionHandlerLinkageError.btn"Copy"=Copy
dlgScDialogAssertionHandlerLinkageError.btn"Force Exit"=Force Exit
dlgScDialogAssertionHandlerLinkageError.lbl"SmartGit has detected inconsistencies within its installation files \(JAR files\), what has most likely been caused by a faulty installation.\n\nPlease uninstall SmartGit completely, make sure there are no more installation files left \(especially JAR files\), then reinstall.\n\nIf the problem persists, send following log file as an attachment to smartgit@syntevo.com."=\
 SmartGit has detected inconsistencies within its installation files \(JAR files\), what has most likely been caused by a faulty installation.\n\nPlease uninstall SmartGit completely, make sure there are no more installation files left \(especially JAR files\), then reinstall.\n\nIf the problem persists, send following log file as an attachment to smartgit@syntevo.com.
dlgScDialogAssertionHandlerLinkageError.tle=Internal Error
dlgScFileComparatorAdd.edt"Arguments"=Arguments
dlgScFileComparatorAdd.edt"Command"=Command
dlgScFileComparatorAdd.edt"File Pattern"=File Pattern
dlgScFileComparatorAdd.hdl=Add external diff tool
dlgScFileComparatorAdd.inf"Define the file pattern \(e.g. \*.png\) and select the compare command which should be used to compare files matching the file pattern."=\
 Define the file pattern \(e.g. \*.png\) and select the compare command which should be used to compare files matching the file pattern.
dlgScFileComparatorAdd.lbl"Valid wildcards are ?\u00a0\(one arbitrary character\) and \*\u00a0\(any number of arbitrary characters\). Separate multiple patterns by comma. Example:\u00a0\*.txt,\u00a0\*.html"=\
 Valid wildcards are ?\u00a0\(one arbitrary character\) and \*\u00a0\(any number of arbitrary characters\). Separate multiple patterns by comma. Example:\u00a0\*.txt,\u00a0\*.html
dlgScFileComparatorAdd.mni"File"=File
dlgScFileComparatorAdd.mni"Left Encoding"=Left Encoding
dlgScFileComparatorAdd.mni"Left File"=Left File
dlgScFileComparatorAdd.mni"Left Local File"=Left Local File
dlgScFileComparatorAdd.mni"Left Title"=Left Title
dlgScFileComparatorAdd.mni"Right Encoding"=Right Encoding
dlgScFileComparatorAdd.mni"Right File"=Right File
dlgScFileComparatorAdd.mni"Right Local File"=Right Local File
dlgScFileComparatorAdd.mni"Right Title"=Right Title
dlgScFileComparatorAdd.rbt"Built-in file compare"=Built-in file compare
dlgScFileComparatorAdd.rbt"External diff tool:"=External diff tool:
dlgScFileComparatorAdd.rbt"External viewer \(invoked for both compared files\):"=\
 External viewer \(invoked for both compared files\):
dlgScFileComparatorAdd.tle=Add
dlgScFileComparatorEdit.edt"Arguments"=Arguments
dlgScFileComparatorEdit.edt"Command"=Command
dlgScFileComparatorEdit.edt"File Pattern"=File Pattern
dlgScFileComparatorEdit.hdl=Edit external diff tool
dlgScFileComparatorEdit.inf"Define the file pattern \(e.g. \*.png\) and select the compare command which should be used to compare files matching the file pattern."=\
 Define the file pattern \(e.g. \*.png\) and select the compare command which should be used to compare files matching the file pattern.
dlgScFileComparatorEdit.lbl"Valid wildcards are ?\u00a0\(one arbitrary character\) and \*\u00a0\(any number of arbitrary characters\). Separate multiple patterns by comma. Example:\u00a0\*.txt,\u00a0\*.html"=\
 Valid wildcards are ?\u00a0\(one arbitrary character\) and \*\u00a0\(any number of arbitrary characters\). Separate multiple patterns by comma. Example:\u00a0\*.txt,\u00a0\*.html
dlgScFileComparatorEdit.rbt"Built-in file compare"=Built-in file compare
dlgScFileComparatorEdit.rbt"External diff tool:"=External diff tool:
dlgScFileComparatorEdit.rbt"External viewer \(invoked for both compared files\):"=\
 External viewer \(invoked for both compared files\):
dlgScFileComparatorEdit.tle=Edit
dlgScFileCompareFileChanged.btn"Discard"=Discard
dlgScFileCompareFileChanged.btn"Save"=Save
dlgScFileCompareFileChanged.fur=Your changes will be lost, if you don't save them.
dlgScFileCompareFileChanged.hdl=Do you want to save your changes?
dlgScFileCompareFileChanged.tle=File Changed
dlgScFilePatternsEdit.edt"File Pattern"=File Pattern
dlgScFilePatternsEdit.hdl=Language: C#
dlgScFilePatternsEdit.inf=File patterns are used to determine file language, which is used for syntax coloring.
dlgScFilePatternsEdit.lbl"Valid wildcards are ?\u00a0\(one arbitrary character\) and \*\u00a0\(any number of arbitrary characters\). Separate multiple patterns by comma. Example:\u00a0\*.txt,\u00a0\*.html"=\
 Valid wildcards are ?\u00a0\(one arbitrary character\) and \*\u00a0\(any number of arbitrary characters\). Separate multiple patterns by comma. Example:\u00a0\*.txt,\u00a0\*.html
dlgScFilePatternsEdit.tle=File Patterns
dlgScFindAction.edt"Action name"=Action name
dlgScFindAction.tle=Find Command
dlgScJiraCommitMessageSelect.btn"Refresh"=Refresh
dlgScJiraCommitMessageSelect.btn"Reset to default"=Reset to default
dlgScJiraCommitMessageSelect.btn"Select"=Select
dlgScJiraCommitMessageSelect.col"Fix Version"=Fix Version
dlgScJiraCommitMessageSelect.col"Key"=Key
dlgScJiraCommitMessageSelect.col"Status"=Status
dlgScJiraCommitMessageSelect.col"Summary"=Summary
dlgScJiraCommitMessageSelect.hdl=Select commit message by JIRA issue
dlgScJiraCommitMessageSelect.inf=The selected issue summary will be used as commit message.
dlgScJiraCommitMessageSelect.lbl"Enter the JQL-Queries which will be loaded in the specified order: every query on a new line, \$\{projects\} will be substituted by the JIRA project key\(s\) which is derived or explicitly specified in your .gitbugtraq file.\n\nYou can compose a JQL query directly in JIRA, using Issues\|Search and go to Advanced view there."=\
 Enter the JQL-Queries which will be loaded in the specified order: every query on a new line, \$\{projects\} will be substituted by the JIRA project key\(s\) which is derived or explicitly specified in your .gitbugtraq file.\n\nYou can compose a JQL query directly in JIRA, using Issues\|Search and go to Advanced view there.
dlgScJiraCommitMessageSelect.tle=Select Issue
dlgScJiraResolveIssue.btn"Don't Resolve"=Don't Resolve
dlgScJiraResolveIssue.btn"Resolve"=Resolve
dlgScJiraResolveIssue.edt"Resolution"=Resolution
dlgScJiraResolveIssue.edt"Summary"=Summary
dlgScJiraResolveIssue.hdl%1=Resolve issue $1
dlgScJiraResolveIssue.inf=Select whether to resolve this issue and for which version to mark as resolved.
dlgScJiraResolveIssue.tle=Resolve JIRA Issue
dlgScMasterPasswordChange.edt"Current Master Password"=Current Master Password
dlgScMasterPasswordChange.edt"New Master Password"=New Master Password
dlgScMasterPasswordChange.edt"Retype New Master Password"=Retype New Master Password
dlgScMasterPasswordChange.hdl=Change or reset the master password
dlgScMasterPasswordChange.inf=To change the master password, enter the current one. To go without a master password, leave the new field blank.
dlgScMasterPasswordChange.lbl"When setting a new master password, all stored passwords and passphrases will be lost and need to be re-entered when required!"=\
 When setting a new master password, all stored passwords and passphrases will be lost and need to be re-entered when required!
dlgScMasterPasswordChange.rbt"Change master password"=Change master password
dlgScMasterPasswordChange.rbt"Set new master password"=Set new master password
dlgScMasterPasswordChange.tle=Change Master Password
dlgScMasterPasswordCreate.edt"Master Password"=Master Password
dlgScMasterPasswordCreate.edt"Retype Again"=Retype Again
dlgScMasterPasswordCreate.hdl=Configure the master password for the encrypted password store
dlgScMasterPasswordCreate.inf=The master password is used to protect passwords and passphrases which are used to authenticate with servers.
dlgScMasterPasswordCreate.lbl"Not using a master password makes your passwords and passphrases readable for everyone who has access to the password file located at $1. Use this option only if you are sure that this file is safe."=\
 Not using a master password makes your passwords and passphrases readable for everyone who has access to the password file located at $1. Use this option only if you are sure that this file is safe.
dlgScMasterPasswordCreate.lbl"This master password is case-sensitive and should contain lowercase and uppercase characters, digits and other characters. Longer passwords are in general more secure than shorter ones."=\
 This master password is case-sensitive and should contain lowercase and uppercase characters, digits and other characters. Longer passwords are in general more secure than shorter ones.
dlgScMasterPasswordCreate.rbt"Don't use a master password"=Don't use a master password
dlgScMasterPasswordCreate.rbt"Use the following master password"=Use the following master password
dlgScMasterPasswordCreate.tle=Master Password
dlgScPropertiesReset.btn"Reset"=Reset
dlgScPropertiesReset.fur=The new values will be active after restarting SmartGit.
dlgScPropertiesReset.hdl%1=Do you want to reset $1 system properties to their defaults?
dlgScPropertiesReset.tle=Reset Properties
dlgScPropertyEdit.edt"Value"=Value
dlgScPropertyEdit.hdl=Edit low-level property value
dlgScPropertyEdit.inf%1=Set the value for property '$1'
dlgScPropertyEdit.rbt"false"=false
dlgScPropertyEdit.rbt"true"=true
dlgScPropertyEdit.tle=Edit Property
dlgScRegisterFormLicenseConfirmDetails.edt"Add-on"=Add-on
dlgScRegisterFormLicenseConfirmDetails.edt"Address"=Address
dlgScRegisterFormLicenseConfirmDetails.edt"Email"=Email
dlgScRegisterFormLicenseConfirmDetails.edt"Free Updates Until"=Free Updates Until
dlgScRegisterFormLicenseConfirmDetails.edt"Name"=Name
dlgScRegisterFormLicenseConfirmDetails.edt"Support Until"=Support Until
dlgScRegisterFormLicenseConfirmDetails.edt"User Count"=User Count
dlgScRegisterFormLicenseConfirmDetails.tle=SmartGit License
dlgScRegisterFreeUpdatesExpiredLicense.btn"Purchase Update"=Purchase Update
dlgScRegisterFreeUpdatesExpiredLicense.fur=You may use an older SmartGit version or purchase an update license.
dlgScRegisterFreeUpdatesExpiredLicense.hdl=The free update period for this license does not cover this version.
dlgScRegisterFreeUpdatesExpiredLicense.tle=SmartGit License
dlgScSetupLicense.btn"Configure Proxy"=Configure Proxy
dlgScSetupLicense.btn"Purchase Update"=Purchase Update
dlgScSetupLicense.btn"Register"=Register
dlgScSetupLicense.edt"License File"=License File
dlgScSetupLicense.hdl=Register license file
dlgScSetupLicense.inf=Please provide your SmartGit license file you've received by email after purchase.
dlgScSetupLicense.tle=SmartGit License
dlgScSpellCheckDictionaryAdd.hdl=Add spell checker dictionary
dlgScSpellCheckDictionaryAdd.tle=Add
dlgScSpellCheckDictionaryEdit.hdl=Edit spell checker dictionary
dlgScSpellCheckDictionaryEdit.tle=Edit
dlgScSpellCheckDictionary(Add|Edit).edt"Dictionary File"=Dictionary File
dlgScSpellCheckDictionary(Add|Edit).edt"Name"=Name
dlgScSpellCheckDictionary(Add|Edit).inf"Specify the MySpell dictionary file to use, e.g. \*.dic from Mozilla Firefox' or Thunderbird's \"dictionary\" directory\). The name is used when switching between different dictionaries."=\
 Specify the MySpell dictionary file to use, e.g. \*.dic from Mozilla Firefox' or Thunderbird's "dictionary" directory\). The name is used when switching between different dictionaries.
dlgScSslFingerprint.btn"Accept"=Accept
dlgScSslFingerprint.btn"Reject"=Reject
dlgScSslFingerprint.edt"SHA fingerprint"=SHA fingerprint
dlgScSslFingerprint.edt"Server"=Server
dlgScSslFingerprint.lbl"The server fingerprint has changed! Is the change correct?"=\
 The server fingerprint has changed! Is the change correct?
dlgScSslFingerprint.lbl"This might indicate a security problem! When in doubt, contact your server administrator."=\
 This might indicate a security problem! When in doubt, contact your server administrator.
dlgScSslFingerprint.tle=Server Fingerprint
dlgScTextFinderFindFromStart.btn"Find from Beginning"=Find from Beginning
dlgScTextFinderFindFromStart.fur=No occurrences have been found until the end of the document.
dlgScTextFinderFindFromStart.hdl=Do you want to continue from the beginning of the document?
dlgScTextFinderFindFromStart.tle=Find Text
dlgScTextFinderNothingFound.hdl=No \(more\) occurrences have been found.
dlgScTextFinderNothingFound.tle=Find Text
dlgScTextMultiComponentGoToLine.edt"Line Number"=Line Number
dlgScTextMultiComponentGoToLine.tle=Go to Line
dlgScTextMultiComponentSyntaxHighlightingSelection.tle=Select Syntax-Highlighting
dlgScTextReplace.btn"< Find"=< Find
dlgScTextReplace.btn"Find >"=Find >
dlgScTextReplace.btn"Replace"=Replace
dlgScTextReplace.chk"Case-sensitive"=Case-sensitive
dlgScTextReplace.chk"Regular Expression search"=Regular Expression search
dlgScTextReplace.chk"Replace With:"=Replace With:
dlgScTextReplace.edt"Text to Find"=Text to Find
dlgScTextReplace.tle=Find and Replace
dlgScTextSettings.chk"Coalesce nearby change blocks"=Coalesce nearby change blocks
dlgScTextSettings.chk"Split leading/trailing added or removed lines into separate blocks"=\
 Split leading/trailing added or removed lines into separate blocks
dlgScTextSettings.chk"Trim equal start/end of Inner-Line changes"=\
 Trim equal start/end of Inner-Line changes
dlgScTextSettings.edt"Inner-Line Comparison"=Inner-Line Comparison
dlgScTextSettings.edt"Show whitespaces"=Show whitespaces
dlgScTextSettings.edt"Tab Size"=Tab Size
dlgScTextSettings.rbt"All"=All
dlgScTextSettings.rbt"Alphanumeric words"=Alphanumeric words
dlgScTextSettings.rbt"C identifiers"=C identifiers
dlgScTextSettings.rbt"Character-based"=Character-based
dlgScTextSettings.rbt"Java identifiers"=Java identifiers
dlgScTextSettings.rbt"None"=None
dlgScTextSettings.rbt"Off"=Off
dlgScTextSettings.rbt"Trailing and changed"=Trailing and changed
dlgScTextSettings.tab"Compare"=Compare
dlgScTextSettings.tab"General"=General
dlgScTextSettings.tle=Settings
dlgScUpdateInstallationUpgrade.btn"Upgrade Now"=Upgrade Now
dlgScUpdateInstallationUpgrade.fur%1=The new version $1 has been downloaded which needs to be installed.
dlgScUpdateInstallationUpgrade.hdl=Do you want to upgrade SmartGit now?
dlgScUpdateInstallationUpgrade.tle=Upgrade SmartGit
dlgSgAbortBisectingConfirm.btn"Abort Bisect"=Abort Bisect
dlgSgAbortBisectingConfirm.fur=Your working tree is in 'bisecting' state. You may abort it to get out of this state.\n\nAborting will checkout the branch or commit before starting bisect.
dlgSgAbortBisectingConfirm.hdl=Do you want to reset your working tree?
dlgSgAbortBisectingConfirm.tle=Abort
dlgSgAbortCherryPickingConfirm.btn"Abort Cherry-Pick"=Abort Cherry-Pick
dlgSgAbortCherryPickingConfirm.fur=Your working tree is in 'cherry-picking' state. You may abort it to get out of this state and freshly start over with the cherry-picking afterwards.\n\nAborting will clean any local modification \(by invoking 'git reset --hard'\)!
dlgSgAbortCherryPickingConfirm.hdl=Do you want to reset your working tree?
dlgSgAbortCherryPickingConfirm.tle=Abort
dlgSgAbortMergingConfirm.btn"Abort Merge"=Abort Merge
dlgSgAbortMergingConfirm.fur=Your working tree is in 'merging' state. You may abort it to get out of this state and freshly start over with the merge afterwards.\n\nAborting will try to reconstruct the pre-merge state \(by invoking 'git merge --abort'\)!
dlgSgAbortMergingConfirm.hdl=Do you want to abort the current merge?
dlgSgAbortMergingConfirm.tle=Discard
dlgSgAbortRebasingConfirm.btn"Abort Rebase"=Abort Rebase
dlgSgAbortRebasingConfirm.fur=Your working tree is in 'rebasing' state. You may abort rebasing; if you just want to skip the current patch, use Branch \| Rebase \| Rebase HEAD To instead.\n\nAborting will clean any local modification \(by invoking 'git reset --hard'\)!
dlgSgAbortRebasingConfirm.hdl=Do you want to abort the rebasing?
dlgSgAbortRebasingConfirm.tle=Discard
dlgSgAbortRevertingConfirm.btn"Abort Revert"=Abort Revert
dlgSgAbortRevertingConfirm.fur=Your working tree is in 'reverting' state. You may abort it to get out of this state and freshly start over with the revert afterwards.\n\nAborting will clean any local modification \(by invoking 'git reset --hard'\)!
dlgSgAbortRevertingConfirm.hdl=Do you want to reset your working tree?
dlgSgAbortRevertingConfirm.tle=Discard
dlgSgAbout.btn"Register"=Register
dlgSgAbout.edt"Add-on"=Add-on
dlgSgAbout.edt"Address"=Address
dlgSgAbout.edt"Build Date"=Build Date
dlgSgAbout.edt"Email"=Email
dlgSgAbout.edt"Free Updates Until"=Free Updates Until
dlgSgAbout.edt"Java Version"=Java Version
dlgSgAbout.edt"Name"=Name
dlgSgAbout.edt"Settings Path"=Settings Path
dlgSgAbout.edt"Support Until"=Support Until
dlgSgAbout.edt"User Count"=User Count
dlgSgAbout.edt"Version"=Version
dlgSgAbout.tab"Credits"=Credits
dlgSgAbout.tab"Information"=Information
dlgSgAbout.tab"Licensee"=Licensee
dlgSgAbout.tle=About SmartGit
dlgSgAuthenticationRemoveAllCredentials.btn"Remove All"=Remove All
dlgSgAuthenticationRemoveAllCredentials.fur=You will have to re-enter all authentication details.
dlgSgAuthenticationRemoveAllCredentials.hdl=Are you sure to remove all known credentials?
dlgSgAuthenticationRemoveAllCredentials.tle=Remove All
dlgSgBisectStartConfirm.btn"Start Bisect with Bad HEAD"=Start Bisect with Bad HEAD
dlgSgBisectStartConfirm.btn"Start Bisect"=Start Bisect
dlgSgBisectStartConfirm.fur=You need to mark 1 commit as good and 1 commit as bad before Git can start the binary search.
dlgSgBisectStartConfirm.hdl=Should the bisect be started with a bad commit?
dlgSgBisectStartConfirm.tle=Start Bisect
dlgSgBitbucketGenerateToken.edt"Code"=Code
dlgSgBitbucketGenerateToken.edt"Link"=Link
dlgSgBitbucketGenerateToken.hdl=Enter the generated code
dlgSgBitbucketGenerateToken.inf=Authenticate at Bitbucket and enter the generated token
dlgSgBitbucketGenerateToken.lbl"Your browser should have opened automatically, let you authenticate with your preferred account at Bitbucket and grant access to SmartGit. If this didn't happen, manually open following link:"=\
 Your browser should have opened automatically, let you authenticate with your preferred account at Bitbucket and grant access to SmartGit. If this didn't happen, manually open following link:
dlgSgBitbucketGenerateToken.tle=Request Access Token
dlgSgBranchAddCheckout.btn"Add Branch && Checkout"=Add Branch && Checkout
dlgSgBranchAddCheckout.btn"Add Branch"=Add Branch
dlgSgBranchAddCheckout.edt"Branch"=Branch
dlgSgBranchAddCheckout.err"Choose a different branch, the current branch can't be used."=\
 Choose a different branch, the current branch can't be used.
dlgSgBranchAddCheckout.err"Enter the name of the local branch."=\
 Enter the name of the local branch.
dlgSgBranchAddCheckout.err"The name must not end with a slash or dot."=\
 The name must not end with a slash or dot.
dlgSgBranchAddCheckout.hdl"Add branch at commit $1"=Add branch at commit $1
dlgSgBranchAddCheckout.hdl"Add branch at current HEAD commit"=\
 Add branch at current HEAD commit
dlgSgBranchAddCheckout.inf=Enter the name of the local branch to create.
dlgSgBranchAddCheckout.tle=Add Branch
dlgSgBranchAddCheckoutOverwriteExisting.btn"Overwrite"=Overwrite
dlgSgBranchAddCheckoutOverwriteExisting.fur=Click 'Cancel' to choose a different branch name.
dlgSgBranchAddCheckoutOverwriteExisting.hdl%1=The branch '$1' already exists. Do you want to overwrite it?
dlgSgBranchAddCheckoutOverwriteExisting.tle=Add Branch
dlgSgBranchDeleteCurrentNotPossible.fur=By default, SmartGit disallows to delete the current branch. To skip this restriction, set low-level property 'branch.delete.allowToDeleteCurrentBranch'.
dlgSgBranchDeleteCurrentNotPossible.hdl=You can't delete the current branch.
dlgSgBranchDeleteCurrentNotPossible.tle=Delete
dlgSgBranchDeleteLocalConfirmMultiple.btn"Delete"=Delete
dlgSgBranchDeleteLocalConfirmMultiple.chk"Delete from remote repository"=Delete from remote repository
dlgSgBranchDeleteLocalConfirmMultiple.chk"Delete tracked branches"=Delete tracked branches
dlgSgBranchDeleteLocalConfirmMultiple.fur=It might be complicated to restore deleted branches.\n\nYou may only delete a branch from your local list of remote branches, but this may bring back the branch with the next fetch.
dlgSgBranchDeleteLocalConfirmMultiple.hdl%1=Are you sure to delete $1 local branches?
dlgSgBranchDeleteLocalConfirmMultiple.tle=Delete
dlgSgBranchDeleteLocalConfirmSingle.btn"Delete"=Delete
dlgSgBranchDeleteLocalConfirmSingle.chk"Delete from remote repository '$1'"=Delete from remote repository '$1'
dlgSgBranchDeleteLocalConfirmSingle.chk"Delete tracked branch '$1'"=Delete tracked branch '$1'
dlgSgBranchDeleteLocalConfirmSingle.fur=You may lose unpushed changes or it might be complicated to restore the branch\(es\)!
dlgSgBranchDeleteLocalConfirmSingle.hdl%1=Are you sure to delete the local branch '$1'?
dlgSgBranchDeleteLocalConfirmSingle.tle=Delete
dlgSgBranchDeleteRemoteConfirmSingle.btn"Delete"=Delete
dlgSgBranchDeleteRemoteConfirmSingle.chk%1=Delete from remote '$1'
dlgSgBranchDeleteRemoteConfirmSingle.fur=You may only delete a branch from your local list of remote branches, but this may bring back the branch with the next fetch.
dlgSgBranchDeleteRemoteConfirmSingle.hdl%1=Do you want to delete the remote branch '$1'?
dlgSgBranchDeleteRemoteConfirmSingle.tle=Delete
dlgSgBranchTrackingSetConfirm.btn"Configure"=Configure
dlgSgBranchTrackingSetConfirm.fur=The necessary configuration will be performed in the .git/config file.
dlgSgBranchTrackingSetConfirm.hdl%2=Do you want to configure '$1' to track '$2'?
dlgSgBranchTrackingSetConfirm.tle=Set Tracked Branch
dlgSgBugReportSettings.btn"Exit"=Exit
dlgSgBugReportSettings.chk"Automatically send 'crash footprints' after an internal error has occurred"=\
 Automatically send 'crash footprints' after an internal error has occurred
dlgSgBugReportSettings.err"Sending 'crash footprints' is required for preview builds, because their main purposes is to get as much as possible bugs reported and fixed before release."=\
 Sending 'crash footprints' is required for preview builds, because their main purposes is to get as much as possible bugs reported and fixed before release.
dlgSgBugReportSettings.hdl=Crash Reporting
dlgSgBugReportSettings.inf=Please help to improve SmartGit's quality by automatically sending 'crash footprints' which do not contain any sensitive information. You can change this option later in the preferences.
dlgSgBugReportSettings.lbl"A 'crash footprint' contains details about your machine \(e.g. version of operating system\), SmartGit's version/build number, the JVM state and where the internal error occurred.\n\nIt contains NO POTENTIALLY SENSITIVE INFORMATION like user names, email addresses, file contents, file paths or server names."=\
 A 'crash footprint' contains details about your machine \(e.g. version of operating system\), SmartGit's version/build number, the JVM state and where the internal error occurred.\n\nIt contains NO POTENTIALLY SENSITIVE INFORMATION like user names, email addresses, file contents, file paths or server names.
dlgSgBugReportSettings.tle=SmartGit
dlgSgCheckoutFastForwardMerge.btn"Fast-Forward-Merge"=Fast-Forward-Merge
dlgSgCheckoutFastForwardMerge.btn"Just Checkout"=Just Checkout
dlgSgCheckoutFastForwardMerge.fur=Fast-forward-merging automatically moves the branch forward to the tracked remote branch.
dlgSgCheckoutFastForwardMerge.hdl%1=Do you want to fast-forward-merge remote changes after checking out '$1'?
dlgSgCheckoutFastForwardMerge.tle=Check Out
dlgSgCheckoutLocalBranchConfirm.btn"Checkout"=Checkout
dlgSgCheckoutLocalBranchConfirm.chk=Don't show again
dlgSgCheckoutLocalBranchConfirm.fur%1=This will make '$1' your current branch.
dlgSgCheckoutLocalBranchConfirm.hdl%1=Do you want to checkout the branch '$1'?
dlgSgCheckoutLocalBranchConfirm.tle=Check Out
dlgSgCheckoutTarget.btn"Checkout"=Checkout
dlgSgCheckoutTarget.chk"Track remote branch '$1'"=Track remote branch '$1'
dlgSgCheckoutTarget.chk"Track remote branch:"=Track remote branch:
dlgSgCheckoutTarget.hdl"Check out commit"=Check out commit
dlgSgCheckoutTarget.hdl"Check out remote branch"=Check out remote branch
dlgSgCheckoutTarget.hdl"Checkout commit"=Checkout commit
dlgSgCheckoutTarget.hdl"Checkout remote branch"=Checkout remote branch
dlgSgCheckoutTarget.inf=Be careful when checking out a commit instead of a local branch: commits on top of a commit can get lost easily.
dlgSgCheckoutTarget.rbt"Checkout local branch:"=Checkout local branch:
dlgSgCheckoutTarget.rbt"Create local branch:"=Create local branch:
dlgSgCheckoutTarget.rbt"Don't create local branch \(just work read-only\)"=\
 Don't create local branch \(just work read-only\)
dlgSgCheckoutTarget.tle=Check Out
dlgSgCheckoutTarget.wrn"Local branch '$1' is behind checkout target '$2'."=\
 Local branch '$1' is behind checkout target '$2'.
dlgSgCheckoutTarget.wrn"Local branch '$1' is diverged from checkout target '$2'."=\
 Local branch '$1' is diverged from checkout target '$2'.
dlgSgCheckoutTargetAlreadyExistsOverwrite.btn"Overwrite"=Overwrite
dlgSgCheckoutTargetAlreadyExistsOverwrite.fur=Click 'Cancel' to choose a different branch name.
dlgSgCheckoutTargetAlreadyExistsOverwrite.hdl%1=The branch '$1' already exists. Do you want to overwrite it?
dlgSgCheckoutTargetAlreadyExistsOverwrite.tle=Check Out
dlgSgCherryPickConfirmation.btn"Cherry-Pick && Commit"=Cherry-Pick && Commit
dlgSgCherryPickConfirmation.btn"Cherry-Pick"=Cherry-Pick
dlgSgCherryPickConfirmation.chk=Append source SHA to commit message
dlgSgCherryPickConfirmation.fur=This will cherry-pick the selected commit into the Working Tree.
dlgSgCherryPickConfirmation.hdl=Do you want to cherry-pick?
dlgSgCherryPickConfirmation.tle=Cherry-Pick
dlgSgCherryPickFailedBecauseOfConflicts.chk=Don't show again
dlgSgCherryPickFailedBecauseOfConflicts.fur=You may need to resolve the conflicts before proceeding.
dlgSgCherryPickFailedBecauseOfConflicts.hdl=Cherry-picking failed because of conflicts.
dlgSgCherryPickFailedBecauseOfConflicts.tle=Cherry Pick
dlgSgCherryPickUnpushedCommits.btn"Cherry-Pick"=Cherry-Pick
dlgSgCherryPickUnpushedCommits.fur=At least one of the selected commits has not been pushed yet, hence cherry-pick is only local and won't be translated to SVN \(mergeinfo\).
dlgSgCherryPickUnpushedCommits.hdl=Do you want to cherry-pick unpushed commits?
dlgSgCherryPickUnpushedCommits.tle=Cherry-Pick
dlgSgClean.btn"Clean Working Tree"=Clean Working Tree
dlgSgClean.chk"Remove only ignored files"=Remove only ignored files
dlgSgClean.chk"Remove untracked directories"=Remove untracked directories
dlgSgClean.hdl=Remove untracked files
dlgSgClean.inf=Select which untracked files should be removed.
dlgSgClean.tle=Clean Working Tree
dlgSgClone.btn"< Back"=< Back
dlgSgClone.btn"Finish"=Finish
dlgSgClone.btn"Next >"=Next >
dlgSgClone.chk"Create upstream remote"=Create upstream remote
dlgSgClone.chk"Fetch all Heads and Tags"=Fetch all Heads and Tags
dlgSgClone.chk"Fetch all commits"=Fetch all commits
dlgSgClone.chk"Include Submodules"=Include Submodules
dlgSgClone.chk"Just initialize clone \(expert mode, not officially supported!\)"=\
 Just initialize clone \(expert mode, not officially supported!\)
dlgSgClone.chk"Map SVN trunk, tags and branches to Git"=\
 Map SVN trunk, tags and branches to Git
dlgSgClone.edt"Check Out Branch"=Check Out Branch
dlgSgClone.edt"Fetch Only the Latest"=Fetch Only the Latest
dlgSgClone.edt"Fetch Only"=Fetch Only
dlgSgClone.edt"Local Directory"=Local Directory
dlgSgClone.edt"Path"=Path
dlgSgClone.edt"Repository URL"=Repository URL
dlgSgClone.err"Please select an empty, local directory for the new repository."=\
 Please select an empty, local directory for the new repository.
dlgSgClone.err"Please specify the URL of the remote repository to be cloned."=\
 Please specify the URL of the remote repository to be cloned.
dlgSgClone.err"Please specify the root directory of a local repository."=\
 Please specify the root directory of a local repository.
dlgSgClone.inf"Customize how and what to clone."=\
 Customize how and what to clone.
dlgSgClone.inf"Specify the Git or SVN repository to clone."=\
 Specify the Git or SVN repository to clone.
dlgSgClone.inf"Specify the Git, Mercurial or SVN repository to clone."=\
 Specify the Git, Mercurial or SVN repository to clone.
dlgSgClone.inf"Specify the local directory for the new repository."=\
 Specify the local directory for the new repository.
dlgSgClone.mni"Add Hosting Provider"=Add Hosting Provider
dlgSgClone.rbt"Clone all revisions \(recommended\)"=Clone all revisions \(recommended\)
dlgSgClone.rbt"Clone from revision:"=Clone from revision:
dlgSgClone.rbt"Local Git or Mercurial repository"=Local Git or Mercurial repository
dlgSgClone.rbt"Local Git repository"=Local Git repository
dlgSgClone.rbt"Remote Git or SVN repository"=Remote Git or SVN repository
dlgSgClone.rbt"Remote Git, Mercurial or SVN repository"=\
 Remote Git, Mercurial or SVN repository
dlgSgClone.tle=Clone
dlgSgCloneRepositoryType.btn"Git"=Git
dlgSgCloneRepositoryType.btn"Mercurial"=Mercurial
dlgSgCloneRepositoryType.btn"SVN"=SVN
dlgSgCloneRepositoryType.fur=The specified URL protocol is ambiguous and may refer to different types of repositories.
dlgSgCloneRepositoryType.hdl=Select the type of repository you are going to clone.
dlgSgCloneRepositoryType.tle=Clone
dlgSgCloneSvnDetachedHeadSuccess.fur=SmartGit now continues to fetch all other revisions in the background. You may safely start working with the repository now; only log-related operations will be affected by this intermediate state.\n\nOnce SmartGit has finished the background part of the clone, it will let you know in the notifications area \(status bar\) and you can complete the clone there.
dlgSgCloneSvnDetachedHeadSuccess.hdl=HEAD revision has been successfully cloned.
dlgSgCloneSvnDetachedHeadSuccess.tle=Clone
dlgSgCommit.btn"Commit && Push"=Commit && Push
dlgSgCommit.btn"Commit"=Commit
dlgSgCommit.btn"Select from Log"=Select from Log
dlgSgCommit.btn"Select"=Select
dlgSgCommit.chk"Add 'Signed-off-by' signature"=Add 'Signed-off-by' signature
dlgSgCommit.chk"Amend last commit instead of creating new one"=\
 Amend last commit instead of creating new one
dlgSgCommit.chk"Bypass commit hook"=Bypass commit hook
dlgSgCommit.col"Directory"=Directory
dlgSgCommit.col"Name"=Name
dlgSgCommit.edt"Commit Message"=Commit Message
dlgSgCommit.edt"Create"=Create
dlgSgCommit.err"Enter a commit message describing \(the reason for\) the commit."=\
 Enter a commit message describing \(the reason for\) the commit.
dlgSgCommit.hdl=Commit local or staged changes
dlgSgCommit.inf=Select the files you want to commit and provide a commit message.
dlgSgCommit.mni"Deselect All"=Deselect All
dlgSgCommit.mni"JIRA"=JIRA
dlgSgCommit.mni"Log"=Log
dlgSgCommit.mni"Select All"=Select All
dlgSgCommit.mni"Select from Log"=Select from Log
dlgSgCommit.mni"Show Changes"=Show Changes
dlgSgCommit.mni"Toggle"=Toggle
dlgSgCommit.rbt"Local Changes"=Local Changes
dlgSgCommit.rbt"Merge commit \(multiple parents\)"=Merge commit \(multiple parents\)
dlgSgCommit.rbt"Simple commit \(one parent, \"squash\"\)"=Simple commit \(one parent, "squash"\)
dlgSgCommit.rbt"Staged Changes"=Staged Changes
dlgSgCommit.tle=Commit
dlgSgCommit.wrn"All staged changes have been selected for commit, as this is necessary in 'Reverting' state."=\
 All staged changes have been selected for commit, as this is necessary in 'Reverting' state.
dlgSgCommit.wrn"When modifying or splitting a commit, you first need to commit all local changes before being able to continue the rebase."=\
 When modifying or splitting a commit, you first need to commit all local changes before being able to continue the rebase.
dlgSgCommitAmendAlreadyPushedCommit.btn"Amend"=Amend
dlgSgCommitAmendAlreadyPushedCommit.fur=If you amend a pushed commit, you will need to force-push it later. This might overwrite other users' changes.
dlgSgCommitAmendAlreadyPushedCommit.hdl=Are you sure to amend an already pushed commit?
dlgSgCommitAmendAlreadyPushedCommit.tle=Commit
dlgSgCommitContinueRebaseOrCreateAdditionalCommit.btn"Continue Rebase"=Continue Rebase
dlgSgCommitContinueRebaseOrCreateAdditionalCommit.btn"Create Commit"=Create Commit
dlgSgCommitContinueRebaseOrCreateAdditionalCommit.fur=The repository is in 'rebasing' state. Instead of creating an additional commit as part of your rebased commits, you will usually just want continue the rebase.
dlgSgCommitContinueRebaseOrCreateAdditionalCommit.hdl=Do you want to continue the rebase or create an additional commit?
dlgSgCommitContinueRebaseOrCreateAdditionalCommit.tle=Rebase
dlgSgCommitIndexAllWorkingTreeChanges.btn"Commit All Working Tree Changes"=Commit All Working Tree Changes
dlgSgCommitIndexAllWorkingTreeChanges.chk=Don't show again
dlgSgCommitIndexAllWorkingTreeChanges.fur=No file is staged yet. To stage individual changes, click Cancel. Otherwise all working tree changes will get staged and committed.
dlgSgCommitIndexAllWorkingTreeChanges.hdl=Do you want to commit all working tree changes?
dlgSgCommitIndexAllWorkingTreeChanges.tle=Commit
dlgSgCommitIndexNoFilesFound.fur=Neither staged files nor locally changed files were found.
dlgSgCommitIndexNoFilesFound.hdl=There is nothing to commit.
dlgSgCommitIndexNoFilesFound.tle=Commit
dlgSgCommitNoFilesFoundNotAllowEmpty.fur=Neither staged files nor locally changed files were found.
dlgSgCommitNoFilesFoundNotAllowEmpty.hdl=There is nothing to commit.
dlgSgCommitNoFilesFoundNotAllowEmpty.tle=Commit
dlgSgCommitSelectMessageFromLog.btn"Branches"=Branches
dlgSgCommitSelectMessageFromLog.btn"Select"=Select
dlgSgCommitSelectMessageFromLog.chk"Add 'fixup!' prefix for easier automatic squashing using Interactive Rebase"=\
 Add 'fixup!' prefix for easier automatic squashing using Interactive Rebase
dlgSgCommitSelectMessageFromLog.hdl=Select a commit
dlgSgCommitSelectMessageFromLog.inf=Choose the commit whose message should be used.
dlgSgCommitSelectMessageFromLog.mni"Author"=Author
dlgSgCommitSelectMessageFromLog.mni"Branches and Tags"=Branches and Tags
dlgSgCommitSelectMessageFromLog.mni"Committer"=Committer
dlgSgCommitSelectMessageFromLog.mni"Copy ID"=Copy ID
dlgSgCommitSelectMessageFromLog.mni"Copy Message"=Copy Message
dlgSgCommitSelectMessageFromLog.mni"File Content \(very expensive\)"=File Content \(very expensive\)
dlgSgCommitSelectMessageFromLog.mni"File \(expensive\)"=File \(expensive\)
dlgSgCommitSelectMessageFromLog.mni"Forget Pattern"=Forget Pattern
dlgSgCommitSelectMessageFromLog.mni"ID"=ID
dlgSgCommitSelectMessageFromLog.mni"Message"=Message
dlgSgCommitSelectMessageFromLog.mni"Refresh"=Refresh
dlgSgCommitSelectMessageFromLog.mni"Regular Expressions"=Regular Expressions
dlgSgCommitSelectMessageFromLog.mni"Remember Pattern"=Remember Pattern
dlgSgCommitSelectMessageFromLog.tle=Select Commit Message
dlgSgCommitToDetachedHead.btn"Commit Anyway"=Commit Anyway
dlgSgCommitToDetachedHead.fur=The repository HEAD currently does not point to branch, but directly refers to a commit \(SHA\). When committing, the newly created commit will only be reachable by its SHA and hence may get lost easily.\n\nInstead of committing now, you should first create a branch for your current HEAD and commit afterwards.
dlgSgCommitToDetachedHead.hdl=Do you want to commit to a detached HEAD?
dlgSgCommitToDetachedHead.tle=Commit
dlgSgCompareTwoFiles.btn"Compare with Each Other"=Compare with Each Other
dlgSgCompareTwoFiles.btn"Compare with Repository"=Compare with Repository
dlgSgCompareTwoFiles.fur=The files can be compared to their repository content or to each other.
dlgSgCompareTwoFiles.hdl=Should the selected two files be compared with each other?
dlgSgCompareTwoFiles.tle=Compare
dlgSgConflictSolverStageForCommit.btn"Don't Stage"=Don't Stage
dlgSgConflictSolverStageForCommit.btn"Stage"=Stage
dlgSgConflictSolverStageForCommit.fur=Staging is necessary to resolve the file's conflict status.
dlgSgConflictSolverStageForCommit.hdl=Do you want to stage the file for commit now?
dlgSgConflictSolverStageForCommit.tle=Stage for Commit
dlgSgCustomizeProjectUi.btn"Add"=Add
dlgSgCustomizeProjectUi.btn"Assign"=Assign
dlgSgCustomizeProjectUi.btn"Clear"=Clear
dlgSgCustomizeProjectUi.btn"Remove"=Remove
dlgSgCustomizeProjectUi.btn"Reset"=Reset
dlgSgCustomizeProjectUi.chk"Show text below icon"=Show text below icon
dlgSgCustomizeProjectUi.col"Accelerator"=Accelerator
dlgSgCustomizeProjectUi.col"Available"=Available
dlgSgCustomizeProjectUi.col"Default"=Default
dlgSgCustomizeProjectUi.col"Menu Item"=Menu Item
dlgSgCustomizeProjectUi.col"Selected"=Selected
dlgSgCustomizeProjectUi.edt"Accelerator"=Accelerator
dlgSgCustomizeProjectUi.mni"Regular Expressions"=Regular Expressions
dlgSgCustomizeProjectUi.tab"Accelerators"=Accelerators
dlgSgCustomizeProjectUi.tab"Toolbar"=Toolbar
dlgSgCustomizeProjectUi.tle=Customize
dlgSgDeleteFileTrash.hdl%1=Are you sure to delete '$1'?
dlgSgDeleteFilesTrash.hdl%1=Are you sure to delete the $1 selected files?
dlg(SgDeleteFileTrash|SgDeleteFilesTrash).btn"Delete"=Delete
dlg(SgDeleteFileTrash|SgDeleteFilesTrash).btn"Move to Trash"=Move to Trash
dlg(SgDeleteFileTrash|SgDeleteFilesTrash).fur=If you click Delete you may require file recovery tools to restore the deleted files!
dlg(SgDeleteFileTrash|SgDeleteFilesTrash).tle=Delete
dlgSgDiscard.btn"Discard"=Discard
dlgSgDiscard.col"Directory"=Directory
dlgSgDiscard.col"Name"=Name
dlgSgDiscard.edt"Revert to"=Revert to
dlgSgDiscard.hdl=Discard local or staged changes
dlgSgDiscard.inf=Select the files for which changes should be discarded and whether to set them back to Index or HEAD state.
dlgSgDiscard.rbt"HEAD"=HEAD
dlgSgDiscard.rbt"Index"=Index
dlgSgDiscard.tle=Discard
dlgSgDiscardNoFilesFound.fur=Neither staged files nor locally changed files were found.
dlgSgDiscardNoFilesFound.hdl=There is nothing to discard.
dlgSgDiscardNoFilesFound.tle=Discard
dlgSgDiscardRevertToHead.hdl%1=Are you sure to reset $1 files back to their HEAD state?
dlgSgDiscardRevertToIndex.hdl%1=Are you sure to reset $1 files back to their Index state?
dlgSgDiscardRevertTo(Head|Index).btn"Discard"=Discard
dlgSgDiscardRevertTo(Head|Index).fur=The content might be hard to restore!
dlgSgDiscardRevertTo(Head|Index).tle=Discard
dlgSgErrorUtilsClientException.fur"Repository '$1' is not valid."=Repository '$1' is not valid.
dlgSgErrorUtilsClientException.fur"svn: $1"=svn: $1
dlgSgErrorUtilsClientException.hdl=Executing a command has failed.
dlgSgErrorUtilsClientException.tle=Command Failed
dlgSgExitConfirmation.btn"Exit Now"=Exit Now
dlgSgExitConfirmation.chk=Don't show again
dlgSgExitConfirmation.fur=By closing the last window you will exit SmartGit.
dlgSgExitConfirmation.hdl=Do you want to exit SmartGit now?
dlgSgExitConfirmation.tle=Exit
dlgSgFileCompareNoChanges.btn"Open"=Open
dlgSgFileCompareNoChanges.chk=Don't show again
dlgSgFileCompareNoChanges.fur=Both file contents are byte-wise equal.\nTo see the file contents anyway, click 'Open'.
dlgSgFileCompareNoChanges.hdl=Open the file compare though no changes will be shown?
dlgSgFileCompareNoChanges.tle=File Compare
dlgSgFindObject.edt"Repository Path, Commit ID or Ref"=\
 Repository Path, Commit ID or Ref
dlgSgFindObject.tle=Find Object
dlgSgFlowBranchDivergedHandlerFastForward.btn"Fast-Forward"=Fast-Forward
dlgSgFlowBranchDivergedHandlerFastForward.fur%3=The local branch '$1' is behind its tracked branch '$2'. You may fast-forward now or do it manually later, e.g. by checking out the branch '$3'.
dlgSgFlowBranchDivergedHandlerFastForward.hdl%2=Should branch '$1' be fast-forwarded to '$2'?
dlgSgFlowBranchDivergedHandlerFastForward.tle=Start Feature
dlgSgFlowBranchDivergedHandlerReplaceRemote.btn"Replace"=Replace
dlgSgFlowBranchDivergedHandlerReplaceRemote.fur%2=The local branch '$1' seems to contain more recent but rewritten commits of remote branch '$2'.\n\nIf you are not sure whether the local branch is actually more recent than the remote branch, you should better cancel this operation and investigate local and remote changes in more detail.
dlgSgFlowBranchDivergedHandlerReplaceRemote.hdl%2=Should branch '$1' replace remote branch '$2'?
dlgSgFlowBranchDivergedHandlerReplaceRemote.tle=Finish Feature
dlgSgFlowBranchDivergedHandlerResetToRemote.btn"Reset"=Reset
dlgSgFlowBranchDivergedHandlerResetToRemote.fur%2=The remote branch '$1' seems to contain more recent but rewritten commits of local branch '$2'.\n\nIf you are not sure whether the remote branch is actually more recent than the local branch, you should better cancel this operation and investigate local and remote changes in more detail.
dlgSgFlowBranchDivergedHandlerResetToRemote.hdl%2=Should branch '$1' be reset to remote branch '$2'?
dlgSgFlowBranchDivergedHandlerResetToRemote.tle=Finish Feature
dlgSgFlowConfigure.btn"Reset to Defaults"=Reset to Defaults
dlgSgFlowConfigure.edt"Develop Branch"=Develop Branch
dlgSgFlowConfigure.edt"Feature Branches"=Feature Branches
dlgSgFlowConfigure.edt"Git-Flow Type"=Git-Flow Type
dlgSgFlowConfigure.edt"Hot-Fix Branches"=Hot-Fix Branches
dlgSgFlowConfigure.edt"Main Development Branch"=Main Development Branch
dlgSgFlowConfigure.edt"Master Branch"=Master Branch
dlgSgFlowConfigure.edt"Prefix for Feature Branches"=Prefix for Feature Branches
dlgSgFlowConfigure.edt"Release Branches"=Release Branches
dlgSgFlowConfigure.edt"Remote"=Remote
dlgSgFlowConfigure.edt"Support Branches"=Support Branches
dlgSgFlowConfigure.edt"Version Tags"=Version Tags
dlgSgFlowConfigure.hdl=Configure the branch naming scheme
dlgSgFlowConfigure.inf=Configure how your feature, release and hotfix branches should be named.
dlgSgFlowConfigure.rbt"Full \(feature, release, hotfix, support branches\)"=\
 Full \(feature, release, hotfix, support branches\)
dlgSgFlowConfigure.rbt"Light \(just feature branches\)"=Light \(just feature branches\)
dlgSgFlowConfigure.tle=Configure Git-Flow
dlgSgFlowConfigureChangeOrSwitchOff.btn"Change Configuration"=Change Configuration
dlgSgFlowConfigureChangeOrSwitchOff.btn"Switch-Off Git-Flow"=Switch-Off Git-Flow
dlgSgFlowConfigureChangeOrSwitchOff.fur=Git-Flow is already configured for this repository. You may change the Git-Flow configuration or switch-off the Git-Flow features. In both cases, the file ~/.git/config will be modified accordingly.
dlgSgFlowConfigureChangeOrSwitchOff.hdl=Do you want to change or switch-off the Git-Flow configuration?
dlgSgFlowConfigureChangeOrSwitchOff.tle=Configure Git-Flow
dlgSgFlowFeatureFinish.btn"Finish"=Finish
dlgSgFlowFeatureFinish.btn"Select from Log"=Select from Log
dlgSgFlowFeatureFinish.btn"Select"=Select
dlgSgFlowFeatureFinish.chk"Delete feature branch"=Delete feature branch
dlgSgFlowFeatureFinish.chk"Fetch latest commits and remove remote feature branch"=\
 Fetch latest commits and remove remote feature branch
dlgSgFlowFeatureFinish.edt"Commit Message"=Commit Message
dlgSgFlowFeatureFinish.hdl=Finish current feature
dlgSgFlowFeatureFinish.inf"Choose how to finish the current feature. This operation will integrate the feature into the '$1' branch."=\
 Choose how to finish the current feature. This operation will integrate the feature into the '$1' branch.
dlgSgFlowFeatureFinish.inf"Choose how to finish the feature branch '$1'. This operation will integrate the feature into the '$2' branch."=\
 Choose how to finish the feature branch '$1'. This operation will integrate the feature into the '$2' branch.
dlgSgFlowFeatureFinish.mni"JIRA"=JIRA
dlgSgFlowFeatureFinish.mni"Log"=Log
dlgSgFlowFeatureFinish.rbt"Create merge commit"=Create merge commit
dlgSgFlowFeatureFinish.rbt"Create simple commit \(squash\)"=Create simple commit \(squash\)
dlgSgFlowFeatureFinish.rbt"Rebase onto '$1'"=Rebase onto '$1'
dlgSgFlowFeatureFinish.tle=Finish Feature
dlgSgFlowFeatureStart.btn"Start"=Start
dlgSgFlowFeatureStart.edt"Base"=Base
dlgSgFlowFeatureStart.edt"Feature Name"=Feature Name
dlgSgFlowFeatureStart.err"A feature with this name already exists. Choose a different name."=\
 A feature with this name already exists. Choose a different name.
dlgSgFlowFeatureStart.err"Invalid feature name: The name must not end with a slash or dot."=\
 Invalid feature name: The name must not end with a slash or dot.
dlgSgFlowFeatureStart.hdl=Start a new feature
dlgSgFlowFeatureStart.inf%1=Enter the name of the new feature branch. This operation will fork a new branch from the '$1' branch.
dlgSgFlowFeatureStart.lbl"Resulting Branch: $1"=Resulting Branch: $1
dlgSgFlowFeatureStart.tle=Start Feature
dlgSgFlowHotfixFinish.btn"Finish"=Finish
dlgSgFlowHotfixFinish.btn"Select from Log"=Select from Log
dlgSgFlowHotfixFinish.chk"Create version tag"=Create version tag
dlgSgFlowHotfixFinish.chk"Create version tag:"=Create version tag:
dlgSgFlowHotfixFinish.chk"Delete hotfix branch"=Delete hotfix branch
dlgSgFlowHotfixFinish.chk"Fetch latest '$1' commits"=Fetch latest '$1' commits
dlgSgFlowHotfixFinish.chk"Merge to develop"=Merge to develop
dlgSgFlowHotfixFinish.chk"Push results and remove remote hotfix branch"=\
 Push results and remove remote hotfix branch
dlgSgFlowHotfixFinish.edt"Commit Message"=Commit Message
dlgSgFlowHotfixFinish.hdl=Finish a hotfix
dlgSgFlowHotfixFinish.inf"Choose how to finish the current hotfix. This operation will merge the hotfix into the '$1' and '$2' branches."=\
 Choose how to finish the current hotfix. This operation will merge the hotfix into the '$1' and '$2' branches.
dlgSgFlowHotfixFinish.inf"Choose how to finish the hotfix branch '$1'. This operation will merge the hotfix into the '$2' and '$3' branches."=\
 Choose how to finish the hotfix branch '$1'. This operation will merge the hotfix into the '$2' and '$3' branches.
dlgSgFlowHotfixFinish.inf"Choose how to finish the hotfix branch '$1'."=\
 Choose how to finish the hotfix branch '$1'.
dlgSgFlowHotfixFinish.tle=Finish Hotfix
dlgSgFlowHotfixStart.btn"Start"=Start
dlgSgFlowHotfixStart.chk"Fetch from '$1' branch"=Fetch from '$1' branch
dlgSgFlowHotfixStart.chk"Fetch from base branch"=Fetch from base branch
dlgSgFlowHotfixStart.edt"Base"=Base
dlgSgFlowHotfixStart.edt"Hotfix Name"=Hotfix Name
dlgSgFlowHotfixStart.hdl=Start a new hotfix
dlgSgFlowHotfixStart.inf%1=Enter the name of the new hotfix branch. This operation will fork a new branch from the '$1' branch.
dlgSgFlowHotfixStart.lbl"Resulting Branch: $1"=Resulting Branch: $1
dlgSgFlowHotfixStart.tle=Start Hotfix
dlgSgFlowIntegrateDevelop.btn"Integrate"=Integrate
dlgSgFlowIntegrateDevelop.chk"Fetch latest '$1' commits from remote repository"=\
 Fetch latest '$1' commits from remote repository
dlgSgFlowIntegrateDevelop.hdl%1=Integrate commits from '$1'
dlgSgFlowIntegrateDevelop.inf"Merge or rebase commits from the main development line to the current feature."=\
 Merge or rebase commits from the main development line to the current feature.
dlgSgFlowIntegrateDevelop.inf"Merge or rebase commits from the main development line to the feature branch '$1'."=\
 Merge or rebase commits from the main development line to the feature branch '$1'.
dlgSgFlowIntegrateDevelop.rbt"Merge from '$1'"=Merge from '$1'
dlgSgFlowIntegrateDevelop.rbt"Rebase current feature onto '$1'"=Rebase current feature onto '$1'
dlgSgFlowIntegrateDevelop.tle=Integrate Develop
dlgSgFlowReleaseFinish.btn"Finish"=Finish
dlgSgFlowReleaseFinish.btn"Select from Log"=Select from Log
dlgSgFlowReleaseFinish.chk"Create version tag"=Create version tag
dlgSgFlowReleaseFinish.chk"Create version tag:"=Create version tag:
dlgSgFlowReleaseFinish.chk"Delete release branch"=Delete release branch
dlgSgFlowReleaseFinish.chk"Fetch latest '$1' and '$2' commits"=\
 Fetch latest '$1' and '$2' commits
dlgSgFlowReleaseFinish.chk"Push results and remove remote release branch"=\
 Push results and remove remote release branch
dlgSgFlowReleaseFinish.edt"Commit Message"=Commit Message
dlgSgFlowReleaseFinish.hdl=Finish a release
dlgSgFlowReleaseFinish.inf"Choose how to finish the release branch '$1'. This operation will merge the current release into the '$2' and '$3' branches."=\
 Choose how to finish the release branch '$1'. This operation will merge the current release into the '$2' and '$3' branches.
dlgSgFlowReleaseFinish.inf"Choose how to finish the release branch '$1'."=\
 Choose how to finish the release branch '$1'.
dlgSgFlowReleaseFinish.tle=Finish Release
dlgSgFlowReleaseStart.btn"Start"=Start
dlgSgFlowReleaseStart.chk"Fetch from base branch"=Fetch from base branch
dlgSgFlowReleaseStart.edt"Base"=Base
dlgSgFlowReleaseStart.edt"Release Name"=Release Name
dlgSgFlowReleaseStart.hdl=Start a new release
dlgSgFlowReleaseStart.inf%1=Enter the name of the new release branch. This operation will fork a new branch from the '$1' branch.
dlgSgFlowReleaseStart.lbl"Resulting Branch: $1"=Resulting Branch: $1
dlgSgFlowReleaseStart.tle=Start Release
dlgSgGarbageCollector.btn"Run Garbage Collector"=Run Garbage Collector
dlgSgGarbageCollector.chk"Also prune recently created objects"=Also prune recently created objects
dlgSgGarbageCollector.chk"Expire reflog now \(will also delete stashes!\)"=\
 Expire reflog now \(will also delete stashes!\)
dlgSgGarbageCollector.chk"Optimize repository more aggressively \(may take a while\)"=\
 Optimize repository more aggressively \(may take a while\)
dlgSgGarbageCollector.hdl=Run Garbage Collector
dlgSgGarbageCollector.inf=Running the Git garbage collector will prune unreachable objects and optimize the local repository in order to reduce disk space and increase performance.
dlgSgGarbageCollector.tle=Run Garbage Collector
dlgSgGitHubGenerateToken.btn"Authenticate"=Authenticate
dlgSgGitHubGenerateToken.edt"Account"=Account
dlgSgGitHubGenerateToken.edt"Code"=Code
dlgSgGitHubGenerateToken.edt"Link"=Link
dlgSgGitHubGenerateToken.edt"Password"=Password
dlgSgGitHubGenerateToken.hdl=Generate a new API token for GitHub
dlgSgGitHubGenerateToken.inf=Authenticate at GitHub using OAuth or by providing your credentials.
dlgSgGitHubGenerateToken.lbl"Your browser should have opened automatically, let you authenticate with your preferred account at GitHub and grant access to SmartGit. If this didn't happen, manually open following link:"=\
 Your browser should have opened automatically, let you authenticate with your preferred account at GitHub and grant access to SmartGit. If this didn't happen, manually open following link:
dlgSgGitHubGenerateToken.rbt"Authenticate using OAuth \(recommended\)"=Authenticate using OAuth \(recommended\)
dlgSgGitHubGenerateToken.rbt"Authenticate with your GitHub account and password"=\
 Authenticate with your GitHub account and password
dlgSgGitHubGenerateToken.tle=Generate API Token
dlgSgGitHubPullRequestCreate.btn"Create"=Create
dlgSgGitHubPullRequestCreate.chk"Draft \(don\'t notify code owners yet\)"=\
 Draft \(don\'t notify code owners yet\)
dlgSgGitHubPullRequestCreate.edt"$1 \u21d2"=$1 \u21d2
dlgSgGitHubPullRequestCreate.edt"Title and Description"=Title and Description
dlgSgGitHubPullRequestCreate.hdl=Create a Pull Request
dlgSgGitHubPullRequestCreate.inf=Send pull request to another repository or branch.
dlgSgGitHubPullRequestCreate.tle=Create Pull Request
dlgSgGitHubPullRequestMerge.btn"Merge"=Merge
dlgSgGitHubPullRequestMerge.btn"Select from Log"=Select from Log
dlgSgGitHubPullRequestMerge.edt"Commit Message"=Commit Message
dlgSgGitHubPullRequestMerge.hdl=Merge a Pull Request
dlgSgGitHubPullRequestMerge.inf=Choose how to merge the selected Pull Request.
dlgSgGitHubPullRequestMerge.lbl"If you have integrated the Pull Request manually, choose this option to close the Pull Request on the server."=\
 If you have integrated the Pull Request manually, choose this option to close the Pull Request on the server.
dlgSgGitHubPullRequestMerge.lbl"If your are fine with the Pull Request changes, choose this option to perform the merge directly on the GitHub server."=\
 If your are fine with the Pull Request changes, choose this option to perform the merge directly on the GitHub server.
dlgSgGitHubPullRequestMerge.lbl"To locally check how a Pull Request integrates with the latest commits, choose this option."=\
 To locally check how a Pull Request integrates with the latest commits, choose this option.
dlgSgGitHubPullRequestMerge.rbt"Mark as merged on GitHub Server"=\
 Mark as merged on GitHub Server
dlgSgGitHubPullRequestMerge.rbt"Merge on GitHub Server"=Merge on GitHub Server
dlgSgGitHubPullRequestMerge.rbt"Merge to Local Repository"=Merge to Local Repository
dlgSgGitHubPullRequestMerge.tle=Merge Pull Request
dlgSgGitLabGenerateToken.edt"Link"=Link
dlgSgGitLabGenerateToken.edt"Token"=Token
dlgSgGitLabGenerateToken.hdl=Enter the generated token
dlgSgGitLabGenerateToken.inf=Authenticate at GitLab and enter the generated token.
dlgSgGitLabGenerateToken.lbl"Your browser should have opened automatically, let you authenticate with your preferred account at GitLab and grant access to SmartGit. If this didn't happen, manually open following link:"=\
 Your browser should have opened automatically, let you authenticate with your preferred account at GitLab and grant access to SmartGit. If this didn't happen, manually open following link:
dlgSgGitLabGenerateToken.tle=Request Access Token
dlgSgGitLabMergeRequestCreate.btn"Create"=Create
dlgSgGitLabMergeRequestCreate.edt"$1 \u21d2"=$1 \u21d2
dlgSgGitLabMergeRequestCreate.edt"Title and Description"=Title and Description
dlgSgGitLabMergeRequestCreate.hdl=Create a Merge Request
dlgSgGitLabMergeRequestCreate.inf=Send merge request to another repository or branch.
dlgSgGitLabMergeRequestCreate.tle=Create Merge Request
dlgSgGitLabSettingsInvalidToken.fur=Use a Personal Access Token from your GitLab account.
dlgSgGitLabSettingsInvalidToken.hdl=Please enter a Personal Access Token for your GitLab account.
dlgSgGitLabSettingsInvalidToken.tle=Input Validation
dlgSgHeadMessageListenerReplaceMessage.btn"Don't Replace"=Don't Replace
dlgSgHeadMessageListenerReplaceMessage.btn"Replace This Time"=Replace This Time
dlgSgHeadMessageListenerReplaceMessage.chk=Never replace if a message is already entered
dlgSgHeadMessageListenerReplaceMessage.fur=If the commit message input field is empty, the HEAD commit's message will be re-used automatically.
dlgSgHeadMessageListenerReplaceMessage.hdl=Replace entered commit message with the HEAD commit's message?
dlgSgHeadMessageListenerReplaceMessage.tle=Commit
dlgSgHistoryEditAuthor.btn"Set Author"=Set Author
dlgSgHistoryEditAuthor.edt"Email"=Email
dlgSgHistoryEditAuthor.edt"User Name"=User Name
dlgSgHistoryEditAuthor.hdl=Edit commit author
dlgSgHistoryEditAuthor.inf=Enter the new commit author and its email address.
dlgSgHistoryEditAuthor.tle=Edit Author
dlgSgHistoryEditMessage.btn"Select from Log"=Select from Log
dlgSgHistoryEditMessage.btn"Select"=Select
dlgSgHistoryEditMessage.btn"Set Message"=Set Message
dlgSgHistoryEditMessage.edt"Commit Message"=Commit Message
dlgSgHistoryEditMessage.hdl=Edit commit message
dlgSgHistoryEditMessage.inf=Enter the new commit message.
dlgSgHistoryEditMessage.mni"JIRA"=JIRA
dlgSgHistoryEditMessage.mni"Log"=Log
dlgSgHistoryEditMessage.tle=Edit Commit Message
dlgSgHistoryModifySplitConfirm.btn"Modify"=Modify
dlgSgHistoryModifySplitConfirm.btn"Split"=Split
dlgSgHistoryModifySplitConfirm.fur='Modify' will stop after the commit.\n\n'Split' will put the changes into the Index. You may discard some changes that should go into the second commit.\n\nAfter you've done the changes, process the remaining commits by continuing the rebase.
dlgSgHistoryModifySplitConfirm.hdl%1=Do you want to modify or split commit $1?
dlgSgHistoryModifySplitConfirm.tle=Modify or Split Commit
dlgSgHistoryPushCommitsReplaceRemoteBranch.btn"Force Push"=Force Push
dlgSgHistoryPushCommitsReplaceRemoteBranch.fur=Pushing to the remote branch is not fast-forward, so the push has to be forced. The commits in the remote branch will be lost.
dlgSgHistoryPushCommitsReplaceRemoteBranch.hdl%1=Do you want to replace the remote branch by commit $1?
dlgSgHistoryPushCommitsReplaceRemoteBranch.tle=Push Up To
dlgSgHistoryPushCommitsUpToCommit.btn"Push"=Push
dlgSgHistoryPushCommitsUpToCommit.fur=All commits up to the selected commit will be pushed to the remote repository.
dlgSgHistoryPushCommitsUpToCommit.hdl%1=Do you want to push changes up to commit $1?
dlgSgHistoryPushCommitsUpToCommit.tle=Push Up To
dlgSgHistoryPushedCommitsModifyPushedCommits.btn"Modify Pushed Commits"=Modify Pushed Commits
dlgSgHistoryPushedCommitsModifyPushedCommits.fur=Commits which are already pushed are known to other users and may have been used by them to build theirs commits upon. When modifying such commits, these users may run into unexpected conflicts later.
dlgSgHistoryPushedCommitsModifyPushedCommits.hdl=Do you want to modify commits which are already pushed?
dlgSgHistoryPushedCommitsModifyPushedCommits.tle=Journal
dlgSgHistorySquash.btn"Select from Log"=Select from Log
dlgSgHistorySquash.btn"Select"=Select
dlgSgHistorySquash.btn"Squash Commits"=Squash Commits
dlgSgHistorySquash.edt"Authorship"=Authorship
dlgSgHistorySquash.edt"Commit Message"=Commit Message
dlgSgHistorySquash.hdl=Squash multiple commits
dlgSgHistorySquash.inf=The selected commits will be replaced by one squashed commit containing all changes of the individual commits.
dlgSgHistorySquash.mni"JIRA"=JIRA
dlgSgHistorySquash.mni"Log"=Log
dlgSgHistorySquash.tle=Squash Commits
dlgSgHostingProviderAdd.btn"Add"=Add
dlgSgHostingProviderAdd.btn"Generate API Token"=Generate API Token
dlgSgHostingProviderAdd.btn"Generate Token"=Generate Token
dlgSgHostingProviderAdd.chk"Use OAuth token for repository authentication \(instead of password\)"=\
 Use OAuth token for repository authentication \(instead of password\)
dlgSgHostingProviderAdd.chk"Use SSH instead of HTTPS to access repositories"=\
 Use SSH instead of HTTPS to access repositories
dlgSgHostingProviderAdd.chk"Use SSL client certificates \(usually not required\)"=\
 Use SSL client certificates \(usually not required\)
dlgSgHostingProviderAdd.chk"Use a GitHub Enterprise instance"=Use a GitHub Enterprise instance
dlgSgHostingProviderAdd.chk"Use a custom GitLab server"=Use a custom GitLab server
dlgSgHostingProviderAdd.edt"Account"=Account
dlgSgHostingProviderAdd.edt"Certificate Password"=Certificate Password
dlgSgHostingProviderAdd.edt"Client Certificate"=Client Certificate
dlgSgHostingProviderAdd.edt"Domain"=Domain
dlgSgHostingProviderAdd.edt"Password"=Password
dlgSgHostingProviderAdd.edt"Server URL"=Server URL
dlgSgHostingProviderAdd.edt"Token"=Token
dlgSgHostingProviderAdd.edt"User Name"=User Name
dlgSgHostingProviderAdd.hdl=Configure a new hosting provider account
dlgSgHostingProviderAdd.inf=Select for which hosting provider you want to configure a new account.
dlgSgHostingProviderAdd.lbl"The \(API\) token is a special auto-generated credential which SmartGit will use to authenticate at GitHub. It adds another layer of security, as you can easily revoke access by removing the token from the GitHub front-end."=\
 The \(API\) token is a special auto-generated credential which SmartGit will use to authenticate at GitHub. It adds another layer of security, as you can easily revoke access by removing the token from the GitHub front-end.
dlgSgHostingProviderAdd.lbl"The token may either be an autogenerated OAuth-token \(use 'Generate Token' below\) or a 'personal access token' which you can generate yourself in your GitLab account settings."=\
 The token may either be an autogenerated OAuth-token \(use 'Generate Token' below\) or a 'personal access token' which you can generate yourself in your GitLab account settings.
dlgSgHostingProviderAdd.lbl"Use the same login information as for the assembla website."=\
 Use the same login information as for the assembla website.
dlgSgHostingProviderAdd.lbl"Use the same login information as for the beanstalk website and make sure that for 'My Profile' - 'Account' - 'Account Settings' - 'Developer API' is enabled."=\
 Use the same login information as for the beanstalk website and make sure that for 'My Profile' - 'Account' - 'Account Settings' - 'Developer API' is enabled.
dlgSgHostingProviderAdd.lbl"Use the same login information as for the codebasehq website."=\
 Use the same login information as for the codebasehq website.
dlgSgHostingProviderAdd.lbl"Use the same login information as for the unfuddle website."=\
 Use the same login information as for the unfuddle website.
dlgSgHostingProviderAdd.tle=Add Hosting Provider
dlgSgHostingProviderEdit.btn"Generate API Token"=Generate API Token
dlgSgHostingProviderEdit.btn"Generate Token"=Generate Token
dlgSgHostingProviderEdit.chk"Use OAuth token for repository authentication \(instead of password\)"=\
 Use OAuth token for repository authentication \(instead of password\)
dlgSgHostingProviderEdit.chk"Use SSH instead of HTTPS to access repositories"=\
 Use SSH instead of HTTPS to access repositories
dlgSgHostingProviderEdit.chk"Use a GitHub Enterprise instance"=Use a GitHub Enterprise instance
dlgSgHostingProviderEdit.chk"Use a custom GitLab server"=Use a custom GitLab server
dlgSgHostingProviderEdit.edt"Certificate Password"=Certificate Password
dlgSgHostingProviderEdit.edt"Client Certificate"=Client Certificate
dlgSgHostingProviderEdit.edt"Name"=Name
dlgSgHostingProviderEdit.edt"Server URL"=Server URL
dlgSgHostingProviderEdit.edt"Token"=Token
dlgSgHostingProviderEdit.err"Please enter a Personal Access Token for your GitLab account."=\
 Please enter a Personal Access Token for your GitLab account.
dlgSgHostingProviderEdit.err"Please enter an OAuth 'refresh' token."=\
 Please enter an OAuth 'refresh' token.
dlgSgHostingProviderEdit.err"Please enter the API token."=Please enter the API token.
dlgSgHostingProviderEdit.err"Please specify the private key file."=\
 Please specify the private key file.
dlgSgHostingProviderEdit.hdl%1=Configure $1 account
dlgSgHostingProviderEdit.inf%1=Please specify your credentials to connect to $1.
dlgSgHostingProviderEdit.lbl"The \(API\) token is a special auto-generated credential which SmartGit will use to authenticate at GitHub. It adds another layer of security, as you can easily revoke access by removing the token from the GitHub front-end."=\
 The \(API\) token is a special auto-generated credential which SmartGit will use to authenticate at GitHub. It adds another layer of security, as you can easily revoke access by removing the token from the GitHub front-end.
dlgSgHostingProviderEdit.lbl"The token may either be an autogenerated OAuth-token \(use 'Generate Token' below\) or a 'personal access token' which you can generate yourself in your GitLab account settings."=\
 The token may either be an autogenerated OAuth-token \(use 'Generate Token' below\) or a 'personal access token' which you can generate yourself in your GitLab account settings.
dlgSgHostingProviderEdit.tle=GitLab
dlgSgHostingProviderSelectRepository.btn"Select"=Select
dlgSgHostingProviderSelectRepository.col"Name"=Name
dlgSgHostingProviderSelectRepository.col"Namespace"=Namespace
dlgSgHostingProviderSelectRepository.col"Repository"=Repository
dlgSgHostingProviderSelectRepository.tle=GitHub Projects
dlgSgHttpPasswordAuthenticationFailedCause1.fur%3=The OAuth-access token could not be requested. Most likely your $1 configuration has changed and SmartGit's stored OAuth credentials are invalid.\n\nTo resolve, recreate the $2 hosting provider in the Preferences.\n\nDetails:\n\n$3
dlgSgHttpPasswordAuthenticationFailedCause1.hdl%1=$1 OAuth-authentication failed
dlgSgHttpPasswordAuthenticationFailedCause1.tle=HTTP authentication
dlgSgHttpPasswordCredentials.btn"Login"=Login
dlgSgHttpPasswordCredentials.chk"Store password"=Store password
dlgSgHttpPasswordCredentials.edt"Password"=Password
dlgSgHttpPasswordCredentials.edt"User Name"=User Name
dlgSgHttpPasswordCredentials.hdl%1=Login to '$1'
dlgSgHttpPasswordCredentials.inf=Provide the user name and password for authenticating to the repository.
dlgSgHttpPasswordCredentials.tle=Login
dlgSgIgnoreDirectoryConfirm.btn"Ignore"=Ignore
dlgSgIgnoreDirectoryConfirm.edt"Ignore File"=Ignore File
dlgSgIgnoreDirectoryConfirm.fur=The directory name will be added to the ignore file. If the ignore file does not exist, it will be created.
dlgSgIgnoreDirectoryConfirm.hdl%1=Do you want to ignore directory '$1'?
dlgSgIgnoreDirectoryConfirm.tle=Ignore
dlgSgIgnoreEdit.btn"Edit"=Edit
dlgSgIgnoreEdit.hdl=Edit Git ignore file
dlgSgIgnoreEdit.inf=Select the Git ignore file to edit.
dlgSgIgnoreEdit.mni"Copy Path"=Copy Path
dlgSgIgnoreEdit.mni"Reveal"=Reveal
dlgSgIgnoreEdit.tle=Edit Ignore File
dlgSgIgnoreFile.btn"Ignore"=Ignore
dlgSgIgnoreFile.btn"Remove && Ignore"=Remove && Ignore
dlgSgIgnoreFile.edt"Ignore File"=Ignore File
dlgSgIgnoreFile.err"The pattern must match all selected file names. For instance, '$1' is not matched."=\
 The pattern must match all selected file names. For instance, '$1' is not matched.
dlgSgIgnoreFile.hdl=Mark files to be ignored
dlgSgIgnoreFile.inf=Choose whether to ignore only the selected file or all files matching the specified pattern. Tracked files will be removed \(stopped from tracking\).
dlgSgIgnoreFile.lbl"Use ? to match a single or \* to match multiple arbitrary characters. The pattern will be saved in the .gitignore file of the same directory."=\
 Use ? to match a single or \* to match multiple arbitrary characters. The pattern will be saved in the .gitignore file of the same directory.
dlgSgIgnoreFile.rbt"Ignore as pattern \(e.g. '\*.obj'\):"=Ignore as pattern \(e.g. '\*.obj'\):
dlgSgIgnoreFile.rbt"Ignore explicitly \(e.g. 'Makefile'\)"=Ignore explicitly \(e.g. 'Makefile'\)
dlgSgIgnoreFile.tle=Ignore
dlgSgIndexEditorSaveOrDiscard.btn"Discard"=Discard
dlgSgIndexEditorSaveOrDiscard.btn"Save"=Save
dlgSgIndexEditorSaveOrDiscard.fur=Your changes will be lost, if you don't save them now.
dlgSgIndexEditorSaveOrDiscard.hdl=Do you want to save your changes?
dlgSgIndexEditorSaveOrDiscard.tle=Close
dlgSgJournalFormCommitCantBeModified.fur=Not part of your head's primary-parent history
dlgSgJournalFormCommitCantBeModified.hdl=At least one selected commit can't be modified.
dlgSgJournalFormCommitCantBeModified.tle=Edit Author
dlgSgLfsInstallConfirm.btn"Install"=Install
dlgSgLfsInstallConfirm.fur=This will configure hooks and filters required for LFS.
dlgSgLfsInstallConfirm.hdl=Would you like to initialize this repository for Large File Support \(LFS\)?
dlgSgLfsInstallConfirm.tle=LFS Install
dlgSgLfsTrack.edt"Pattern"=Pattern
dlgSgLfsTrack.err"File '$1' does not match the specified pattern."=\
 File '$1' does not match the specified pattern.
dlgSgLfsTrack.hdl=Mark a file or pattern as tracked
dlgSgLfsTrack.inf=Specify the file name pattern that should be handled by Large File Support \(LFS\).
dlgSgLfsTrack.tle=LFS Track
dlgSgLocalChangesFormTakeBlockListenerRevertWorkingTreeFile.btn"Revert"=Revert
dlgSgLocalChangesFormTakeBlockListenerRevertWorkingTreeFile.fur%1=You are about to apply lines from the Index to the working tree file '$1'. The modifications will be saved immediately.
dlgSgLocalChangesFormTakeBlockListenerRevertWorkingTreeFile.hdl=Do you really want to revert changes in the working tree file?
dlgSgLocalChangesFormTakeBlockListenerRevertWorkingTreeFile.tle=Revert Working Tree File
dlgSgLogCheckoutFileAs.btn"Save After"=Save After
dlgSgLogCheckoutFileAs.btn"Save Before"=Save Before
dlgSgLogCheckoutFileAs.edt"Target File"=Target File
dlgSgLogCheckoutFileAs.hdl=Save the repository file
dlgSgLogCheckoutFileAs.inf"Select the local file to saved to."=\
 Select the local file to saved to.
dlgSgLogCheckoutFileAs.inf"Select whether to save the file state Before or After the selected commit."=\
 Select whether to save the file state Before or After the selected commit.
dlgSgLogCheckoutFileAs.tle=Save File As
dlgSgLogCommentDeleteConfirm.hdl%1=Do you really want to delete comment '$1'?
dlgSgLogCommentsDeleteConfirm.hdl%1=Do you really want to delete $1 comments?
dlgSgLogComment(|s)DeleteConfirm.btn"Delete Comment"=Delete Comment
dlgSgLogComment(|s)DeleteConfirm.fur=Comments can't be restored after deletion.
dlgSgLogComment(|s)DeleteConfirm.tle=Delete Comment
dlgSgLogCompareSelectedFilesAgainstEachOther.btn"Compare Separately"=Compare Separately
dlgSgLogCompareSelectedFilesAgainstEachOther.btn"Compare With Each Other"=Compare With Each Other
dlgSgLogCompareSelectedFilesAgainstEachOther.fur=You may compare the selected files against each other or open up two separate compares for each file against its previous state.
dlgSgLogCompareSelectedFilesAgainstEachOther.hdl=Do you want to compare the selected files against each other?
dlgSgLogCompareSelectedFilesAgainstEachOther.tle=Compare
dlgSgLogGraphRootSwitch.chk"Include tracked remote branches"=Include tracked remote branches
dlgSgLogGraphRootSwitch.hdl=Select shown branches
dlgSgLogGraphRootSwitch.inf=Select the branches for which to show commits in the graph.
dlgSgLogGraphRootSwitch.tle=Select Branches
dlgSgLogOpenFailedRepository.fur=Is the repository still valid?
dlgSgLogOpenFailedRepository.hdl=Repository could not be opened.
dlgSgLogOpenFailedRepository.tle=Log
dlgSgLogOpenFailedSubmodule.fur=Is the repository still valid?
dlgSgLogOpenFailedSubmodule.hdl%1=Repository '$1' is not valid.
dlgSgLogOpenFailedSubmodule.tle=Log
dlgSgLogOpenNewWindow.btn"Existing Window"=Existing Window
dlgSgLogOpenNewWindow.btn"New Window"=New Window
dlgSgLogOpenNewWindow.fur=There is already an existing Log window which can be revealed.
dlgSgLogOpenNewWindow.hdl=Do you want to open a new Log window?
dlgSgLogOpenNewWindow.tle=Log
dlgSgLogOpenSubmoduleLinkOrRepository.btn"History of Updates"=History of Updates
dlgSgLogOpenSubmoduleLinkOrRepository.btn"Submodule Log"=Submodule Log
dlgSgLogOpenSubmoduleLinkOrRepository.fur=The history of submodule updates will show changes to the submodule link \('GITLINK'\) from the parent repository's perspective. The Log for the submodule repository will show all commits which have occurred in the submodule repository itself.
dlgSgLogOpenSubmoduleLinkOrRepository.hdl=Do you want to show the history of submodule updates or the Log for the submodule repository?
dlgSgLogOpenSubmoduleLinkOrRepository.tle=Open Log
dlgSgLogRefActionsDeleteConfirm.btn"Delete Branch"=Delete Branch
dlgSgLogRefActionsDeleteConfirm.fur=You may lose unpushed changes or it might be complicated to restore the branch\(es\)!
dlgSgLogRefActionsDeleteConfirm.hdl%1=Do you really want to delete the local branch '$1'?
dlgSgLogRefActionsDeleteConfirm.tle=Delete Local Branch
dlgSgLogRefreshRepositoryInvalid.btn"Close Repository"=Close Repository
dlgSgLogRefreshRepositoryInvalid.btn"Remove Repository"=Remove Repository
dlgSgLogRefreshRepositoryInvalid.fur%1=This could mean that the repository at\n\n$1was removed or renamed outside SmartGit.
dlgSgLogRefreshRepositoryInvalid.hdl%1=The opened repository '$1' became invalid.
dlgSgLogRefreshRepositoryInvalid.tle=Refresh
dlgSgMerge.btn"Branches"=Branches
dlgSgMerge.btn"Create Merge-Commit"=Create Merge-Commit
dlgSgMerge.btn"Merge to Working Tree"=Merge to Working Tree
dlgSgMerge.hdl=Merge
dlgSgMerge.inf=Select the branch or commit to merge and how they should be merged into the Working Tree.
dlgSgMerge.tle=Merge
dlgSgMergeHowToMerge.btn"Create Merge-Commit"=Create Merge-Commit
dlgSgMergeHowToMerge.btn"Fast-Forward"=Fast-Forward
dlgSgMergeHowToMerge.btn"Merge to Working Tree"=Merge to Working Tree
dlgSgMergeHowToMerge.fur=Fast-forward merge means to just move the current branch \(HEAD\) forward to the selected commit. As an alternative you can create a merge commit or merge to the working tree. In the latter case you can review the changes and later create a merge or normal \(squash\) commit later.
dlgSgMergeHowToMerge.hdl%1=How to merge from branch '$1'?
dlgSgMergeHowToMerge.tle=Merge
dlgSgOpenRepository.edt"Repository"=Repository
dlgSgOpenRepository.err"Please specify the root directory of a Git or Mercurial repository."=\
 Please specify the root directory of a Git or Mercurial repository.
dlgSgOpenRepository.hdl=Add existing or create new repository
dlgSgOpenRepository.inf=Specify the local Git or Mercurial repository to open. To create a new repository, specify an empty directory.
dlgSgOpenRepository.tle=Add or Create Repository
dlgSgOpenRepositoryInitializeChooseVcs.btn"Git"=Git
dlgSgOpenRepositoryInitializeChooseVcs.btn"Mercurial"=Mercurial
dlgSgOpenRepositoryInitializeChooseVcs.fur=The specified directory does not appear to be a valid Git or Mercurial repository.
dlgSgOpenRepositoryInitializeChooseVcs.hdl=What VCS should be used to initialize 'swt'?
dlgSgOpenRepositoryInitializeChooseVcs.tle=Add or Create Repository
dlgSgOutput.chk"Don't show again for these $1 warnings"=\
 Don't show again for these $1 warnings
dlgSgOutput.chk"Don't show again for this warning"=\
 Don't show again for this warning
dlgSgOutput.lbl"Branches need merging first."=Branches need merging first.
dlgSgOutput.lbl"If in question, please ask your repository administrator."=\
 If in question, please ask your repository administrator.
dlgSgOutput.tle"Command Failed"=Command Failed
dlgSgOutput.tle"Command Output"=Command Output
dlgSgOutput.tle"Command Succeeded"=Command Succeeded
dlgSgPingRepositoryFailed.fur%1=Please check the repository URL.\n\n$1
dlgSgPingRepositoryFailed.hdl%1=Could not connect to the repository '$1'.
dlgSgPingRepositoryFailed.tle=Clone
dlgSgPreferences.btn"Add"=Add
dlgSgPreferences.btn"Assign"=Assign
dlgSgPreferences.btn"Change Master Password"=Change Master Password
dlgSgPreferences.btn"Clear Cache"=Clear Cache
dlgSgPreferences.btn"Clear"=Clear
dlgSgPreferences.btn"Copy"=Copy
dlgSgPreferences.btn"Edit"=Edit
dlgSgPreferences.btn"Export"=Export
dlgSgPreferences.btn"I accept the risk!"=I accept the risk!
dlgSgPreferences.btn"Import"=Import
dlgSgPreferences.btn"Move Down"=Move Down
dlgSgPreferences.btn"Move Up"=Move Up
dlgSgPreferences.btn"Re-Add Defaults"=Re-Add Defaults
dlgSgPreferences.btn"Remove All"=Remove All
dlgSgPreferences.btn"Remove"=Remove
dlgSgPreferences.btn"Reset to Defaults"=Reset to Defaults
dlgSgPreferences.btn"Reset"=Reset
dlgSgPreferences.btn"Show Password"=Show Password
dlgSgPreferences.cdl"Authentication"=Authentication
dlgSgPreferences.cdl"Background Commands"=Background Commands
dlgSgPreferences.cdl"Built-in Text Editors"=Built-in Text Editors
dlgSgPreferences.cdl"Commands"=Commands
dlgSgPreferences.cdl"Conflict Solvers"=Conflict Solvers
dlgSgPreferences.cdl"Diff Tools"=Diff Tools
dlgSgPreferences.cdl"Executables"=Executables
dlgSgPreferences.cdl"Git Executable"=Git Executable
dlgSgPreferences.cdl"Hosting Providers"=Hosting Providers
dlgSgPreferences.cdl"Keyboard Shortcuts"=Keyboard Shortcuts
dlgSgPreferences.cdl"Log"=Log
dlgSgPreferences.cdl"Low-level Properties"=Low-level Properties
dlgSgPreferences.cdl"Privacy"=Privacy
dlgSgPreferences.cdl"Proxy"=Proxy
dlgSgPreferences.cdl"Refresh"=Refresh
dlgSgPreferences.cdl"SmartGit Updates"=SmartGit Updates
dlgSgPreferences.cdl"Spell Checker"=Spell Checker
dlgSgPreferences.cdl"Tools"=Tools
dlgSgPreferences.cdl"User Interface"=User Interface
dlgSgPreferences.chk"Add untracked files"=Add untracked files
dlgSgPreferences.chk"Allow all commands on stash and pull request commits"=\
 Allow all commands on stash and pull request commits
dlgSgPreferences.chk"Allow modifying pushed commits \(e.g. forced-push\)"=\
 Allow modifying pushed commits \(e.g. forced-push\)
dlgSgPreferences.chk"Allow to open multiple Log windows for the same repository/file"=\
 Allow to open multiple Log windows for the same repository/file
dlgSgPreferences.chk"Also detect renames for untracked and missing files"=\
 Also detect renames for untracked and missing files
dlgSgPreferences.chk"Ask for master password on startup"=\
 Ask for master password on startup
dlgSgPreferences.chk"Autoindent new lines"=Autoindent new lines
dlgSgPreferences.chk"Automatically save stash on common commands, if they fail due to local changes"=\
 Automatically save stash on common commands, if they fail due to local changes
dlgSgPreferences.chk"Automatically send 'crash footprints' after an internal error has occurred"=\
 Automatically send 'crash footprints' after an internal error has occurred
dlgSgPreferences.chk"Automatically set up tracking for new branches"=\
 Automatically set up tracking for new branches
dlgSgPreferences.chk"Begin of line: jump to first non-whitespace character"=\
 Begin of line: jump to first non-whitespace character
dlgSgPreferences.chk"Closed 'favorite' repositories"=Closed 'favorite' repositories
dlgSgPreferences.chk"Compare with working tree, even if all changes are staged"=\
 Compare with working tree, even if all changes are staged
dlgSgPreferences.chk"Detect local changes in closed 'favorite' repositories"=\
 Detect local changes in closed 'favorite' repositories
dlgSgPreferences.chk"Detect remote changes"=Detect remote changes
dlgSgPreferences.chk"Detect renames \(for added and removed files, as command line Git does\)"=\
 Detect renames \(for added and removed files, as command line Git does\)
dlgSgPreferences.chk"Distinguish between content and EOL-only changes \(slightly more expensive\)"=\
 Distinguish between content and EOL-only changes \(slightly more expensive\)
dlgSgPreferences.chk"Enable integration for configured hosting providers \(pull requests, comments\)"=\
 Enable integration for configured hosting providers \(pull requests, comments\)
dlgSgPreferences.chk"Focus next change after accepting change \(Take Left/Take Right\)"=\
 Focus next change after accepting change \(Take Left/Take Right\)
dlgSgPreferences.chk"For Preview versions, automatically download the latest build"=\
 For Preview versions, automatically download the latest build
dlgSgPreferences.chk"Highlight current line in text content"=\
 Highlight current line in text content
dlgSgPreferences.chk"Home and end: operate on line, not the document"=\
 Home and end: operate on line, not the document
dlgSgPreferences.chk"Include untracked files"=Include untracked files
dlgSgPreferences.chk"Left and right cursor moves: limit to current line"=\
 Left and right cursor moves: limit to current line
dlgSgPreferences.chk"Open repositories when idle"=Open repositories when idle
dlgSgPreferences.chk"Open the last used repositories"=Open the last used repositories
dlgSgPreferences.chk"Periodically invoke Git's garbage collection when idle"=\
 Periodically invoke Git's garbage collection when idle
dlgSgPreferences.chk"Preselect 'Staged' if files are staged, even if a file without staged changes is selected"=\
 Preselect 'Staged' if files are staged, even if a file without staged changes is selected
dlgSgPreferences.chk"Proxy requires authentication"=Proxy requires authentication
dlgSgPreferences.chk"Push all tags"=Push all tags
dlgSgPreferences.chk"Refresh file system also while SmartGit is in background"=\
 Refresh file system also while SmartGit is in background
dlgSgPreferences.chk"Remember from last used single Log or Working Tree window"=\
 Remember from last used single Log or Working Tree window
dlgSgPreferences.chk"Remove leading and trailing whitespace from commit message"=\
 Remove leading and trailing whitespace from commit message
dlgSgPreferences.chk"Remove missing files"=Remove missing files
dlgSgPreferences.chk"Restore all confirmation dialogs"=Restore all confirmation dialogs
dlgSgPreferences.chk"Send usage statistics"=Send usage statistics
dlgSgPreferences.chk"Show also the resolve dialog for external conflict solvers"=\
 Show also the resolve dialog for external conflict solvers
dlgSgPreferences.chk"Show line length guides \(only useful for monospaced-font\)"=\
 Show line length guides \(only useful for monospaced-font\)
dlgSgPreferences.chk"Show verbose date for last days, e.g. Yesterday"=\
 Show verbose date for last days, e.g. Yesterday
dlgSgPreferences.chk"Show welcome dialog if no repository has been reopened"=\
 Show welcome dialog if no repository has been reopened
dlgSgPreferences.chk"Swap 'ours' and 'theirs' on Rebase conflicts for easier understanding"=\
 Swap 'ours' and 'theirs' on Rebase conflicts for easier understanding
dlgSgPreferences.chk"Trim whitespace"=Trim whitespace
dlgSgPreferences.chk"Use background color for file table to indicate certain states"=\
 Use background color for file table to indicate certain states
dlgSgPreferences.chk"Use font configured in User Interface > Built-in Text Editors"=\
 Use font configured in User Interface > Built-in Text Editors
dlgSgPreferences.chk"Use gravatar.com to show images for the users"=\
 Use gravatar.com to show images for the users
dlgSgPreferences.chk"Use indentation from previous non-empty line"=\
 Use indentation from previous non-empty line
dlgSgPreferences.chk"Use pre-installed \(\"system\"\) Git-Flow\*"=Use pre-installed \("system"\) Git-Flow\*
dlgSgPreferences.chk"Warn for slow rename detection"=Warn for slow rename detection
dlgSgPreferences.col"Accelerator"=Accelerator
dlgSgPreferences.col"Account"=Account
dlgSgPreferences.col"Applies To"=Applies To
dlgSgPreferences.col"Arguments"=Arguments
dlgSgPreferences.col"Command + Arguments"=Command + Arguments
dlgSgPreferences.col"Command"=Command
dlgSgPreferences.col"Default"=Default
dlgSgPreferences.col"Details"=Details
dlgSgPreferences.col"Dictionary File"=Dictionary File
dlgSgPreferences.col"File Pattern"=File Pattern
dlgSgPreferences.col"Key"=Key
dlgSgPreferences.col"Language"=Language
dlgSgPreferences.col"Name"=Name
dlgSgPreferences.col"Patterns"=Patterns
dlgSgPreferences.col"Repository"=Repository
dlgSgPreferences.col"Shortcut"=Shortcut
dlgSgPreferences.col"Value"=Value
dlgSgPreferences.edt"Date Format\*"=Date Format\*
dlgSgPreferences.edt"Example"=Example
dlgSgPreferences.edt"Fetch"=Fetch
dlgSgPreferences.edt"File Name Matches\*"=File Name Matches\*
dlgSgPreferences.edt"Font Family"=Font Family
dlgSgPreferences.edt"Font Size"=Font Size
dlgSgPreferences.edt"Git Executable"=Git Executable
dlgSgPreferences.edt"Hg Executable"=Hg Executable
dlgSgPreferences.edt"Host"=Host
dlgSgPreferences.edt"Known credentials"=Known credentials
dlgSgPreferences.edt"Language\*"=Language\*
dlgSgPreferences.edt"On start-up"=On start-up
dlgSgPreferences.edt"Password"=Password
dlgSgPreferences.edt"Port"=Port
dlgSgPreferences.edt"Prefer"=Prefer
dlgSgPreferences.edt"Preview"=Preview
dlgSgPreferences.edt"Shortcut"=Shortcut
dlgSgPreferences.edt"Suggest to"=Suggest to
dlgSgPreferences.edt"Theme"=Theme
dlgSgPreferences.edt"Theme\*"=Theme\*
dlgSgPreferences.edt"Time Format\*"=Time Format\*
dlgSgPreferences.edt"Username"=Username
dlgSgPreferences.hnt"Search"=Search
dlgSgPreferences.lbl"Changing these low-level properties can be harmful to the stability or performance of SmartGit. You should only continue if you are sure of what you are doing. Changed properties with a trailing \* need a restart to be applied."=\
 Changing these low-level properties can be harmful to the stability or performance of SmartGit. You should only continue if you are sure of what you are doing. Changed properties with a trailing \* need a restart to be applied.
dlgSgPreferences.lbl"Define external tools which will show up in the Tools menu. Those marked with a leading \* in front of the name can be used by the Open command."=\
 Define external tools which will show up in the Tools menu. Those marked with a leading \* in front of the name can be used by the Open command.
dlgSgPreferences.lbl"If you are using SSH to connect to other Git repositories, select what SSH client to use."=\
 If you are using SSH to connect to other Git repositories, select what SSH client to use.
dlgSgPreferences.lbl"In order to use all SmartGit functionality, you need to have command line Git installed on your system. Provide here the full path to the installed 'git' executable."=\
 In order to use all SmartGit functionality, you need to have command line Git installed on your system. Provide here the full path to the installed 'git' executable.
dlgSgPreferences.lbl"In order to use all SmartGit functionality, you need to have command line Git or Mercurial installed on your system. Provide here the full path to the installed 'git' or 'hg' executable."=\
 In order to use all SmartGit functionality, you need to have command line Git or Mercurial installed on your system. Provide here the full path to the installed 'git' or 'hg' executable.
dlgSgPreferences.lbl"Note: The password will be stored in plain text in SmartGit's configuration area!"=\
 Note: The password will be stored in plain text in SmartGit's configuration area!
dlgSgPreferences.lbl"Please help to improve SmartGit's quality by automatically sending 'crash footprints' which do not contain any sensitive information. You can change this option later in the preferences.\n\nA 'crash footprint' contains details about your machine \(e.g. version of operating system\), SmartGit's version/build number, the JVM state and where the internal error occurred.\n\nIt contains NO POTENTIALLY SENSITIVE INFORMATION like user names, email addresses, file contents, file paths or server names."=\
 Please help to improve SmartGit's quality by automatically sending 'crash footprints' which do not contain any sensitive information. You can change this option later in the preferences.\n\nA 'crash footprint' contains details about your machine \(e.g. version of operating system\), SmartGit's version/build number, the JVM state and where the internal error occurred.\n\nIt contains NO POTENTIALLY SENSITIVE INFORMATION like user names, email addresses, file contents, file paths or server names.
dlgSgPreferences.lbl"The proxy is primarily used for the Check for New Version. It will also be used for Git HTTP\(s\) connections if no reasonable system proxy configuration seems to be present already \(see documentation for details\)."=\
 The proxy is primarily used for the Check for New Version. It will also be used for Git HTTP\(s\) connections if no reasonable system proxy configuration seems to be present already \(see documentation for details\).
dlgSgPreferences.lbl"When comparing files, this list is searched from top to bottom to find a matching diff tool. If none is found, the built-in file compare is used for text files."=\
 When comparing files, this list is searched from top to bottom to find a matching diff tool. If none is found, the built-in file compare is used for text files.
dlgSgPreferences.lbl"When invoking the Conflict Solver feature, this list is searched from top to bottom to find a matching entry. If none is found, the built-in Conflict Solver is used for text files."=\
 When invoking the Conflict Solver feature, this list is searched from top to bottom to find a matching entry. If none is found, the built-in Conflict Solver is used for text files.
dlgSgPreferences.lbl"You may configure hosting provider accounts to simplify accessing your hosted repositories or to enable the GitHub pull request and comment features."=\
 You may configure hosting provider accounts to simplify accessing your hosted repositories or to enable the GitHub pull request and comment features.
dlgSgPreferences.lbl"\*\) these options require an application restart to be applied"=\
 \*\) these options require an application restart to be applied
dlgSgPreferences.lbl"\*\) this option requires an application restart to be applied"=\
 \*\) this option requires an application restart to be applied
dlgSgPreferences.mni"Copy Key"=Copy Key
dlgSgPreferences.mni"Edit"=Edit
dlgSgPreferences.mni"Reset"=Reset
dlgSgPreferences.rbt"Auto-detect the system proxy"=Auto-detect the system proxy
dlgSgPreferences.rbt"Automatically download and install updates"=Automatically download and install updates
dlgSgPreferences.rbt"Check and report new updates"=Check and report new updates
dlgSgPreferences.rbt"Dark"=Dark
dlgSgPreferences.rbt"Do not check for new updates"=\
 Do not check for new updates
dlgSgPreferences.rbt"Don't use a proxy"=Don't use a proxy
dlgSgPreferences.rbt"Exact case \('Foo' will match 'Foo', but not 'foo'\)"=\
 Exact case \('Foo' will match 'Foo', but not 'foo'\)
dlgSgPreferences.rbt"Ignore case \('Foo' will match 'Foo' and 'foo'\)"=\
 Ignore case \('Foo' will match 'Foo' and 'foo'\)
dlgSgPreferences.rbt"Light"=Light
dlgSgPreferences.rbt"Log Graph"=Log Graph
dlgSgPreferences.rbt"Prefer light-weight updates stored in home directory"=\
 Prefer light-weight updates stored in home directory
dlgSgPreferences.rbt"Smart upper case \('FoB' will match 'FooBar', but neither 'foobar' nor 'Fob'\)"=\
 Smart upper case \('FoB' will match 'FooBar', but neither 'foobar' nor 'Fob'\)
dlgSgPreferences.rbt"Update SmartGit application in-place \(may require administrator permissions\)"=\
 Update SmartGit application in-place \(may require administrator permissions\)
dlgSgPreferences.rbt"Use SmartGit as SSH client"=Use SmartGit as SSH client
dlgSgPreferences.rbt"Use following proxy"=Use following proxy
dlgSgPreferences.rbt"Use system SSH client"=Use system SSH client
dlgSgPreferences.rbt"Working Tree"=Working Tree
dlgSgPreferences.tab"Behavior"=Behavior
dlgSgPreferences.tab"Colors"=Colors
dlgSgPreferences.tab"Font"=Font
dlgSgPreferences.tab"Languages"=Languages
dlgSgPreferences.tle=Preferences
dlgSgProcessKiller.btn"Exit Process"=Exit Process
dlgSgProcessKiller.btn"Wait"=Wait
dlgSgProcessKiller.lbl"This usually happens when SmartGit is configured to use the system SSH client, which needs to ask for credentials. Due to technical issues, SmartGit can't read the SSH client's input request and hence hangs.\n\nIf you think the process is hanging, click the Exit Process button, otherwise Wait."=\
 This usually happens when SmartGit is configured to use the system SSH client, which needs to ask for credentials. Due to technical issues, SmartGit can't read the SSH client's input request and hence hangs.\n\nIf you think the process is hanging, click the Exit Process button, otherwise Wait.
dlgSgProcessKiller.tle=Process Not Responding
dlgSgProviderPullRequestCreateNoTargetRepositories.fur=The repository is no GitHub-fork and there are no other remotes which are forks of this repository.
dlgSgProviderPullRequestCreateNoTargetRepositories.hdl=No target repositories found.
dlgSgProviderPullRequestCreateNoTargetRepositories.tle=Create Pull Request
dlgSgProviderPullRequestDropConfirmMr.btn"Drop"=Drop
dlgSgProviderPullRequestDropConfirmMr.fur=The merge request itself will not be deleted on the server.
dlgSgProviderPullRequestDropConfirmMr.hdl%1=Do you really want to drop the local commits of merge request $1?
dlgSgProviderPullRequestDropConfirmMr.tle=Drop Merge Request
dlgSgProviderPullRequestDropConfirmPr.btn"Drop"=Drop
dlgSgProviderPullRequestDropConfirmPr.fur=The pull request itself will not be deleted on the server.
dlgSgProviderPullRequestDropConfirmPr.hdl%1=Do you really want to drop the local commits of pull request $1?
dlgSgProviderPullRequestDropConfirmPr.tle=Drop Pull Request
dlgSgProviderPullRequestRetractMr.btn"Retract"=Retract
dlgSgProviderPullRequestRetractMr.edt"Comment"=Comment
dlgSgProviderPullRequestRetractMr.hdl=Retract Merge Request
dlgSgProviderPullRequestRetractMr.inf=Enter the comment which will be logged with the closed merge request.
dlgSgProviderPullRequestRetractMr.tle=Retract Merge Request
dlgSgProviderPullRequestRetractPr.btn"Retract"=Retract
dlgSgProviderPullRequestRetractPr.edt"Comment"=Comment
dlgSgProviderPullRequestRetractPr.hdl=Retract Pull Request
dlgSgProviderPullRequestRetractPr.inf=Enter the comment which will be logged with the closed pull request.
dlgSgProviderPullRequestRetractPr.tle=Retract Pull Request
dlgSgPull.btn"Fetch Only"=Fetch Only
dlgSgPull.btn"Pull"=Pull
dlgSgPull.chk"Fetch from all remotes"=Fetch from all remotes
dlgSgPull.chk"Remember as default for repository"=Remember as default for repository
dlgSgPull.chk"Update existing and fetch new tags"=\
 Update existing and fetch new tags
dlgSgPull.edt"Fetch From"=Fetch From
dlgSgPull.hdl=Pull commits from a remote repository
dlgSgPull.inf"In contrast to Fetch Only, Pull will also incorporate the fetched changes \(expand the options below to configure\)."=\
 In contrast to Fetch Only, Pull will also incorporate the fetched changes \(expand the options below to configure\).
dlgSgPull.inf"Select the remote repository to pull. In contrast to Fetch Only, Pull will also incorporate the fetched changes \(expand the options below to configure\)."=\
 Select the remote repository to pull. In contrast to Fetch Only, Pull will also incorporate the fetched changes \(expand the options below to configure\).
dlgSgPull.rbt"Merge fetched remote changes"=Merge fetched remote changes
dlgSgPull.rbt"Rebase local branch onto fetched changes"=\
 Rebase local branch onto fetched changes
dlgSgPull.tle=Pull
dlgSgPullConfiguration.btn"Configure"=Configure
dlgSgPullConfiguration.chk"Remember as default for other repositories"=\
 Remember as default for other repositories
dlgSgPullConfiguration.hdl=Configure how to pull
dlgSgPullConfiguration.inf=Specify whether to merge or rebase on Pull for the current repository.
dlgSgPullConfiguration.lbl"Merging produces additional 'merge'-commits and is not recommended. It might however be a convention of your repository \(ask the maintainer to find out\)."=\
 Merging produces additional 'merge'-commits and is not recommended. It might however be a convention of your repository \(ask the maintainer to find out\).
dlgSgPullConfiguration.lbl"Rebasing gives a clean linear history and is recommended in general."=\
 Rebasing gives a clean linear history and is recommended in general.
dlgSgPullConfiguration.rbt"Merge"=Merge
dlgSgPullConfiguration.rbt"Rebase"=Rebase
dlgSgPullConfiguration.tle=Configure Pull
dlgSgPullMergeInsteadOfRebase.btn"Merge"=Merge
dlgSgPullMergeInsteadOfRebase.btn"Rebase"=Rebase
dlgSgPullMergeInsteadOfRebase.fur%1=Amongst the changes to rebase there is merge-commit $1. Rebasing merge-commits can easily cause troubles.
dlgSgPullMergeInsteadOfRebase.hdl=Do you want to merge your local changes instead of rebasing?
dlgSgPullMergeInsteadOfRebase.tle=Pull
dlgSgPullNoRemoteRepository.btn"Add Remote"=Add Remote
dlgSgPullNoRemoteRepository.fur=You first need to add a remote repository to pull from.
dlgSgPullNoRemoteRepository.hdl=No remote repository has been found.
dlgSgPullNoRemoteRepository.tle=Pull
dlgSgPullOrJustFetch.btn"Fetch"=Fetch
dlgSgPullOrJustFetch.btn"Pull"=Pull
dlgSgPullOrJustFetch.chk"Fetch from all remotes"=Fetch from all remotes
dlgSgPullOrJustFetch.chk"Update existing and fetch new tags"=\
 Update existing and fetch new tags
dlgSgPullOrJustFetch.fur=You can change the Pull behavior in the Repository Settings.
dlgSgPullOrJustFetch.hdl%1=Do you want to pull or just fetch $1 repositories?
dlgSgPullOrJustFetch.tle=Pull
dlgSgPushConfirmSingleBranch.btn"Push"=Push
dlgSgPushConfirmSingleBranch.chk=Don't show again
dlgSgPushConfirmSingleBranch.fur%1=1 branch will be pushed to '$1'.
dlgSgPushConfirmSingleBranch.hdl%1=Do you want to push branch '$1'?
dlgSgPushConfirmSingleBranch.tle=Push
dlgSgPushForced.btn"Force Push"=Force Push
dlgSgPushForced.fur=Pushing to the remote branch is not fast-forward, so the push has to be forced. The commits in the remote branch will be lost.
dlgSgPushForced.hdl=Do you want to force-push \(replace\) the remote branch?
dlgSgPushForced.tle=Push
dlgSgPushForcedSvn.btn"Force Push"=Force Push
dlgSgPushForcedSvn.fur=You are about to replace the remote branch. Revisions of that branch might not be \(easily\) accessible anymore.
dlgSgPushForcedSvn.hdl=Do you want to force-push \(replace\) the remote branch?
dlgSgPushForcedSvn.tle=Push
dlgSgPushOverwriteRemoteBranchConfirm.btn"Push"=Push
dlgSgPushOverwriteRemoteBranchConfirm.chk=Overwrite remote changes
dlgSgPushOverwriteRemoteBranchConfirm.fur=You are about to replace the remote branch, which contains commits that you haven't seen at all. Maybe you want to merge/rebase onto the remote changes before?
dlgSgPushOverwriteRemoteBranchConfirm.hdl=Do you really want to overwrite the remote branch?
dlgSgPushOverwriteRemoteBranchConfirm.tle=Push
dlgSgPushToNoTagsOrLocalBranches.fur=You can only push tags or local branches.
dlgSgPushToNoTagsOrLocalBranches.hdl=No tags or local branches to push.
dlgSgPushToNoTagsOrLocalBranches.tle=Push To
dlgSgPushToRef.btn"Push"=Push
dlgSgPushToRef.chk"Force pushing \(even if it's not fast-forward\)"=\
 Force pushing \(even if it's not fast-forward\)
dlgSgPushToRef.edt"Push To"=Push To
dlgSgPushToRef.edt"Target Repository"=Target Repository
dlgSgPushToRef.err"Enter the remote location to which the commits of the current branch should be pushed to."=\
 Enter the remote location to which the commits of the current branch should be pushed to.
dlgSgPushToRef.err"Please specify a valid Git ref."=\
 Please specify a valid Git ref.
dlgSgPushToRef.hdl"Push '$1' to a remote repository"=\
 Push '$1' to a remote repository
dlgSgPushToRef.hdl"Push '$1' to remote '$2'"=Push '$1' to remote '$2'
dlgSgPushToRef.inf=Select the target repository where to push the ref\(s\).
dlgSgPushToRef.rbt"Custom Ref:"=Custom Ref:
dlgSgPushToRef.rbt"Tracked or matching branch"=Tracked or matching branch
dlgSgPushToRef.tle=Push To
dlgSgPushToRemoteResetTargetBranches.btn"Force Push"=Force Push
dlgSgPushToRemoteResetTargetBranches.fur=Forcing push will overwrite branches and their commits in the target remote which will be lost afterwards.
dlgSgPushToRemoteResetTargetBranches.hdl=Do you really want to reset the target remote branches?
dlgSgPushToRemoteResetTargetBranches.tle=Push To
dlgSgPushTrackingConfigureSingle.btn"Configure"=Configure
dlgSgPushTrackingConfigureSingle.btn"Skip"=Skip
dlgSgPushTrackingConfigureSingle.fur=For your current branch tracking \(its corresponding remote branch\) has not been configured yet. Configuring tracking will keep your local branches in sync with the remote branches.
dlgSgPushTrackingConfigureSingle.hdl%1=Do you want to configure tracking for '$1' branch?
dlgSgPushTrackingConfigureSingle.tle=Push
dlgSgRebase.btn"Branches"=Branches
dlgSgRebase.btn"Rebase HEAD to"=Rebase HEAD to
dlgSgRebase.hdl=Rebase HEAD to
dlgSgRebase.inf=Select the commit to which the HEAD commits should be rebased.
dlgSgRebase.tle=Rebase
dlgSgRebaseContinueAfterSplittingCommit.btn"Continue"=Continue
dlgSgRebaseContinueAfterSplittingCommit.fur%1=The splitting of commit $1 still is in progress and all changes of this commit have been applied.
dlgSgRebaseContinueAfterSplittingCommit.hdl=Do you want to continue after splitting the commit?
dlgSgRebaseContinueAfterSplittingCommit.tle=Rebase
dlgSgRebaseContinueConfirm.btn"Continue Rebase"=Continue Rebase
dlgSgRebaseContinueConfirm.fur=Continue the rebase operation after having resolved all conflicts.
dlgSgRebaseContinueConfirm.hdl=Do you want to continue the rebase?
dlgSgRebaseContinueConfirm.tle=Rebase
dlgSgRebaseContinueNothingToCommitContinue.btn"Continue Rebase"=Continue Rebase
dlgSgRebaseContinueNothingToCommitContinue.fur=The repository is in 'rebasing' state, but there is nothing to commit, so you may just continue the Rebase.
dlgSgRebaseContinueNothingToCommitContinue.hdl=Do you want to continue the rebase?
dlgSgRebaseContinueNothingToCommitContinue.tle=Rebase
dlgSgRebaseContinueNothingToCommitSkip.btn"Skip Commit"=Skip Commit
dlgSgRebaseContinueNothingToCommitSkip.fur=The repository is in 'rebasing' state, but there is nothing to commit, so you may just skip this rebased commit.
dlgSgRebaseContinueNothingToCommitSkip.hdl=Do you want to skip this rebased commit?
dlgSgRebaseContinueNothingToCommitSkip.tle=Rebase
dlgSgRebaseContinuePreserveUntrackedFiles.btn"Commit"=Commit
dlgSgRebaseContinuePreserveUntrackedFiles.btn"Preserve"=Preserve
dlgSgRebaseContinuePreserveUntrackedFiles.fur=Your working tree contains untracked files. You may either choose to preserve them in the working tree or include them for the rebased commit.
dlgSgRebaseContinuePreserveUntrackedFiles.hdl=Do you want to preserve untracked files in your working tree?
dlgSgRebaseContinuePreserveUntrackedFiles.tle=Rebase
dlgSgRebaseContinueWithoutApplyingAllChanges.btn"Continue Anyway"=Continue Anyway
dlgSgRebaseContinueWithoutApplyingAllChanges.btn"Put Changes into Index"=Put Changes into Index
dlgSgRebaseContinueWithoutApplyingAllChanges.fur%1=The splitting of commit $1 still is in progress, but not all changes of this commit have been applied.\n\nIf this is intentional, you can continue. Otherwise, you should click 'Put Changes into Index' and review your changes.
dlgSgRebaseContinueWithoutApplyingAllChanges.hdl=Do you want to continue splitting the commit without applying all changes?
dlgSgRebaseContinueWithoutApplyingAllChanges.tle=Rebase
dlgSgRebaseHeadToCommitConfirmBc.fur%1=This will apply all commits from the working tree branch '$1' \(HEAD\) onto the selected commit.
dlgSgRebaseHeadToCommitConfirmBc.hdl%1=Do you want to rebase '$1' onto the selected commit?
dlgSgRebaseHeadToCommitConfirmBr.fur%2=This will apply all commits from the working tree branch '$1' \(HEAD\) to '$2'.
dlgSgRebaseHeadToCommitConfirmBr.hdl%2=Do you want to rebase '$1' to '$2'?
dlgSgRebaseHeadToCommitConfirm(Br|Bc|Hr|Hc).btn"Rebase HEAD to"=Rebase HEAD to
dlgSgRebaseHeadToCommitConfirm(Br|Bc|Hr|Hc).btn"Rebase Interactively"=Rebase Interactively
dlgSgRebaseHeadToCommitConfirm(Br|Bc|Hr|Hc).tle=Rebase HEAD to Selected Commit
dlgSgRebaseInteractive.btn"Auto-Squash"=Auto-Squash
dlgSgRebaseInteractive.btn"Edit Message"=Edit Message
dlgSgRebaseInteractive.btn"Edit"=Edit
dlgSgRebaseInteractive.btn"Move Down"=Move Down
dlgSgRebaseInteractive.btn"Move Up"=Move Up
dlgSgRebaseInteractive.btn"Rebase"=Rebase
dlgSgRebaseInteractive.btn"Remove"=Remove
dlgSgRebaseInteractive.btn"Squash"=Squash
dlgSgRebaseInteractive.col"IDs"=IDs
dlgSgRebaseInteractive.col"Message"=Message
dlgSgRebaseInteractive.hdl=Rewrite History
dlgSgRebaseInteractive.inf=Reorder or squash commits according to your needs.
dlgSgRebaseInteractive.mni"Neighboring Commits"=Neighboring Commits
dlgSgRebaseInteractive.mni"To Bottom Commit"=To Bottom Commit
dlgSgRebaseInteractive.mni"To Top Commit"=To Top Commit
dlgSgRebaseInteractive.tle=Rebase Interactive
dlgSgRebaseInteractiveMessage.edt"Commit Message"=Commit Message
dlgSgRebaseInteractiveMessage.hdl=Edit commit message
dlgSgRebaseInteractiveMessage.inf=Provide the new message for the commit.
dlgSgRebaseInteractiveMessage.tle=Edit Message
dlgSgRebaseInteractiveRemoveCommit.btn"Remove"=Remove
dlgSgRebaseInteractiveRemoveCommit.fur=It might become hard or impossible to recover the commit again.
dlgSgRebaseInteractiveRemoveCommit.hdl%1=Are you sure to remove the selected commit $1?
dlgSgRebaseInteractiveRemoveCommit.tle=Remove Commit
dlgSgRebaseTagCommit.btn"Add Tag"=Add Tag
dlgSgRebaseTagCommit.btn"Skip Tag"=Skip Tag
dlgSgRebaseTagCommit.fur=After the rebase, the remaining commit won't be reachable anymore.
dlgSgRebaseTagCommit.hdl%1=Should commit $1 be tagged?
dlgSgRebaseTagCommit.tle=Rebase
dlgSgRebasingAbortConfirm.btn"Abort Rebase"=Abort Rebase
dlgSgRebasingAbortConfirm.fur=Your working tree is in 'rebasing' state. You may abort rebasing; if you just want to skip the current patch, use Branch \| Rebase \| Rebase HEAD To instead.\n\nAborting will clean any local modification \(by invoking 'git reset --hard'\)!
dlgSgRebasingAbortConfirm.hdl=Do you want to abort the rebasing?
dlgSgRebasingAbortConfirm.tle=Rebase
dlgSgRecursiveStage.btn"Stage"=Stage
dlgSgRecursiveStage.hdl=Save working tree changes in the Index for later commit
dlgSgRecursiveStage.inf=Select the files to stage to the Index.
dlgSgRecursiveStage.tle=Stage
dlgSgRecursiveUnstage.btn"Unstage"=Unstage
dlgSgRecursiveUnstage.hdl=Revert staged changes from the Index to the working tree
dlgSgRecursiveUnstage.inf=Select the files to unstage from the Index.
dlgSgRecursiveUnstage.tle=Unstage
dlgSgRecursive(Stage|Unstage).col"Directory"=Directory
dlgSgRecursive(Stage|Unstage).col"Name"=Name
dlgSgRemoteDeleteConfirm.btn"Delete"=Delete
dlgSgRemoteDeleteConfirm.fur=This will just delete the link to the remote repository.
dlgSgRemoteDeleteConfirm.hdl%1=Do you want to delete the remote repository '$1'?
dlgSgRemoteDeleteConfirm.tle=Delete Remote Repository
dlgSgRemoteFetchMore.btn"Fetch"=Fetch
dlgSgRemoteFetchMore.col"Branch"=Branch
dlgSgRemoteFetchMore.hdl=Fetch remote branches
dlgSgRemoteFetchMore.inf=Select the branches to fetch from the remote repository.
dlgSgRemoteFetchMore.tle=Fetch More
dlgSgRemoteFetchMoreNoMoreBranches.fur=All branches which are present in the remote repository are already locally present as well.
dlgSgRemoteFetchMoreNoMoreBranches.hdl=There are no more remote branches to fetch.
dlgSgRemoteFetchMoreNoMoreBranches.tle=Fetch More
dlgSgRemoteProperties.chk"Perform background Poll or Fetch"=Perform background Poll or Fetch
dlgSgRemoteProperties.edt"URL or Path"=URL or Path
dlgSgRemoteProperties.hdl=Configure remote properties
dlgSgRemoteProperties.inf=Change the URL and other properties for the remote.
dlgSgRemoteProperties.tle=Remote Properties
dlgSgRemoteSelect.edt"Remote"=Remote
dlgSgRemoteSelect.hdl=Initialize remote review database
dlgSgRemoteSelect.inf=Select the remote repository for which you want to initialize the review database.
dlgSgRemoteSelect.tle=Initialize Remote
dlgSgRemoteSetDepth.btn"Set Depth"=Set Depth
dlgSgRemoteSetDepth.edt"Depth"=Depth
dlgSgRemoteSetDepth.hdl=Set repository depth
dlgSgRemoteSetDepth.inf=Use a large number \(e.g. 100000\) to set an unlimited depth.
dlgSgRemoteSetDepth.tle=Set Depth
dlgSgRemotesAdd.btn"Add"=Add
dlgSgRemotesAdd.chk"Verify repository connection"=Verify repository connection
dlgSgRemotesAdd.edt"Name"=Name
dlgSgRemotesAdd.edt"URL or Path"=URL or Path
dlgSgRemotesAdd.hdl=Add a remote repository
dlgSgRemotesAdd.inf=Enter the URL and a short name for the remote repository.
dlgSgRemotesAdd.tle=Add Remote Repository
dlgSgRemove.btn"Remove"=Remove
dlgSgRemove.chk"Delete local files"=Delete local files
dlgSgRemove.col"Directory"=Directory
dlgSgRemove.col"Name"=Name
dlgSgRemove.hdl=Remove files from the repository
dlgSgRemove.inf=Select the files you want to remove from the repository or working tree \(stopped from tracking\).
dlgSgRemove.tle=Remove
dlgSgRenameBranch.btn"Rename"=Rename
dlgSgRenameBranch.edt"Name"=Name
dlgSgRenameBranch.hdl=Rename branch
dlgSgRenameBranch.inf%1=Enter the new name for the branch '$1'.
dlgSgRenameBranch.tle=Rename
dlgSgRenameFile.btn"Rename"=Rename
dlgSgRenameFile.edt"Path"=Path
dlgSgRenameFile.hdl=Rename the file
dlgSgRenameFile.inf=Enter the new path and name of the file.
dlgSgRenameFile.tle=Rename
dlgSgRenameRemote.btn"Rename"=Rename
dlgSgRenameRemote.edt"Name"=Name
dlgSgRenameRemote.hdl=Change the name of an existing remote
dlgSgRenameRemote.inf=Provide the new name of the selected remote.
dlgSgRenameRemote.tle=Rename Remote Repository
dlgSgRenameRepository.btn"Rename"=Rename
dlgSgRenameRepository.edt"Name"=Name
dlgSgRenameRepository.hdl=Rename repository
dlgSgRenameRepository.inf=Provide the new name for the repository. The repository directory will not be renamed.
dlgSgRenameRepository.tle=Rename
dlgSgRepositoriesSearch.btn"Start Search"=Start Search
dlgSgRepositoriesSearch.col"Path"=Path
dlgSgRepositoriesSearch.edt"Found repository \(selected ones will be remembered\)"=\
 Found repository \(selected ones will be remembered\)
dlgSgRepositoriesSearch.edt"Search In"=Search In
dlgSgRepositoriesSearch.hdl=Search existing local repositories
dlgSgRepositoriesSearch.inf=Select a root directory where the search should start and click 'Start Search''.
dlgSgRepositoriesSearch.tle=Search for Repositories
dlgSgRepositoryAddGroup.btn"Add"=Add
dlgSgRepositoryAddGroup.edt"Group Name"=Group Name
dlgSgRepositoryAddGroup.hdl=Enter the group name
dlgSgRepositoryAddGroup.inf=After having created the group, you can move repositories inside it.
dlgSgRepositoryAddGroup.tle=Add Group
dlgSgRepositoryClose.btn"Force Close"=Force Close
dlgSgRepositoryClose.fur=Note that currently running Git processes might not be interrupted.
dlgSgRepositoryClose.hdl=Do you really want to close now?
dlgSgRepositoryClose.tle=Close
dlgSgRepositoryFrameCloseWithoutPush.btn"Close Now"=Close Now
dlgSgRepositoryFrameCloseWithoutPush.chk=Don't show again
dlgSgRepositoryFrameCloseWithoutPush.fur=You have pushable commits. Maybe you want to push them before closing this window.
dlgSgRepositoryFrameCloseWithoutPush.hdl=Are you sure to close without having pushed commits?
dlgSgRepositoryFrameCloseWithoutPush.tle=Close
dlgSgRepositoryOpen.btn"Remove"=Remove
dlgSgRepositoryOpen.fur=If it is relocated, remove it and add its new location.
dlgSgRepositoryOpen.hdl%1=Do you want to remove the missing repository '$1'?
dlgSgRepositoryOpen.tle=Repository Opening
dlgSgRepositoryRemoveMultiGroup.fur=Repositories inside a removed group will be moved out of the group.
dlgSgRepositoryRemoveMultiGroup.hdl%1=Are you sure to remove $1 groups?
dlgSgRepositoryRemoveMultiRepo.fur=This will keep the repositories on disk, but just let SmartGit forget about them.
dlgSgRepositoryRemoveMultiRepo.hdl%1=Are you sure to remove $1 repositories?
dlgSgRepositoryRemoveMultiRepoMultiGroup.fur=This will keep the repositories on disk, but just let SmartGit forget about them. Repositories inside a removed group will be moved out of the group.
dlgSgRepositoryRemoveMultiRepoMultiGroup.hdl%2=Are you sure to remove $1 repositories and $2 groups?
dlgSgRepositoryRemoveMultiRepoSingleGroup.fur=This will keep the repositories on disk, but just let SmartGit forget about them. Repositories inside a removed group will be moved out of the group.
dlgSgRepositoryRemoveMultiRepoSingleGroup.hdl%2=Are you sure to remove $1 repositories and the group "$2"?
dlgSgRepositoryRemoveSingleGroup.fur=Repositories inside a removed group will be moved out of the group.
dlgSgRepositoryRemoveSingleGroup.hdl%1=Are you sure to remove the group "$1"?
dlgSgRepositoryRemoveSingleRepo.fur=This will keep the repositories on disk, but just let SmartGit forget about them.
dlgSgRepositoryRemoveSingleRepo.hdl%1=Are you sure to remove the repository "$1"?
dlgSgRepositoryRemoveSingleRepoMultiGroup.fur=This will keep the repositories on disk, but just let SmartGit forget about them. Repositories inside a removed group will be moved out of the group.
dlgSgRepositoryRemoveSingleRepoMultiGroup.hdl%2=Are you sure to remove the repository "$1" and $2 groups?
dlgSgRepositoryRemoveSingleRepoSingleGroup.fur=This will keep the repositories on disk, but just let SmartGit forget about them. Repositories inside a removed group will be moved out of the group.
dlgSgRepositoryRemoveSingleRepoSingleGroup.hdl%2=Are you sure to remove the repository "$1" and the group "$2"?
dlg(SgRepositoryRemoveMultiGroup|SgRepositoryRemoveMultiRepo|SgRepositoryRemoveMultiRepoMultiGroup|SgRepositoryRemoveMultiRepoSingleGroup|SgRepositoryRemoveSingleGroup|SgRepositoryRemoveSingleRepo|SgRepositoryRemoveSingleRepoMultiGroup|SgRepositoryRemoveSingleRepoSingleGroup).btn"Remove"=Remove
dlg(SgRepositoryRemoveMultiGroup|SgRepositoryRemoveMultiRepo|SgRepositoryRemoveMultiRepoMultiGroup|SgRepositoryRemoveMultiRepoSingleGroup|SgRepositoryRemoveSingleGroup|SgRepositoryRemoveSingleRepo|SgRepositoryRemoveSingleRepoMultiGroup|SgRepositoryRemoveSingleRepoSingleGroup).chk=Don't show again
dlg(SgRepositoryRemoveMultiGroup|SgRepositoryRemoveMultiRepo|SgRepositoryRemoveMultiRepoMultiGroup|SgRepositoryRemoveMultiRepoSingleGroup|SgRepositoryRemoveSingleGroup|SgRepositoryRemoveSingleRepo|SgRepositoryRemoveSingleRepoMultiGroup|SgRepositoryRemoveSingleRepoSingleGroup).tle=Remove
dlgSgRepositorySettings.chk"Always fetch new commits, tags and branches from submodule"=\
 Always fetch new commits, tags and branches from submodule
dlgSgRepositorySettings.chk"Initialize new submodules"=Initialize new submodules
dlgSgRepositorySettings.chk"Prune obsolete remote tracked branches"=Prune obsolete remote tracked branches
dlgSgRepositorySettings.chk"Remember as default"=Remember as default
dlgSgRepositorySettings.chk"Sign all commits"=Sign all commits
dlgSgRepositorySettings.chk"Update registered submodules"=Update registered submodules
dlgSgRepositorySettings.edt"Email"=Email
dlgSgRepositorySettings.edt"GPG Program"=GPG Program
dlgSgRepositorySettings.edt"Name"=Name
dlgSgRepositorySettings.edt"Signing Key"=Signing Key
dlgSgRepositorySettings.edt"Submodule handling\*"=Submodule handling\*
dlgSgRepositorySettings.edt"Text File Encoding"=Text File Encoding
dlgSgRepositorySettings.hdl=Edit the effective repository settings
dlgSgRepositorySettings.inf=Here you can see and edit the effective Git settings for the user config file and the repository. To save the options as user settings, select 'Remember as default'.
dlgSgRepositorySettings.tle=Repository Settings
dlgSgResetAdv.btn"Reset"=Reset
dlgSgResetAdv.chk"Thoroughly fix line endings according to .gitattributes"=\
 Thoroughly fix line endings according to .gitattributes
dlgSgResetAdv.hdl%1=Reset to commit $1
dlgSgResetAdv.inf=Reset the current branch head to the selected commit and optionally update Index and working tree.
dlgSgResetAdv.rbt"Don't touch the Index nor the working tree - 'soft'"=\
 Don't touch the Index nor the working tree - 'soft'
dlgSgResetAdv.rbt"Reset the Index and the working tree - 'hard'"=\
 Reset the Index and the working tree - 'hard'
dlgSgResetAdv.rbt"Reset the Index and the working tree, skipping modified files - 'keep'"=\
 Reset the Index and the working tree, skipping modified files - 'keep'
dlgSgResetAdv.rbt"Reset the Index and the working tree, skipping working tree modified files - 'merge'"=\
 Reset the Index and the working tree, skipping working tree modified files - 'merge'
dlgSgResetAdv.rbt"Reset the Index but not the working tree - 'mixed'"=\
 Reset the Index but not the working tree - 'mixed'
dlgSgResetAdv.tle=Reset
dlgSgResetConfirm.btn"Reset"=Reset
dlgSgResetConfirm.fur=Current staged and local changes will be lost!
dlgSgResetConfirm.hdl%1=Are you sure to reset the HEAD to commit $1?
dlgSgResetConfirm.tle=Reset
dlgSgResolve.btn"Resolve"=Resolve
dlgSgResolve.chk"Stage file \(reset conflict state\)"=Stage file \(reset conflict state\)
dlgSgResolve.edt"Content"=Content
dlgSgResolve.hdl=Resolve Conflict
dlgSgResolve.inf=Select which content to use for the resolved file\(s\).
dlgSgResolve.rbt"Leave as is"=Leave as is
dlgSgResolve.rbt"Open Conflict Solver"=Open Conflict Solver
dlgSgResolve.rbt"Set to $1 \(\"ours\", $2\)"=Set to $1 \("ours", $2\)
dlgSgResolve.rbt"Set to $1 \(\"theirs\", $2\)"=Set to $1 \("theirs", $2\)
dlgSgResolve.rbt"Set to rebase target \(\"theirs\", $1\)"=\
 Set to rebase target \("theirs", $1\)
dlgSgResolve.rbt"Set to rebased branch '$1' \(\"ours\", $2\)"=\
 Set to rebased branch '$1' \("ours", $2\)
dlgSgResolve.tle=Resolve
dlgSgResolveSubmodule.btn"Resolve"=Resolve
dlgSgResolveSubmodule.hdl=Resolve Conflict
dlgSgResolveSubmodule.inf=Select to which submodule commit you want to resolve.
dlgSgResolveSubmodule.rbt"Check out and set submodule pointer to 'theirs' version"=\
 Check out and set submodule pointer to 'theirs' version
dlgSgResolveSubmodule.rbt"Leave submodule pointer as is"=Leave submodule pointer as is
dlgSgResolveSubmodule.tle=Resolve
dlgSgRevealCommitLocalOrTracked.btn"Reveal Local"=Reveal Local
dlgSgRevealCommitLocalOrTracked.btn"Reveal Tracked"=Reveal Tracked
dlgSgRevealCommitLocalOrTracked.chk=Always reveal local branch
dlgSgRevealCommitLocalOrTracked.fur%2=Select whether to reveal '$1' or '$2'.
dlgSgRevealCommitLocalOrTracked.hdl=Do you want to reveal the local or the tracked branch?
dlgSgRevealCommitLocalOrTracked.tle=Reveal Commit
dlgSgRevertAndCommitConfirmSingle.btn"Revert && Commit"=Revert && Commit
dlgSgRevertAndCommitConfirmSingle.btn"Revert"=Revert
dlgSgRevertAndCommitConfirmSingle.fur=This will undo the changes introduced with the selected commit.
dlgSgRevertAndCommitConfirmSingle.hdl=Do you want to revert the selected commit?
dlgSgRevertAndCommitConfirmSingle.tle=Revert
dlgSgRevertInProgress.fur=You have to finish the Revert before you can continue. To finish the Revert use Commit, to abort use Discard.
dlgSgRevertInProgress.hdl=There is currently a Revert in progress.
dlgSgRevertInProgress.tle=Revert
dlgSgRevertNotAllConflictsResolved.chk=Don't show again
dlgSgRevertNotAllConflictsResolved.fur=You may need to resolve the conflicts before proceeding.
dlgSgRevertNotAllConflictsResolved.hdl=Reverting failed because of conflicts.
dlgSgRevertNotAllConflictsResolved.tle=Revert
dlgSgReviewCommentAdd.btn"Add"=Add
dlgSgReviewCommentAdd.hdl=Add comment
dlgSgReviewCommentAdd.tle=Add Comment
dlgSgReviewCommentEdit.btn"Edit"=Edit
dlgSgReviewCommentEdit.hdl=Edit comment
dlgSgReviewCommentEdit.tle=Edit Comment
dlgSgReviewCommentReply.btn"Reply"=Reply
dlgSgReviewCommentReply.hdl=Reply to selected comment
dlgSgReviewCommentReply.tle=Reply To Comment
dlgSgReviewComment(Add|Edit|Reply).edt"Text"=Text
dlgSgReviewComment(Add|Edit|Reply).inf=Enter the text of the comment.
dlgSgReviewConfigureDisposeDatabase.btn"Dispose"=Dispose
dlgSgReviewConfigureDisposeDatabase.fur=This will disable the Reviewing system and unpushed local data will be lost.
dlgSgReviewConfigureDisposeDatabase.hdl=Do you really want to dispose all local review data?
dlgSgReviewConfigureDisposeDatabase.tle=Dispose Database
dlgSgReviewConfigureIntializeNew.btn"Initialize"=Initialize
dlgSgReviewConfigureIntializeNew.fur=This will create a new Review database in the current repository which may be pushed to other remotes later.
dlgSgReviewConfigureIntializeNew.hdl=Do you want to initialize a new Review database?
dlgSgReviewConfigureIntializeNew.tle=Configure Review System
dlgSgReviewConfigureWhat.btn"Dispose Database"=Dispose Database
dlgSgReviewConfigureWhat.btn"Edit Users"=Edit Users
dlgSgReviewConfigureWhat.btn"Initialize a Remote"=Initialize a Remote
dlgSgReviewConfigureWhat.fur=The user database allows to define aliases \(e.g. @mike\) that make addressing teammates easier in review comments.
dlgSgReviewConfigureWhat.hdl=Select what you want to configure.
dlgSgReviewConfigureWhat.tle=Configure Review Database
dlgSgReviewPullRequestClose.edt"Comment"=Comment
dlgSgReviewPullRequestClose.hdl=Close Pull Request
dlgSgReviewPullRequestClose.inf=Enter the comment which will be logged when closing the pull request.
dlgSgReviewPullRequestClose.tle=Close Pull Request
dlgSgReviewPullRequestCreate.btn"Create"=Create
dlgSgReviewPullRequestCreate.edt"Assignees"=Assignees
dlgSgReviewPullRequestCreate.edt"Message"=Message
dlgSgReviewPullRequestCreate.err"Unknown user '$1'."=Unknown user '$1'.
dlgSgReviewPullRequestCreate.hdl=Create a Pull Request
dlgSgReviewPullRequestCreate.inf=A Pull Request suggests the integration of one branch into another.
dlgSgReviewPullRequestCreate.lbl"The message will be displayed for the pull request node and will be the default commit message when integrating the pull request."=\
 The message will be displayed for the pull request node and will be the default commit message when integrating the pull request.
dlgSgReviewPullRequestCreate.lbl"The pull request will be highlighted to those users which are listed as assignees."=\
 The pull request will be highlighted to those users which are listed as assignees.
dlgSgReviewPullRequestCreate.tle=Create Pull Request
dlgSgReviewPullRequestState.btn"Assign"=Assign
dlgSgReviewPullRequestState.edt"Assignees"=Assignees
dlgSgReviewPullRequestState.edt"Comment"=Comment
dlgSgReviewPullRequestState.err"Unknown user '$1'."=Unknown user '$1'.
dlgSgReviewPullRequestState.hdl=Assign Pull Request
dlgSgReviewPullRequestState.inf=Enter the user\(s\) to which the Pull Request should be assigned to.
dlgSgReviewPullRequestState.tle=Assign
dlgSgReviewUserAddEdit.edt"Aliases"=Aliases
dlgSgReviewUserAddEdit.edt"Contact URI"=Contact URI
dlgSgReviewUserAddEdit.edt"Email"=Email
dlgSgReviewUserAddEdit.edt"Name"=Name
dlgSgReviewUserAddEdit.err"Email address is not valid."=Email address is not valid.
dlgSgReviewUserAddEdit.err"Enter at least one alias."=Enter at least one alias.
dlgSgReviewUserAddEdit.hdl=Edit User
dlgSgReviewUserAddEdit.inf=Enter the user's name and email address \(as used for Git\), one or more space- or comma-separated aliases and optional contact details.
dlgSgReviewUserAddEdit.lbl"Aliases have to be alphanumeric and can be used in comments, like '@bob please check'."=\
 Aliases have to be alphanumeric and can be used in comments, like '@bob please check'.
dlgSgReviewUserAddEdit.lbl"Contact URIs are the primary way to contact users through SmartGit, e.g. 'mailto:bob@office.com' or 'skype:bob?chat'."=\
 Contact URIs are the primary way to contact users through SmartGit, e.g. 'mailto:bob@office.com' or 'skype:bob?chat'.
dlgSgReviewUserAddEdit.tle=Edit
dlgSgReviewUsersEdit.btn"Add"=Add
dlgSgReviewUsersEdit.btn"Edit"=Edit
dlgSgReviewUsersEdit.btn"Import"=Import
dlgSgReviewUsersEdit.btn"Remove"=Remove
dlgSgReviewUsersEdit.col"Aliases"=Aliases
dlgSgReviewUsersEdit.col"Email"=Email
dlgSgReviewUsersEdit.col"Name"=Name
dlgSgReviewUsersEdit.hdl=Configure review database users
dlgSgReviewUsersEdit.inf=Users can have aliases which are used in comment texts and they have optional contact details.
dlgSgReviewUsersEdit.tle=Configure Users
dlgSgSelectBranch.edt"Tracked Branch"=Tracked Branch
dlgSgSelectBranch.hdl=Select tracked branch
dlgSgSelectBranch.inf%1=Select the branch which should be tracked by '$1'.
dlgSgSelectBranch.tle=Set Tracked Branch
dlgSgSetup.btn"< Back"=< Back
dlgSgSetup.btn"Configure Proxy"=Configure Proxy
dlgSgSetup.btn"Exit"=Exit
dlgSgSetup.btn"Finish"=Finish
dlgSgSetup.btn"Next >"=Next >
dlgSgSetup.chk"Automatically send 'crash footprints' after an internal error has occurred"=\
 Automatically send 'crash footprints' after an internal error has occurred
dlgSgSetup.chk"I understand and agree to all terms and conditions of the"=\
 I understand and agree to all terms and conditions of the
dlgSgSetup.chk"Use gravatar.com to show images for the users"=\
 Use gravatar.com to show images for the users
dlgSgSetup.edt"Email"=Email
dlgSgSetup.edt"Git Executable"=Git Executable
dlgSgSetup.edt"Hg Executable"=Hg Executable
dlgSgSetup.edt"License File"=License File
dlgSgSetup.edt"Repository search"=Repository search
dlgSgSetup.edt"User Name"=User Name
dlgSgSetup.inf"Decide whether you prefer a Commits \(Log History\) or Working Tree centric SmartGit main window. You can change this option later in the preferences."=\
 Decide whether you prefer a Commits \(Log History\) or Working Tree centric SmartGit main window. You can change this option later in the preferences.
dlgSgSetup.inf"If you are using SSH to connect to other Git repositories, select what SSH client to use. You can change it later in the Preferences."=\
 If you are using SSH to connect to other Git repositories, select what SSH client to use. You can change it later in the Preferences.
dlgSgSetup.inf"Please review the following privacy options. gravatar.com can be used to show images of committers that they have uploaded there."=\
 Please review the following privacy options. gravatar.com can be used to show images of committers that they have uploaded there.
dlgSgSetup.inf"Please wait a few moments while searching for a Git or Hg installation."=\
 Please wait a few moments while searching for a Git or Hg installation.
dlgSgSetup.inf"User name and email will be stored as part of your commits. Here you can configure the default values which are stored in .gitconfig and .hgrc \(or mercurial.ini\)."=\
 User name and email will be stored as part of your commits. Here you can configure the default values which are stored in .gitconfig and .hgrc \(or mercurial.ini\).
dlgSgSetup.inf"Welcome to SmartGit! Confirm that you are accepting the license agreement and whether your usage will be commercial or not."=\
 Welcome to SmartGit! Confirm that you are accepting the license agreement and whether your usage will be commercial or not.
dlgSgSetup.lbl"Please help to improve SmartGit's quality by automatically sending 'crash footprints' which do not contain any sensitive information. You can change this option later in the preferences.\n\nA 'crash footprint' contains details about your machine \(e.g. version of operating system\), SmartGit's version/build number, the JVM state and where the internal error occurred.\n\nIt contains NO POTENTIALLY SENSITIVE INFORMATION like user names, email addresses, file contents, file paths or server names."=\
 Please help to improve SmartGit's quality by automatically sending 'crash footprints' which do not contain any sensitive information. You can change this option later in the preferences.\n\nA 'crash footprint' contains details about your machine \(e.g. version of operating system\), SmartGit's version/build number, the JVM state and where the internal error occurred.\n\nIt contains NO POTENTIALLY SENSITIVE INFORMATION like user names, email addresses, file contents, file paths or server names.
dlgSgSetup.lbl"You confirm that you will use SmartGit solely for non-commercial purposes."=\
 You confirm that you will use SmartGit solely for non-commercial purposes.
dlgSgSetup.lbl"You have purchased a SmartGit license and are eligible to use SmartGit for both commercial and non-commercial purposes."=\
 You have purchased a SmartGit license and are eligible to use SmartGit for both commercial and non-commercial purposes.
dlgSgSetup.lbl"You may try SmartGit free of charge for 30 days."=\
 You may try SmartGit free of charge for 30 days.
dlgSgSetup.rbt"Commits \(Log History\)"=Commits \(Log History\)
dlgSgSetup.rbt"Free SmartGit evaluation for commercial use"=\
 Free SmartGit evaluation for commercial use
dlgSgSetup.rbt"Non-commercial use only \(most features, no support\)"=\
 Non-commercial use only \(most features, no support\)
dlgSgSetup.rbt"Registered user, commercial use \(all features, support\)"=\
 Registered user, commercial use \(all features, support\)
dlgSgSetup.rbt"Use SmartGit as SSH client"=Use SmartGit as SSH client
dlgSgSetup.rbt"Use system SSH client"=Use system SSH client
dlgSgSetup.rbt"Working Tree"=Working Tree
dlgSgSetup.tle=Setup SmartGit
dlgSgShowLocalChanges.btn"Compare"=Compare
dlgSgShowLocalChanges.hdl=File preview.html.erb modified in Index and working tree
dlgSgShowLocalChanges.inf=Select the file states to compare.
dlgSgShowLocalChanges.rbt"HEAD vs. Index"=HEAD vs. Index
dlgSgShowLocalChanges.rbt"HEAD vs. Working Tree"=HEAD vs. Working Tree
dlgSgShowLocalChanges.rbt"Index vs. Working Tree"=Index vs. Working Tree
dlgSgShowLocalChanges.tle=Show Changes
dlgSgSshCredentials.btn"Login"=Login
dlgSgSshCredentials.chk"Store passphrase"=Store passphrase
dlgSgSshCredentials.chk"Store password"=Store password
dlgSgSshCredentials.edt"Authentication Type"=Authentication Type
dlgSgSshCredentials.edt"Passphrase"=Passphrase
dlgSgSshCredentials.edt"Password"=Password
dlgSgSshCredentials.edt"Private Key File"=Private Key File
dlgSgSshCredentials.hdl=SSH Credentials
dlgSgSshCredentials.inf=Provide the credentials for authenticating to the SSH server 'git' as user 'root'.
dlgSgSshCredentials.rbt"Password"=Password
dlgSgSshCredentials.rbt"Private Key"=Private Key
dlgSgSshCredentials.tle=SSH Authentication
dlgSgSshCredentials.wrn"$1"=$1
dlgSgStageNoFilesFound.fur=Could not find files with modified working tree, untracked or missing files.
dlgSgStageNoFilesFound.hdl=No files found that could be staged.
dlgSgStageNoFilesFound.tle=Stage
dlgSgStashAll.btn"+ Keep Index"=+ Keep Index
dlgSgStashAll.btn"+ Keep Working Tree"=+ Keep Working Tree
dlgSgStashAll.btn"Stash All"=Stash All
dlgSgStashAll.btn"Stash Selection"=Stash Selection
dlgSgStashAll.edt"Message"=Message
dlgSgStashAll.hdl=Stash Index and Working Tree changes
dlgSgStashAll.inf=The saved stash can be applied later. By default, Index and Working Tree are cleaned, but you may keep the Index or both.
dlgSgStashAll.tle=Save Stash
dlgSgStashApply.btn"Apply && Drop"=Apply && Drop
dlgSgStashApply.btn"Apply"=Apply
dlgSgStashApply.chk"Restore Index"=Restore Index
dlgSgStashApply.hdl"Apply a previously saved stash"=Apply a previously saved stash
dlgSgStashApply.hdl"Apply the latest saved stash"=Apply the latest saved stash
dlgSgStashApply.inf=Decide how to apply the stash to the Index or working tree.
dlgSgStashApply.tle=Apply Stash
dlgSgStashApplyWithoutRestoringIndex.btn"Try Without Restoring Index"=Try Without Restoring Index
dlgSgStashApplyWithoutRestoringIndex.fur=Restoring the index failed while applying the patch.
dlgSgStashApplyWithoutRestoringIndex.hdl=Should the stash been applied without restoring the index?
dlgSgStashApplyWithoutRestoringIndex.tle=Apply Stash
dlgSgStashOnDemandConfirmation.btn"Discard"=Discard
dlgSgStashOnDemandConfirmation.btn"Save Stash"=Save Stash
dlgSgStashOnDemandConfirmation.chk=Automatically save stash
dlgSgStashOnDemandConfirmation.fur=Please either select to save them as a stash for later manual re-applying or discard them.
dlgSgStashOnDemandConfirmation.hdl=What to do with the working tree or Index changes?
dlgSgStashOnDemandConfirmation.tle=Reset
dlgSgStashOnDemandLocalChangesCantBeReapplied.fur=Once you have concluded the Pull, you should manually apply the latest stash to get your local changes back into the working tree.
dlgSgStashOnDemandLocalChangesCantBeReapplied.hdl=Your local changes have been stashed away, but could not be reapplied.
dlgSgStashOnDemandLocalChangesCantBeReapplied.tle=Pull
dlgSgStashRename.btn"Rename"=Rename
dlgSgStashRename.edt"Message"=Message
dlgSgStashRename.hdl=Rename Stash
dlgSgStashRename.inf=Enter the new message for the stash
dlgSgStashRename.tle=Rename
dlgSgStashesDropConfirm.btn"Drop Stash"=Drop Stash
dlgSgStashesDropConfirm.fur=The stashed changes will be lost.
dlgSgStashesDropConfirm.hdl=Do you want to drop the selected stash?
dlgSgStashesDropConfirm.tle=Drop Stash
dlgSgSubmoduleDeinitConfirm.btn"Deinit"=Deinit
dlgSgSubmoduleDeinitConfirm.fur=The submodule will be skipped from the working tree. To get rid from the \(remote\) repository, you have to use Unregister instead.
dlgSgSubmoduleDeinitConfirm.hdl%1=Do you want to deinit submodule '$1'?
dlgSgSubmoduleDeinitConfirm.tle=Deinit Submodule
dlgSgSubmoduleResetConfirm.btn"Reset"=Reset
dlgSgSubmoduleResetConfirm.fur=The corresponding commit will be checked out, so the submodule content will match the content of the registered commit.
dlgSgSubmoduleResetConfirm.hdl%1=Do you want to reset submodule '$1' to the commit registered in the repository?
dlgSgSubmoduleResetConfirm.tle=Reset Submodule
dlgSgSvnClientCertificate.btn"Login"=Login
dlgSgSvnClientCertificate.chk"Store passphrase"=Store passphrase
dlgSgSvnClientCertificate.edt"Certificate"=Certificate
dlgSgSvnClientCertificate.edt"Passphrase"=Passphrase
dlgSgSvnClientCertificate.hdl=Client Certificate
dlgSgSvnClientCertificate.inf%1=Provide the client certificate for authentication to the SVN repository '$1'.
dlgSgSvnClientCertificate.tle=SVN Authentication
dlgSgSvnClientCertificate.wrn"Authentication to the SVN repository '$1' failed with error: $2"=\
 Authentication to the SVN repository '$1' failed with error: $2'
dlgSgSvnSslFingerprintChanged.btn"Accept"=Accept
dlgSgSvnSslFingerprintChanged.btn"Reject"=Reject
dlgSgSvnSslFingerprintChanged.edt"MD5 fingerprint"=MD5 fingerprint
dlgSgSvnSslFingerprintChanged.edt"SHA fingerprint"=SHA fingerprint
dlgSgSvnSslFingerprintChanged.edt"Server"=Server
dlgSgSvnSslFingerprintChanged.lbl"The server fingerprint has changed! Is the change correct?"=\
 The server fingerprint has changed! Is the change correct?
dlgSgSvnSslFingerprintChanged.lbl"This might indicate a security problem! When in doubt, contact your server administrator."=\
 This might indicate a security problem! When in doubt, contact your server administrator.
dlgSgSvnSslFingerprintChanged.tle=SVN Authentication
dlgSgSyncConfirm.btn"Synchronize"=Synchronize
dlgSgSyncConfirm.chk=Don't show again
dlgSgSyncConfirm.fur=First, local changes will be pushed, then possible remote changes pulled. The advantage over a normal push is that if it fails because of remote changes, they will be pulled automatically.
dlgSgSyncConfirm.hdl=Are you sure to proceed with sync?
dlgSgSyncConfirm.tle=Synchronize
dlgSgTagAdd.btn"Add Tag && Push"=Add Tag && Push
dlgSgTagAdd.btn"Add Tag"=Add Tag
dlgSgTagAdd.edt"Annotated Tag Message"=Annotated Tag Message
dlgSgTagAdd.edt"Tag"=Tag
dlgSgTagAdd.err"The name must not end with a slash or dot."=\
 The name must not end with a slash or dot.
dlgSgTagAdd.hdl=Add tag to current HEAD commit
dlgSgTagAdd.inf=Enter the name of the tag to create. If entering a message, an annotated tag is created.
dlgSgTagAdd.tle=Add Tag
dlgSgTagAddOverwrite.btn"Overwrite"=Overwrite
dlgSgTagAddOverwrite.fur=Click 'Cancel' to choose a different tag name.
dlgSgTagAddOverwrite.hdl%1=The tag '$1' already exists. Do you want to overwrite it?
dlgSgTagAddOverwrite.tle=Add Tag
dlgSgTagDeleteConfirmSingle.btn"Delete"=Delete
dlgSgTagDeleteConfirmSingle.chk%1=Delete from remote '$1'
dlgSgTagDeleteConfirmSingle.fur=You will not be able to restore it.
dlgSgTagDeleteConfirmSingle.hdl%1=Are you sure to delete the tag '$1'?
dlgSgTagDeleteConfirmSingle.tle=Delete
dlgSgToolAdd.hdl=Add external tool
dlgSgToolAdd.tle=Add
dlgSgToolEdit.hdl=Edit external tool
dlgSgToolEdit.tle=Edit
dlgSgTool(Add|Edit).btn"Clear"=Clear
dlgSgTool(Add|Edit).chk"Can be used by the Open command"=\
 Can be used by the Open command
dlgSgTool(Add|Edit).chk"Request confirmation before invoking:"=Request confirmation before invoking:
dlgSgTool(Add|Edit).chk"Show output and wait until finished"=\
 Show output and wait until finished
dlgSgTool(Add|Edit).edt"Accelerator"=Accelerator
dlgSgTool(Add|Edit).edt"Applies To"=Applies To
dlgSgTool(Add|Edit).edt"Arguments"=Arguments
dlgSgTool(Add|Edit).edt"Command"=Command
dlgSgTool(Add|Edit).edt"Handles"=Handles
dlgSgTool(Add|Edit).edt"Menu Item Name"=Menu Item Name
dlgSgTool(Add|Edit).inf=Define the name of the tool menu item, the command which should be executed and configure its arguments. The used variables define on what selection the tool may be used.
dlgSgTool(Add|Edit).lbl"Valid wildcards are ?\u00a0\(one arbitrary character\) and \*\u00a0\(any number of arbitrary characters\). Separate multiple patterns by comma. Example:\u00a0\*.txt,\u00a0\*.html"=\
 Valid wildcards are ?\u00a0\(one arbitrary character\) and \*\u00a0\(any number of arbitrary characters\). Separate multiple patterns by comma. Example:\u00a0\*.txt,\u00a0\*.html
dlgSgTool(Add|Edit).mni"2nd Commit ID or Ref \(optional\)"=\
 2nd Commit ID or Ref \(optional\)
dlgSgTool(Add|Edit).mni"Commit ID or Ref"=Commit ID or Ref
dlgSgTool(Add|Edit).mni"Configured Text File Encoding"=Configured Text File Encoding
dlgSgTool(Add|Edit).mni"File or Directory Name"=File or Directory Name
dlgSgTool(Add|Edit).mni"File or Directory Path"=File or Directory Path
dlgSgTool(Add|Edit).mni"File or Directory URI"=File or Directory URI
dlgSgTool(Add|Edit).mni"Git Executable"=Git Executable
dlgSgTool(Add|Edit).mni"Git Installation"=Git Installation
dlgSgTool(Add|Edit).mni"Hg Executable"=Hg Executable
dlgSgTool(Add|Edit).mni"Hg Installation"=Hg Installation
dlgSgTool(Add|Edit).mni"Remote \(Push\) URL"=Remote \(Push\) URL
dlgSgTool(Add|Edit).mni"Repository Root Path"=Repository Root Path
dlgSgTool(Add|Edit).mni"Selection File"=Selection File
dlgSgTool(Add|Edit).mni"Show Directory Selection Dialog"=Show Directory Selection Dialog
dlgSgTool(Add|Edit).mni"Show Open File Dialog"=Show Open File Dialog
dlgSgTool(Add|Edit).mni"Show Save File Dialog"=Show Save File Dialog
dlgSgTool(Add|Edit).mni"SmartGit Installation"=SmartGit Installation
dlgSgTool(Add|Edit).rbt"Both"=Both
dlgSgTool(Add|Edit).rbt"Directories"=Directories
dlgSgTool(Add|Edit).rbt"Files"=Files
dlgSgTool(Add|Edit).rbt"Refs"=Refs
dlgSgTool(Add|Edit).rbt"SHAs"=SHAs
dlgSgUndoLastCommitConfirm.btn"Undo"=Undo
dlgSgUndoLastCommitConfirm.fur"Message: $1"=Message: $1
dlgSgUndoLastCommitConfirm.fur"Undoing an already pushed commit might cause serious problems!\n\nMessage: $1"=\
 Undoing an already pushed commit might cause serious problems!\n\nMessage: $1
dlgSgUndoLastCommitConfirm.hdl=Are you sure to undo the last local commit?
dlgSgUndoLastCommitConfirm.tle=Undo Last Commit
dlgSgUnstageNoFilesFound.fur=Could not find files with staged changes.
dlgSgUnstageNoFilesFound.hdl=No files found that could be unstaged.
dlgSgUnstageNoFilesFound.tle=Unstage
dlgSgWelcome.chk"Show this dialog if no repository was opened"=\
 Show this dialog if no repository was opened
dlgSgWelcome.hdl=What do you want to do?
dlgSgWelcome.inf=Select whether to open a new, local repository, clone a \(remote\) repository or open an existing repository.
dlgSgWelcome.rbt"Add an existing local or create a new repository"=\
 Add an existing local or create a new repository
dlgSgWelcome.rbt"Clone existing repository"=Clone existing repository
dlgSgWelcome.rbt"Reopen previously used repository:"=Reopen previously used repository:
dlgSgWelcome.tle=Welcome to SmartGit
dlgSgWorktreeAdd.edt"Branch"=Branch
dlgSgWorktreeAdd.edt"Directory"=Directory
dlgSgWorktreeAdd.hdl=Create another worktree from this repository
dlgSgWorktreeAdd.inf=Select the branch and directory to use for the new worktree.
dlgSgWorktreeAdd.tle=Add Worktree
dlgSgWorktreePruneNoWorktree.fur=All your worktrees are still available.
dlgSgWorktreePruneNoWorktree.hdl=No worktree to prune.
dlgSgWorktreePruneNoWorktree.tle=Prune Obsolete Worktrees
dlgShPushTrackingLocalSvnBranches.btn"Push as New"=Push as New
dlgShPushTrackingLocalSvnBranches.btn"Push onto Existing"=Push onto Existing
dlgShPushTrackingLocalSvnBranches.fur=You are going to push local branches back to the SVN repository. These branches may either be pushed as new branches or onto their existing SVN counterparts \(recommended in most cases\).
dlgShPushTrackingLocalSvnBranches.hdl=Do you want to push local branches as new SVN branches?
dlgShPushTrackingLocalSvnBranches.tle=Push
edt"Search For"=Search For
pop"$1 succeeded."=$1 succeeded.
pop"Command $1 has been aborted."=Command $1 has been aborted.
pop"Modify the previous commit and commit."=\
 Modify the previous commit and commit.
pop"No more changes."=No more changes.
pop"Select the remote to rename."=Select the remote to rename.
pop"Select the stash to rename."=Select the stash to rename.
pop"There is no action available for this drop operation."=\
 There is no action available for this drop operation.
pop"Unstage unwanted changes for the 1st commit, and commit."=\
 Unstage unwanted changes for the 1st commit, and commit.
wndAnnotate.edt"Commit"=Commit
wndAnnotate.edt"Highlight"=Highlight
wndAnnotate.edt"View Commit"=View Commit
wndAnnotate.mniCommit-first=Go to First Commit
wndAnnotate.mniCommit-last=Go to Last Commit
wndAnnotate.mniCommit-next=Go to Next Commit
wndAnnotate.mniCommit-preceding-line=Go to Preceding Commit
wndAnnotate.mniCommit-previous=Go to Previous Commit
wndAnnotate.mniCompare=Show Changes
wndAnnotate.mniCustomize=Customize
wndAnnotate.mniEdit-copy=Copy
wndAnnotate.mniFile-close=Close
wndAnnotate.mniGoto-line=Go to Line
wndAnnotate.mniLog=Open Log
wndAnnotate.mniSearch-find=Find
wndAnnotate.mniSearch-next=Find Next
wndAnnotate.mniSearch-previous=Find Previous
wndAnnotate.mniSet-syntax=Syntax Language
wndAnnotate.mniUndo-goto=Undo Go To
wndAnnotate.mniView-settings=Settings
wndAnnotate.mniWindowHideView=Hide View
wndAnnotate.mniWindowLineHistory=Line History
wndAnnotate.mnu"Edit"=Edit
wndAnnotate.mnu"File"=File
wndAnnotate.mnu"Go To"=Go To
wndAnnotate.mnu"View"=View
wndAnnotate.rbt"Commit Index"=Commit Index
wndAnnotate.rbt"Time"=Time
wndAnnotate.tab"Document"=Document
wndAnnotate.tab"History of current line"=History of current line
wndCompare.mniView-layout-left-beside-right=Left Beside Right
wndCompare.mniView-layout-left-over-right=Left Above Right
wndCompare.tbtGoto-next-diff=Go to next change.
wndConflictSolver.mni"Apply Inner-line Difference to Middle"=Apply Inner-line Difference to Middle
wndConflictSolver.mni"Apply Line to Middle"=Apply Line to Middle
wndConflictSolver.mni"Apply Selection to Middle"=Apply Selection to Middle
wndConflictSolver.mniView-layout-all=All
wndConflictSolver.mniView-layout-left-merge=Left and Merge
wndConflictSolver.mniView-layout-left-right-above-merge=Left and Right Above Merge
wndConflictSolver.mniView-layout-right-merge=Merge and Right
wndConflictSolver.tbr"All"=All
wndConflictSolver.tbr"Base Changes"=Base Changes
wndConflictSolver.tbr"Left + Merge"=Left + Merge
wndConflictSolver.tbr"Merge + Right"=Merge + Right
wndConflictSolver.tbr"Merge Below"=Merge Below
wndConflictSolver.tbr"Next Conflict"=Next Conflict
wndConflictSolver.tbr"Prev. Conflict"=Prev. Conflict
wndConflictSolver.tbr"Take Left, Right"=Take Left, Right
wndConflictSolver.tbr"Take Right, Left"=Take Right, Left
wndConflictSolver.tbtGoto-next-conflict=Go to next conflict.
wndDeepgit.btn"Go Deeper"=Go Deeper
wndDeepgit.col"File"=File
wndDeepgit.col"Modifications"=Modifications
wndDeepgit.mniAbout=About DeepGit
wndDeepgit.mniBack=Go Back
wndDeepgit.mniEdit-copy=Copy
wndDeepgit.mniExtendLineToBlock=Extend Lines To Blocks
wndDeepgit.mniFile-close=Close
wndDeepgit.mniFilterAddSelection=Add Selection to Filter
wndDeepgit.mniFilterReset=Reset Filter
wndDeepgit.mniFilterSetSelection=Set Selection as Filter
wndDeepgit.mniFollowRenames=Follow Renames
wndDeepgit.mniForward=Go Forward
wndDeepgit.mniGoto-line=Go to Line
wndDeepgit.mniHighlightBlameChanges=Highlight Changes of Current Blame Commit
wndDeepgit.mniHighlightOriginChanges=Highlight Changes of Current Origin Commit
wndDeepgit.mniIgnoreWhitespaceOnlyChanges=Ignore Whitespace Changes
wndDeepgit.mniLicenseAgreement=License Agreement
wndDeepgit.mniNextChange=Next Change
wndDeepgit.mniOpenFileLog=Open File Log
wndDeepgit.mniOpenRepositoryLog=Open Repository Log
wndDeepgit.mniOptimizeCreationOrigins=Optimize 'Appeared Here' Origins
wndDeepgit.mniPerspectiveBlameOrigin=Blame+Origins Perspective
wndDeepgit.mniPerspectiveBlameSimple=Blame Perspective
wndDeepgit.mniPerspectiveCommit=Log Perspective
wndDeepgit.mniPerspectiveOrigins=Origins Perspective
wndDeepgit.mniPreviousChange=Previous Change
wndDeepgit.mniResetInlineHelp=Reshow All Inline Help
wndDeepgit.mniSearch-find=Find
wndDeepgit.mniSearch-next=Find Next
wndDeepgit.mniSearch-previous=Find Previous
wndDeepgit.mniSetEncoding=Encoding
wndDeepgit.mniShowLineNumbers=Show Line Numbers
wndDeepgit.mniToggleLineHistory=Line History
wndDeepgit.mniViewToolbar=Show Toolbar
wndDeepgit.mniWindowHorizontalLayout=Horizontal Blame + Origins Layout
wndDeepgit.mniWindowVerticalLayout=Vertical Blame + Origins Layout
wndDeepgit.mnu"Edit"=Edit
wndDeepgit.mnu"File"=File
wndDeepgit.mnu"Go To"=Go To
wndDeepgit.mnu"Help"=Help
wndDeepgit.mnu"View"=View
wndDeepgit.tbr"Back"=Back
wndDeepgit.tbr"Blame"=Blame
wndDeepgit.tbr"Blame+Origins"=Blame+Origins
wndDeepgit.tbr"Forward"=Forward
wndDeepgit.tbr"Log"=Log
wndDeepgit.tbr"Origins"=Origins
wndDeepgit.tbtPerspectiveBlameOrigin=Find where the line originates from in cases where you need to choose from one of possible Origins.
wndDeepgit.tbtPerspectiveBlameSimple=Find where the line originates from in simple cases when there are no alternative Origins.
wndDeepgit.tbtPerspectiveCommit=Investigate Log.
wndGit.indexEditor.mni"Discard Inner-line Change"=Discard Inner-line Change
wndGit.indexEditor.mni"Discard Line"=Discard Line
wndGit.indexEditor.mni"Discard Selection"=Discard Selection
wndGit.indexEditor.mni"Unstage Inner-line Change"=Unstage Inner-line Change
wndGit.indexEditor.mni"Unstage Line"=Unstage Line
wndGit.indexEditor.mni"Unstage Selection"=Unstage Selection
wndGit.indexEditor.mniView-layout-all=All
wndGit.indexEditor.mniView-layout-left-merge=HEAD and Index
wndGit.indexEditor.mniView-layout-left-right-above-merge=HEAD and Working Tree Above Index
wndGit.indexEditor.mniView-layout-right-merge=Index and Working Tree
wndGit.indexEditor.tbtEdit-take-left=Take the left block to the merge result. Depending on the left block, this will insert, replace or delete at the merge result.
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mni"Copy Selection"=Copy Selection
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniCustomize=Customize
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniEdit-copy=Copy
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniEdit-cut=Cut
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniEdit-ignore-case-changes=Ignore Case Change for Line Comparison
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniEdit-paste=Paste
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniEdit-redo=Redo
wnd(Compare|ConflictSolver|Git.indexEditor).mniEdit-take-left=Take Left Block
wnd(Compare|ConflictSolver|Git.indexEditor).mniEdit-take-left-right=Take Left, then Right Block
wnd(Compare|ConflictSolver|Git.indexEditor).mniEdit-take-right=Take Right Block
wnd(Compare|ConflictSolver|Git.indexEditor).mniEdit-take-right-left=Take Right, then Left Block
wnd(Compare|ConflictSolver|Git.indexEditor).mniEdit-undo=Undo
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniFile-close=Close
wnd(Compare|ConflictSolver|Git.indexEditor).mniFile-export-html=Export as HTML-File
wnd(Compare|ConflictSolver|Git.indexEditor).mniFile-open-base=Open Base File Changes
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniFile-save=Save
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniGoto-line=Go to Line
wnd(Compare|ConflictSolver|Git.indexEditor).mniGoto-next-conflict=Next Conflict
wnd(Compare|ConflictSolver|Git.indexEditor).mniGoto-next-diff=Next Change
wnd(Compare|ConflictSolver|Git.indexEditor).mniGoto-previous-conflict=Previous Conflict
wnd(Compare|ConflictSolver|Git.indexEditor).mniGoto-previous-diff=Previous Change
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniSearch-find=Find
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniSearch-next=Find Next
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniSearch-previous=Find Previous
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniSearch-replace=Find and Replace
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniSet-syntax=Syntax Language
wnd(Compare|ConflictSolver|Git.indexEditor).mniShow-line-numbers=Show Line Numbers
wnd(Compare|ConflictSolver|Git.indexEditor).mniView-ignore-whitespaces-all=Ignore All Whitespaces for Line Comparison
wnd(Compare|ConflictSolver|Git.indexEditor).mniView-ignore-whitespaces-leading-trailing=Ignore Leading/Trailing Whitespaces for Line Comparison
wnd(Compare|ConflictSolver|Git.indexEditor).mniView-ignore-whitespaces-none=Ignore No Whitespace for Line Comparison
wnd(Compare|ConflictSolver|Git.indexEditor).mniView-refresh=Reload
wnd(Compare|ConflictSolver|Git.indexEditor).mniView-remember-as-default=Remember as Default
wnd(Compare|ConflictSolver|Git.indexEditor).mniView-settings=Settings
wnd(Compare|ConflictSolver|Git.indexEditor).mniView-show-current-line-control=Show Long Current Lines
wnd(Compare|ConflictSolver|Git.indexEditor).mniView-synchronize-scrolling=Synchronize Scrolling
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mnu"Edit"=Edit
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mnu"File"=File
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mnu"Go To"=Go To
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mnu"View"=View
wnd(Compare|ConflictSolver|Git.indexEditor).tbr"Next Change"=Next Change
wnd(Compare|ConflictSolver|Git.indexEditor).tbr"Prev. Change"=Prev. Change
wnd(Compare|ConflictSolver|Git.indexEditor).tbr"Reload"=Reload
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).tbr"Save"=Save
wnd(Compare|ConflictSolver|Git.indexEditor).tbr"Take Left"=Take Left
wnd(Compare|ConflictSolver|Git.indexEditor).tbr"Take Right"=Take Right
wndLog.btn"Abort"=Abort
wndLog.btn"Commit"=Commit
wndLog.btn"Continue"=Continue
wndLog.btn"Mark HEAD as Bad"=Mark HEAD as Bad
wndLog.btn"Mark HEAD as Good"=Mark HEAD as Good
wndLog.chk"Amend last commit instead of creating new one"=\
 Amend last commit instead of creating new one
wndLog.col"Assignee"=Assignee
wndLog.col"Author"=Author
wndLog.col"Copied From"=Copied From
wndLog.col"Date"=Date
wndLog.col"Modification"=Modification
wndLog.col"Name"=Name
wndLog.col"Path"=Path
wndLog.col"Relative Directory"=Relative Directory
wndLog.col"Renamed Path"=Renamed Path
wndLog.col"State"=State
wndLog.col"Text"=Text
wndLog.mni"<no entry>"=<no entry>
wndLog.mni"Abbreviated"=Abbreviated
wndLog.mni"Add GitHub Comment"=Add GitHub Comment
wndLog.mni"Add GitLab Comment"=Add GitLab Comment
wndLog.mni"Add Review Comment"=Add Review Comment
wndLog.mni"All"=All
wndLog.mni"Apply Patch"=Apply Patch
wndLog.mni"Assign"=Assign
wndLog.mni"Author Abbreviated"=Author Abbreviated
wndLog.mni"Author with Full Name and Email"=\
 Author with Full Name and Email
wndLog.mni"Author with Full Name"=Author with Full Name
wndLog.mni"Author"=Author
wndLog.mni"Branch Coloring"=Branch Coloring
wndLog.mni"Branches and Tags"=Branches and Tags
wndLog.mni"Branching:"=Branching:
wndLog.mni"Cancel"=Cancel
wndLog.mni"Check Out"=Check Out
wndLog.mni"Checkout"=Checkout
wndLog.mni"Cherry-Pick Commits to $1"=Cherry-Pick Commits to $1
wndLog.mni"Clear History"=Clear History
wndLog.mni"Close"=Close
wndLog.mni"Coloring:"=Coloring:
wndLog.mni"Columns"=Columns
wndLog.mni"Columns:"=Columns:
wndLog.mni"Comment $1"=Comment $1
wndLog.mni"Committer"=Committer
wndLog.mni"Compact Author"=Compact Author
wndLog.mni"Copy ID"=Copy ID
wndLog.mni"Copy Selection"=Copy Selection
wndLog.mni"Copy URL"=Copy URL
wndLog.mni"Copy"=Copy
wndLog.mni"Create Merge Request"=Create Merge Request
wndLog.mni"Create Pull Request"=Create Pull Request
wndLog.mni"Cut"=Cut
wndLog.mni"Date"=Date
wndLog.mni"Default Coloring"=Default Coloring
wndLog.mni"Delete 'Comment $1'"=Delete 'Comment $1'
wndLog.mni"Delete"=Delete
wndLog.mni"Diff Tool"=Diff Tool
wndLog.mni"Discard Hunk"=Discard Hunk
wndLog.mni"Discard Inner-line Change"=Discard Inner-line Change
wndLog.mni"Discard Line"=Discard Line
wndLog.mni"Discard Selection"=Discard Selection
wndLog.mni"Drop Local Data"=Drop Local Data
wndLog.mni"Edit 'Comment $1'"=Edit 'Comment $1'
wndLog.mni"Edit in Index Editor"=Edit in Index Editor
wndLog.mni"Edit"=Edit
wndLog.mni"Fast-Forward Merge"=Fast-Forward Merge
wndLog.mni"Fetch Merge Request"=Fetch Merge Request
wndLog.mni"Fetch Pull Request"=Fetch Pull Request
wndLog.mni"File Content \(very expensive\)"=File Content \(very expensive\)
wndLog.mni"File \(expensive\)"=File \(expensive\)
wndLog.mni"Follow All Parents"=Follow All Parents
wndLog.mni"Follow Only First Parent"=Follow Only First Parent
wndLog.mni"Forget Pattern"=Forget Pattern
wndLog.mni"Forget"=Forget
wndLog.mni"Format Patch"=Format Patch
wndLog.mni"Full Author With Email"=Full Author With Email
wndLog.mni"Full Author"=Full Author
wndLog.mni"Full Name With Email"=Full Name With Email
wndLog.mni"Full Name"=Full Name
wndLog.mni"Git Config"=Git Config
wndLog.mni"Git-LFS Version"=Git-LFS Version
wndLog.mni"ID"=ID
wndLog.mni"Integrate"=Integrate
wndLog.mni"Jump To"=Jump To
wndLog.mni"Mark as Bad"=Mark as Bad
wndLog.mni"Mark as Good"=Mark as Good
wndLog.mni"Merge Directly To"=Merge Directly To
wndLog.mni"Merge Merge Request"=Merge Merge Request
wndLog.mni"Merge Pull Request"=Merge Pull Request
wndLog.mni"Merge"=Merge
wndLog.mni"Message"=Message
wndLog.mni"Move Commit"=Move Commit
wndLog.mni"Move and Squash Commit"=Move and Squash Commit
wndLog.mni"Neither"=Neither
wndLog.mni"Only If Changed"=Only If Changed
wndLog.mni"Only Selected"=Only Selected
wndLog.mni"Open in Browser"=Open in Browser
wndLog.mni"Open in Web Browser"=Open in Web Browser
wndLog.mni"Paste"=Paste
wndLog.mni"Please select Index or Working Tree."=\
 Please select Index or Working Tree.
wndLog.mni"Print Git Version"=Print Git Version
wndLog.mni"Pull, then Push"=Pull, then Push
wndLog.mni"Push To"=Push To
wndLog.mni"Push"=Push
wndLog.mni"Push, then Pull"=Push, then Pull
wndLog.mni"Quick Stash All"=Quick Stash All
wndLog.mni"Quick Stash Selection"=Quick Stash Selection
wndLog.mni"Rebase $1 commit from $2 to $3"=\
 Rebase $1 commit from $2 to $3
wndLog.mni"Rebase $1 commits from $2 to $3"=\
 Rebase $1 commits from $2 to $3
wndLog.mni"Regular Expressions"=Regular Expressions
wndLog.mni"Reject Pull Request"=Reject Pull Request
wndLog.mni"Remember Pattern"=Remember Pattern
wndLog.mni"Rename"=Rename
wndLog.mni"Reorder Commits"=Reorder Commits
wndLog.mni"Reply '$1'"=Reply '$1'
wndLog.mni"Reply"=Reply
wndLog.mni"Reset HEAD to $1"=Reset HEAD to $1
wndLog.mni"Reset to Default"=Reset to Default
wndLog.mni"Retract Merge Request"=Retract Merge Request
wndLog.mni"Retract Pull Request"=Retract Pull Request
wndLog.mni"Revert $1"=Revert $1
wndLog.mni"Review"=Review
wndLog.mni"SHA"=SHA
wndLog.mni"Select from JIRA"=Select from JIRA
wndLog.mni"Set '$1' to $2"=Set '$1' to $2
wndLog.mni"Show All Refs"=Show All Refs
wndLog.mni"Show Only Selected Refs"=Show Only Selected Refs
wndLog.mni"Show Working Tree On Demand"=Show Working Tree On Demand
wndLog.mni"Show Working Tree Permanently"=Show Working Tree Permanently
wndLog.mni"Sort Merge Parents First"=Sort Merge Parents First
wndLog.mni"Sort Primary Parents First"=Sort Primary Parents First
wndLog.mni"Stage Hunk"=Stage Hunk
wndLog.mni"Stage Inner-line Change"=Stage Inner-line Change
wndLog.mni"Stage Line"=Stage Line
wndLog.mni"Stage Selection"=Stage Selection
wndLog.mni"Stash Selection"=Stash Selection
wndLog.mni"Template!"=Template!
wndLog.mni"Test"=Test
wndLog.mni"Toggle Hosting Provider Integration"=Toggle Hosting Provider Integration
wndLog.mni"Toggle"=Toggle
wndLog.mni"Varying Coloring"=Varying Coloring
wndLog.mniBranchesGitFlowRemoteOnly=Show remote branches in their Git-Flow sections
wndLog.mniBranchesGitFlowTracked=Show remote, tracked branches
wndLog.mniBranchesSectionize=Group tags and branches by path-like name \(foo/bar\)
wndLog.mniBranchesSectionizeCompact=Except for single items
wndLog.mniBranchesSortByName=Sort Refs by Name
wndLog.mniBranchesSortByNameReversed=Sort Refs by Name \(Numbers Reversed\)
wndLog.mniBranchesSortByTime=Sort Refs by Commit Time
wndLog.mniCompact-display=Compact Change Display
wndLog.mniEdit-ignore-case-changes=Ignore Case Change for Line Comparison
wndLog.mniFixup=Fixup
wndLog.mniIgnore-line-separators=Ignore Line-Ending Changes
wndLog.mniLogShowAllParents=Follow All Parents
wndLog.mniLogTopoFiltering=Show Graph While Filtering
wndLog.mniPreviewShowCurrentLines=Show Long Current Lines
wndLog.mniRemoteCopyUrl=Copy URL
wndLog.mniRepositorySelectObsolete=Select Obsolete Repositories
wndLog.mniRevealPrevCommit=Reveal Previous Commit
wndLog.mniRevealWorkingTree=Reveal Working Tree
wndLog.mniSet-syntax=Syntax Language
wndLog.mniShow-line-numbers=Show Line Numbers
wndLog.mniView-ignore-whitespaces-all=Ignore All Whitespaces for Line Comparison
wndLog.mniView-ignore-whitespaces-leading-trailing=Ignore Leading/Trailing Whitespaces for Line Comparison
wndLog.mniView-ignore-whitespaces-none=Ignore No Whitespace for Line Comparison
wndLog.mniView-remember-as-default=Remember as Default
wndLog.mniView-settings=Settings
wndLog.mnu"Subtree"=Subtree
wndLog.tab"Comments \($1\)"=Comments \($1\)
wndLog.tbt"Clear logging."=Clear logging.
wndLog.tbt"Commit Message History"=Commit Message History
wndLog.tbt"Hosting provider is not configured for the current repository. Go to the Preferences to add a configuration."=\
 Hosting provider is not configured for the current repository. Go to the Preferences to add a configuration.
wndLog.tbt"Options"=Options
wndLog.tbt"Reading incoming merge requests from '$1'."=\
 Reading incoming merge requests from '$1'.
wndLog.tbt"Reading repository info from '$1'."=Reading repository info from '$1'.
wndLog.tbt"Refresh information from GitLab."=Refresh information from GitLab.
wndLog.tbt"Show directories tree"=Show directories tree
wndLog.tbtAnnotate=Show a blame \(annotated\) view of the selected file.
wndLog.tbtCheckout=Check out an existing commit.
wndLog.tbtClearOutput=Clear output pane.
wndLog.tbtCommit=Commit local changes.
wndLog.tbtDelete=Delete the selected local files or directory.
wndLog.tbtDiscard=Discard local changes.
wndLog.tbtFetch=Fetch commits from a remote repository and \(optionally\) integrate them with possible local commits.
wndLog.tbtFlowContext=Finish a Git-Flow feature.
wndLog.tbtGoto-next-diff=Go to next change.
wndLog.tbtGoto-previous-diff=Go to previous change.
wndLog.tbtIndexEditor=Edit the Index state of the selected file, e.g. to decide which lines should be staged.
wndLog.tbtInvestigate=Investigate history line-wise with DeepGit.
wndLog.tbtMerge=Merge changes from other branches.
wndLog.tbtPush=Push local commits to the remote origin repository.
wndLog.tbtRebaseHeadTo=Apply the HEAD commits to the selected commit.
wndLog.tbtReset=Reset current HEAD to another commit.
wndLog.tbtRevealPrevCommit=Reveal selected commits before invoking Reveal Working Tree.
wndLog.tbtRevealWorkingTree=Reveal working tree node in graph.
wndLog.tbtStage=Store working tree files in the index to prepare the next commit.
wndLog.tbtStashApply=Reapply local changes from a stash.
wndLog.tbtStashSave=Stash current local changes.
wndLog.tbtSync=Push local commits of the current branch and pull remote changes.
wndLog.tbtUnstage=Remove staged changes from index.
wndLog.tbtViewIgnored=If selected, ignored files will be shown.
wndLog.tbtViewSkipped=If selected, skipped files will be shown.
wndLog.tbtViewStaged=If selected, files with staged \(Index\) changes and without working tree changes will be shown.
wndLog.tbtViewUnchanged=If selected, unchanged files will be shown.
wndLog.tbtViewUnchangedAssumed=If selected, files having the 'assume-unchanged' flag will be shown.
wndLog.tbtViewUnversioned=If selected, not yet version controlled files will be shown.
wndLog.tbtWindowLayoutSetMain=Switch to the Main perspective.
wndProject.btn"Abort"=Abort
wndProject.btn"Commit"=Commit
wndProject.btn"Continue"=Continue
wndProject.btn"Mark HEAD as Bad"=Mark HEAD as Bad
wndProject.btn"Mark HEAD as Good"=Mark HEAD as Good
wndProject.chk"Add 'Signed-off-by' signature"=Add 'Signed-off-by' signature
wndProject.chk"Amend last commit instead of creating new one"=\
 Amend last commit instead of creating new one
wndProject.chk"Bypass commit hook"=Bypass commit hook
wndProject.chk"Create simple commit \('squash'\)"=Create simple commit \('squash'\)
wndProject.col"Copied from"=Copied from
wndProject.col"Index State"=Index State
wndProject.col"Name"=Name
wndProject.col"Relative Directory"=Relative Directory
wndProject.col"Size"=Size
wndProject.col"State"=State
wndProject.col"Working Tree State"=Working Tree State
wndProject.mni"Clear History"=Clear History
wndProject.mni"Forget Pattern"=Forget Pattern
wndProject.mni"Forget"=Forget
wndProject.mni"Regular Expressions"=Regular Expressions
wndProject.mni"Remember Pattern"=Remember Pattern
wndProject.mni"Reorder Commits"=Reorder Commits
wndProject.mni"Reset to Default"=Reset to Default
wndProject.mni"Select from JIRA"=Select from JIRA
wndProject.mni"Select from Log"=Select from Log
wndProject.mniAdd=Add
wndProject.mniBranchClose=Close
wndProject.mniConfigureToolbar=Configure Toolbar
wndProject.mniDebugRestart=Restart
wndProject.mniFile-close=Close
wndProject.mniLogRepository=Show Log Window
wndProject.mniSelectCommittableFiles=Select Committable Files
wndProject.mniSelectDirectory=Select Directory
wndProject.mniSelectRoot=Select Repository Root
wndProject.mniSubtreeAdd=Add
wndProject.mniSubtreeMerge=Merge
wndProject.mniSubtreeReset=Reset
wndProject.mniSubtreeSplit=Split
wndProject.mniViewSeparateWtAndIndex=Separate Working Tree and Index
wndProject.mniWindowJournal=Journal
wndProject.mnu"Subtree"=Subtree
wndProject.tbr"Add"=Add
wndProject.tbtFetch=Fetch commits from a remote repository and \(optionally\) integrate them with possible local commits.
wndProject.tbtLog=Show the history for selected file or directory.
wndProject.tbtLogRepository=Show the history for the whole repository.
wndProject.tbtMerge=Merge changes from other branches.
wndProject.tbtPush=Push local commits to the remote origin repository.
wndProject.tbtRemove=Remove selected files or directories from repository.
wndProject.tbtStashSave=Stash current local changes.
wndProject.tbtViewFromSubmodules=If selected, files from submodules will be shown.
wndProject.tbtViewUnchanged=If selected, unchanged files will be shown.
wndProject.tbtViewUnchangedAssumed=If selected, files having the 'assume-unchanged' flag will be shown.
wnd(Log|Project).hnt"File Filter"=File Filter
wnd(Log|Project).lbl"$1 files hidden"=$1 files hidden
wnd(Log|Project).lblStatusBarMessage"$1"=$1
wnd(Log|Project|Compare|ConflictSolver|Git.indexEditor).lblStatusBarMessage"Ready"=Ready
wnd(Log|Project).mni"LFS"=LFS
wnd(Log|Project).mni"Move To"=Move To
wnd(Log|Project).mni"New Group"=New Group
wnd(Log|Project).mni"No Group"=No Group
wnd(Log|Project).mniAbout=About SmartGit
wnd(Log|Project).mniAnnotate=Blame
wnd(Log|Project).mniAssume-unchanged-toggle=Toggle 'Assume Unchanged'
wnd(Log|Project).mniBisectBad=Mark HEAD as Bad
wnd(Log|Project).mniBisectExit=Reset
wnd(Log|Project).mniBisectGood=Mark HEAD as Good
wnd(Log|Project).mniBisectStart=Start
wnd(Log|Project).mniBranchAbort=Abort
wnd(Log|Project).mniBranchAdd=Add Branch
wnd(Log|Project).mniBranchAddTag=Add Tag
wnd(Log|Project).mniBranchDelete=Delete
wnd(Log|Project).mniBranchRename=Rename
wnd(Log|Project).mniBranchResetTracking=Stop Tracking
wnd(Log|Project).mniBranchSetTracking=Set Tracked Branch
wnd(Log|Project).mniBranchSplit=Modify or Split Commit
wnd(Log|Project).mniCheckForLatestBuild=Check for Latest Build
wnd(Log|Project).mniCheckForNewVersion=Check for New Version
wnd(Log|Project).mniCheckout=Check Out
wnd(Log|Project).mniCherryPick=Cherry-Pick
wnd(Log|Project).mniClean=Clean Working Tree
wnd(Log|Project).mniClearOutput=Clear Output
wnd(Log|Project).mniCommit=Commit
wnd(Log|Project).mniCompareWithWorkingTree=Compare with Working Tree
wnd(Log|Project).mniConflictSolver=Conflict Solver
wnd(Log|Project).mniContactSupport=Contact Support
wnd(Log|Project).mniCopyCommitId=Copy ID
wnd(Log|Project).mniCopyCommitMessage=Copy Message
wnd(Log|Project).mniCopyName=Copy Name
wnd(Log|Project).mniCopyPath=Copy Path
wnd(Log|Project).mniCopyRelativePath=Copy Relative Path
wnd(Log|Project).mniCustomize=Customize
wnd(Log|Project).mniDebugCreateHeapDump=Create Heap Dump
wnd(Log|Project).mniDebugCreateThreadDumps=Create Periodical Thread Dumps
wnd(Log|Project).mniDebugEnableRefreshTraceLogging=Starting Tracing Refreshing
wnd(Log|Project).mniDebugLogFileMonitorEvents=Log File Monitor Events
wnd(Log|Project).mniDebugLogFileMonitorState=Log File Monitor State
wnd(Log|Project).mniDebugLogOpenRepositories=Log Open Repositories
wnd(Log|Project).mniDebugRunGc=Run GC
wnd(Log|Project).mniDelete=Delete
wnd(Log|Project).mniDiscard=Discard
wnd(Log|Project).mniEditCommitAuthor=Edit Author
wnd(Log|Project).mniEditCommitMessage=Edit Commit Message
wnd(Log|Project).mniExit=Exit
wnd(Log|Project).mniFetch=Pull
wnd(Log|Project).mniFilterCommits=Filter Commits
wnd(Log|Project).mniFilterFiles=Filter Files
wnd(Log|Project).mniFindAction=Find Command
wnd(Log|Project).mniFindObject=Find Object
wnd(Log|Project).mniFlowConfigure=Configure
wnd(Log|Project).mniFlowContext=Git-Flow
wnd(Log|Project).mniFlowFeatureFinish=Finish Feature
wnd(Log|Project).mniFlowFeatureStart=Start Feature
wnd(Log|Project).mniFlowHotfixFinish=Finish Hotfix
wnd(Log|Project).mniFlowHotfixStart=Start Hotfix
wnd(Log|Project).mniFlowIntegrateDevelop=Integrate Develop
wnd(Log|Project).mniFlowReleaseFinish=Finish Release
wnd(Log|Project).mniFlowReleaseStart=Start Release
wnd(Log|Project).mniFlowSupportStart=Start Support Branch
wnd(Log|Project).mniGoto-next-diff=Next Change
wnd(Log|Project).mniGoto-previous-diff=Previous Change
wnd(Log|Project).mniGotoChildrenCommit=Select Child Commit
wnd(Log|Project).mniGotoParentsCommit=Select Parent Commit
wnd(Log|Project).mniIgnore=Ignore
wnd(Log|Project).mniIgnoreReveal=Edit Ignore File
wnd(Log|Project).mniIncludeTrackedRemoteBranches=Include Tracked Remote Branches
wnd(Log|Project).mniIndexEditor=Index Editor
wnd(Log|Project).mniInvestigate=Investigate
wnd(Log|Project).mniLfsInstall=Install
wnd(Log|Project).mniLfsLock=Lock
wnd(Log|Project).mniLfsPrune=Prune
wnd(Log|Project).mniLfsTrack=Track
wnd(Log|Project).mniLfsUnlock=Unlock
wnd(Log|Project).mniLicenseAgreement=License Agreement
wnd(Log|Project).mniLocalGc=Run Garbage Collector
wnd(Log|Project).mniLog=Log
wnd(Log|Project).mniLogCommitsColoringBranch=Branch Coloring
wnd(Log|Project).mniLogCommitsColoringDefault=Default Coloring
wnd(Log|Project).mniLogCommitsColoringLegacy=Varying Coloring
wnd(Log|Project).mniLogCommitsColoringMerge=Mergeable Coloring
wnd(Log|Project).mniLogShowOnlyFirstParents=Show Only First Parents
wnd(Log|Project).mniLogWorkingTreeIndexOnDemand=Show Working Tree  Index On Demand
wnd(Log|Project).mniLogWorkingTreeIndexPermanent=Show Working Tree  Index Permanently
wnd(Log|Project).mniMailingList=SmartGit Website
wnd(Log|Project).mniMerge=Merge
wnd(Log|Project).mniNewWindow=New Window
wnd(Log|Project).mniOpen=Open from Working Tree
wnd(Log|Project).mniOpenDocumentation=Online Documentation
wnd(Log|Project).mniOpenRootLog=Open Root Log
wnd(Log|Project).mniOpenWorkingTree=Open Working Tree
wnd(Log|Project).mniPreferences=Preferences
wnd(Log|Project).mniPreviewCommentNext=Next Comment
wnd(Log|Project).mniPreviewCommentPrevious=Previous Comment
wnd(Log|Project).mniPush=Push
wnd(Log|Project).mniPushCommits=Push Up To
wnd(Log|Project).mniPushTo=Push To
wnd(Log|Project).mniRebaseAbort=Abort
wnd(Log|Project).mniRebaseContinue=Continue
wnd(Log|Project).mniRebaseHeadTo=Rebase HEAD To
wnd(Log|Project).mniRebaseInteractive=Rebase Interactive From
wnd(Log|Project).mniRebaseSkip=Skip
wnd(Log|Project).mniRebaseToHead=Rebase to HEAD
wnd(Log|Project).mniRefresh=Refresh
wnd(Log|Project).mniRegister=Register
wnd(Log|Project).mniRemoteAdd=Add
wnd(Log|Project).mniRemoteDelete=Delete
wnd(Log|Project).mniRemoteFetch=Fetch
wnd(Log|Project).mniRemoteFetchMore=Fetch More
wnd(Log|Project).mniRemoteProperties=Properties
wnd(Log|Project).mniRemoteRename=Rename
wnd(Log|Project).mniRemove=Remove
wnd(Log|Project).mniRename=Rename
wnd(Log|Project).mniRepositoryAdd=Add or Create
wnd(Log|Project).mniRepositoryAddGroup=Add Group
wnd(Log|Project).mniRepositoryClone=Clone
wnd(Log|Project).mniRepositoryClose=Close
wnd(Log|Project).mniRepositoryEditConfig=Repository
wnd(Log|Project).mniRepositoryEditConfigUser=User
wnd(Log|Project).mniRepositoryFavorite=Unmark as Favorite
wnd(Log|Project).mniRepositoryOpen=Open Repository
wnd(Log|Project).mniRepositoryOpenInNewWindow=Open Repository in New Window
wnd(Log|Project).mniRepositoryRemove=Remove
wnd(Log|Project).mniRepositoryRename=Rename
wnd(Log|Project).mniRepositorySearch=Search for Repositories
wnd(Log|Project).mniRepositorySettings=Settings
wnd(Log|Project).mniReset=Reset
wnd(Log|Project).mniResetAdvanced=Reset Advanced
wnd(Log|Project).mniResolve=Resolve
wnd(Log|Project).mniRevealCommit=Reveal Commit
wnd(Log|Project).mniRevealCommitExtend=Compare with Selected Commit
wnd(Log|Project).mniRevealCommitWithHead=Compare with HEAD
wnd(Log|Project).mniRevert=Revert
wnd(Log|Project).mniReviewCommentCreate=Add Comment
wnd(Log|Project).mniReviewConfigure=Configure
wnd(Log|Project).mniReviewDumpDatabase=Dump Database
wnd(Log|Project).mniReviewPullRequestCreate=Create Pull Request
wnd(Log|Project).mniReviewShowClosedPullRequests=Show Closed Pull Requests
wnd(Log|Project).mniReviewSync=Sync
wnd(Log|Project).mniSaveAs=Save As
wnd(Log|Project).mniSetDepth=Set Depth
wnd(Log|Project).mniShowChanges=Show Changes
wnd(Log|Project).mniSkipWorkTree=Toggle 'Skip Worktree'
wnd(Log|Project).mniSortCommitsAsIs=Sort Commits by Time
wnd(Log|Project).mniSortCommitsMergeParentsFirst=Sort Commits with Merge Parents first
wnd(Log|Project).mniSortCommitsPrimaryParentsFirst=Sort Commits with Primary Parents first
wnd(Log|Project).mniSquashCommits=Squash Commits
wnd(Log|Project).mniStage=Stage
wnd(Log|Project).mniStashApply=Apply Stash
wnd(Log|Project).mniStashDrop=Drop Stash
wnd(Log|Project).mniStashRename=Rename Stash
wnd(Log|Project).mniStashSave=Stash All
wnd(Log|Project).mniStashSaveSelection=Stash Selection
wnd(Log|Project).mniSubmoduleDeactivate=Deactivate
wnd(Log|Project).mniSubmoduleDeinit=Deinit
wnd(Log|Project).mniSubmoduleInit=Initialize
wnd(Log|Project).mniSubmoduleRegister=Add
wnd(Log|Project).mniSubmoduleReset=Reset
wnd(Log|Project).mniSubmoduleSync=Synchronize
wnd(Log|Project).mniSubmoduleUnregister=Unregister
wnd(Log|Project).mniSync=Synchronize
wnd(Log|Project).mniUndoLastCommit=Undo Last Commit
wnd(Log|Project).mniUnstage=Unstage
wnd(Log|Project).mniViewFromSubmodules=Show Files From Submodules
wnd(Log|Project).mniViewIgnored=Show Ignored Files
wnd(Log|Project).mniViewRecursive=Files from Subdirectories
wnd(Log|Project).mniViewRenameSource=Show Rename Source Files
wnd(Log|Project).mniViewSetAnchorCommit=Set Anchor Commit
wnd(Log|Project).mniViewSkipped=Show Skipped Files
wnd(Log|Project).mniViewStaged=Show Staged Files
wnd(Log|Project).mniViewStyleIndex=Only Index
wnd(Log|Project).mniViewStyleMixed=Mixed
wnd(Log|Project).mniViewStyleWorkingTree=Only Working Tree
wnd(Log|Project).mniViewToolBar=Show Toolbar
wnd(Log|Project).mniViewUnchanged=Show Unchanged Files
wnd(Log|Project).mniViewUnchangedAssumed=Show Assume-Unchanged Files
wnd(Log|Project).mniViewUnversioned=Show Unversioned Files
wnd(Annotate|Compare|ConflictSolver|Deepgit|Git.indexEditor|Editor|Log|Project).mniWindow-fullScreen=Full Screen
wnd(Annotate|Compare|ConflictSolver|Deepgit|Git.indexEditor|Editor|Log|Project).mniWindow-maximizeMaximize=Maximize
wnd(Annotate|Compare|ConflictSolver|Deepgit|Git.indexEditor|Editor|Log|Project).mniWindow-maximizeRestore=Restore
wnd(Annotate|Compare|ConflictSolver|Deepgit|Git.indexEditor|Editor|Log|Project).mniWindow-minimize=Minimize
wnd(Log|Project).mniWindowBranches=Branches
wnd(Log|Project).mniWindowChanges=Changes
wnd(Log|Project).mniWindowClose=Close
wnd(Log|Project).mniWindowComments=Comments
wnd(Log|Project).mniWindowCommit=Commit
wnd(Log|Project).mniWindowDebugLog=Debug Log
wnd(Log|Project).mniWindowDirectories=Repositories
wnd(Log|Project).mniWindowFiles=Files
wnd(Log|Project).mniWindowGraph=Graph
wnd(Log|Project).mniWindowHideView=Hide View
wnd(Log|Project).mniWindowLayoutSetMain=Main Perspective
wnd(Log|Project).mniWindowLayoutSetReview=Review Perspective
wnd(Annotate|Compare|ConflictSolver|Deepgit|Git.indexEditor|Editor|Log|Project).mniWindowMaximizeRestore"Maximize View"=Maximize View
wnd(Annotate|Compare|ConflictSolver|Deepgit|Git.indexEditor|Editor|Log|Project).mniWindowMaximizeRestore"Restore Maximized View"=Restore Maximized View
wnd(Log|Project).mniWindowOutput=Output
wnd(Log|Project).mniWindowWorkingTree=Show Working Tree Window
wnd(Log|Project).mniWorktreeAdd=Add Worktree
wnd(Log|Project).mniWorktreePrune=Prune Obsolete Worktrees
wnd(Log|Project).mniWorktreeRemove=Prune Obsolete Worktrees
wnd(Annotate|Compare|ConflictSolver|Deepgit|Git.indexEditor|Editor|Log|Project).mnu"< No Windows >"=< No Windows >
wnd(Log|Project).mnu"Bisect"=Bisect
wnd(Log|Project).mnu"Branch"=Branch
wnd(Log|Project).mnu"Branches"=Branches
wnd(Log|Project).mnu"Changes"=Changes
wnd(Log|Project).mnu"Commits"=Commits
wnd(Log|Project).mnu"Debug"=Debug
wnd(Log|Project).mnu"Edit Git Config"=Edit Git Config
wnd(Log|Project).mnu"Edit"=Edit
wnd(Log|Project).mnu"Git-Flow"=Git-Flow
wnd(Log|Project).mnu"Help"=Help
wnd(Log|Project).mnu"LFS"=LFS
wnd(Log|Project).mnu"Local"=Local
wnd(Log|Project).mnu"Query"=Query
wnd(Log|Project).mnu"Rebase"=Rebase
wnd(Log|Project).mnu"Remote"=Remote
wnd(Log|Project).mnu"Repositories"=Repositories
wnd(Log|Project).mnu"Repository"=Repository
wnd(Log|Project).mnu"Review"=Review
wnd(Log|Project).mnu"Submodule"=Submodule
wnd(Log|Project).mnu"Tools"=Tools
wnd(Log|Project).mnu"View"=View
wnd(Annotate|Compare|ConflictSolver|Deepgit|Git.indexEditor|Editor|Log|Project).mnu"Window"=Window
wnd(Log|Project).tab"Branches"=Branches
wnd(Log|Project).tab"Changes of $1 - $2 \($3\)"=\
 Changes of $1 - $2 \($3\)
wnd(Log|Project).tab"Changes of $1 - $2"=Changes of $1 - $2
wnd(Log|Project).tab"Changes of $1 \($2\) - $3"=\
 Changes of $1 \($2\) - $3
wnd(Log|Project).tab"Changes of $1 \($2\)"=Changes of $1 \($2\)
wnd(Log|Project).tab"Changes"=Changes
wnd(Log|Project).tab"Comments"=Comments
wnd(Log|Project).tab"Commit Message"=Commit Message
wnd(Log|Project).tab"Commit"=Commit
wnd(Log|Project).tab"Debug Log"=Debug Log
wnd(Log|Project).tab"Files \(Working Tree\)"=Files \(Working Tree\)
wnd(Log|Project).tab"Files"=Files
wnd(Log|Project).tab"Graph \(Initializing...\)"=Graph \(Initializing...\)
wnd(Log|Project).tab"Graph \(Loading...\)"=Graph \(Loading...\)
wnd(Log|Project).tab"Graph \(Running log...\)"=Graph \(Running log...\)
wnd(Log|Project).tab"Graph \(Scanning WT...\)"=Graph \(Scanning WT...\)
wnd(Log|Project).tab"Graph"=Graph
wnd(Log|Project).tab"Journal"=Journal
wnd(Log|Project).tab"Output"=Output
wnd(Log|Project).tab"Repositories"=Repositories
wnd(Log|Project).tbr"Add Tag"=Add Tag
wnd(Log|Project).tbr"Apply Stash"=Apply Stash
wnd(Log|Project).tbr"Blame"=Blame
wnd(Log|Project).tbr"Branch"=Branch
wnd(Log|Project).tbr"Check Out"=Check Out
wnd(Log|Project).tbr"Cherry-Pick"=Cherry-Pick
wnd(Log|Project).tbr"Commit"=Commit
wnd(Log|Project).tbr"Delete"=Delete
wnd(Log|Project).tbr"Discard"=Discard
wnd(Log|Project).tbr"Git-Flow"=Git-Flow
wnd(Log|Project).tbr"Index Editor"=Index Editor
wnd(Log|Project).tbr"Investigate"=Investigate
wnd(Log|Project).tbr"Log"=Log
wnd(Log|Project).tbr"Main"=Main
wnd(Log|Project).tbr"Merge"=Merge
wnd(Log|Project).tbr"Pull"=Pull
wnd(Log|Project).tbr"Push"=Push
wnd(Log|Project).tbr"Rebase"=Rebase
wnd(Log|Project).tbr"Remove"=Remove
wnd(Log|Project).tbr"Reset"=Reset
wnd(Log|Project).tbr"Revert"=Revert
wnd(Log|Project).tbr"Review"=Review
wnd(Log|Project).tbr"Save Stash"=Save Stash
wnd(Log|Project).tbr"Stage"=Stage
wnd(Log|Project).tbr"Sync"=Sync
wnd(Log|Project).tbr"Unstage"=Unstage
